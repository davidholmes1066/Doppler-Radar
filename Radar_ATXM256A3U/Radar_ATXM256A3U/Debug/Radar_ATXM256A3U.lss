
Radar_ATXM256A3U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  000017aa  0000183e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00802006  00802006  00001844  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cac  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003987  00000000  00000000  000076d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc9  00000000  00000000  0000b057  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  0000c020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032b5  00000000  00000000  0000c598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000114d  00000000  00000000  0000f84d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0001099a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__ctors_end>
       4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      10:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      14:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      18:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      1c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      20:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      24:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      28:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      30:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      34:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      38:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      3c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      44:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      4c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      50:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      58:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      5c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      60:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      68:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      6c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      70:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      7c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      80:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      84:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      90:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      94:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      9c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      bc:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_47>
      c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      fc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     100:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     104:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     108:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     10c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     110:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     114:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     118:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     11c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     120:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     124:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     128:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     12c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     130:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     134:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     138:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     13c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     140:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     144:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     148:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     14c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     150:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     154:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     158:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     15c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     160:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     164:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     168:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     16c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     170:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     174:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     178:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     17c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     180:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     184:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     188:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     18c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     190:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     194:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     198:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     19c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1bc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <init_Window+0x16>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df e5       	ldi	r29, 0x5F	; 95
     224:	de bf       	out	0x3e, r29	; 62
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0c bf       	out	0x3c, r16	; 60

0000022a <__do_clear_bss>:
     22a:	20 e2       	ldi	r18, 0x20	; 32
     22c:	a6 e0       	ldi	r26, 0x06	; 6
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	a4 31       	cpi	r26, 0x14	; 20
     236:	b2 07       	cpc	r27, r18
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>

0000023a <__do_copy_data>:
     23a:	10 e2       	ldi	r17, 0x20	; 32
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e2       	ldi	r27, 0x20	; 32
     240:	ea ea       	ldi	r30, 0xAA	; 170
     242:	f7 e1       	ldi	r31, 0x17	; 23
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0b bf       	out	0x3b, r16	; 59
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x14>
     24a:	07 90       	elpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	a6 30       	cpi	r26, 0x06	; 6
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0x10>
     254:	0e 94 6d 07 	call	0xeda	; 0xeda <main>
     258:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <_exit>

0000025c <__bad_interrupt>:
     25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000260 <avr_log2>:
#include "avr_complex.h"



uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
     260:	ac 01       	movw	r20, r24
	uint16_t i = 0;
	uint16_t res = 1;
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	30 e0       	ldi	r19, 0x00	; 0



uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
	uint16_t i = 0;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t res = 1;
	
	while(res < input)
     26a:	03 c0       	rjmp	.+6      	; 0x272 <avr_log2+0x12>
	{
		res *= 2;
     26c:	22 0f       	add	r18, r18
     26e:	33 1f       	adc	r19, r19
		i++;
     270:	01 96       	adiw	r24, 0x01	; 1
uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
	uint16_t i = 0;
	uint16_t res = 1;
	
	while(res < input)
     272:	24 17       	cp	r18, r20
     274:	35 07       	cpc	r19, r21
     276:	d0 f3       	brcs	.-12     	; 0x26c <avr_log2+0xc>
		res *= 2;
		i++;
	}
	
	return i;															//return log2
}
     278:	08 95       	ret

0000027a <cf_multiply>:



complexfloat cf_multiply(complexfloat A, complexfloat B)
{
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	a8 97       	sbiw	r28, 0x28	; 40
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	29 8b       	std	Y+17, r18	; 0x11
     2a6:	3a 8b       	std	Y+18, r19	; 0x12
     2a8:	4b 8b       	std	Y+19, r20	; 0x13
     2aa:	5c 8b       	std	Y+20, r21	; 0x14
     2ac:	6d 8b       	std	Y+21, r22	; 0x15
     2ae:	7e 8b       	std	Y+22, r23	; 0x16
     2b0:	8f 8b       	std	Y+23, r24	; 0x17
     2b2:	98 8f       	std	Y+24, r25	; 0x18
     2b4:	a9 8e       	std	Y+25, r10	; 0x19
     2b6:	ba 8e       	std	Y+26, r11	; 0x1a
     2b8:	cb 8e       	std	Y+27, r12	; 0x1b
     2ba:	dc 8e       	std	Y+28, r13	; 0x1c
     2bc:	ed 8e       	std	Y+29, r14	; 0x1d
     2be:	fe 8e       	std	Y+30, r15	; 0x1e
     2c0:	0f 8f       	std	Y+31, r16	; 0x1f
     2c2:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;                                                     //Creates a complex struct to return

    C.im = (A.im * B.re) + (A.re * B.im);                               //Calculate complex part
     2c4:	c9 88       	ldd	r12, Y+17	; 0x11
     2c6:	da 88       	ldd	r13, Y+18	; 0x12
     2c8:	eb 88       	ldd	r14, Y+19	; 0x13
     2ca:	fc 88       	ldd	r15, Y+20	; 0x14
     2cc:	4d 8c       	ldd	r4, Y+29	; 0x1d
     2ce:	5e 8c       	ldd	r5, Y+30	; 0x1e
     2d0:	6f 8c       	ldd	r6, Y+31	; 0x1f
     2d2:	78 a0       	ldd	r7, Y+32	; 0x20
     2d4:	a3 01       	movw	r20, r6
     2d6:	92 01       	movw	r18, r4
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     2e0:	6d a3       	std	Y+37, r22	; 0x25
     2e2:	7e a3       	std	Y+38, r23	; 0x26
     2e4:	8f a3       	std	Y+39, r24	; 0x27
     2e6:	98 a7       	std	Y+40, r25	; 0x28
     2e8:	8d 89       	ldd	r24, Y+21	; 0x15
     2ea:	9e 89       	ldd	r25, Y+22	; 0x16
     2ec:	af 89       	ldd	r26, Y+23	; 0x17
     2ee:	b8 8d       	ldd	r27, Y+24	; 0x18
     2f0:	89 a3       	std	Y+33, r24	; 0x21
     2f2:	9a a3       	std	Y+34, r25	; 0x22
     2f4:	ab a3       	std	Y+35, r26	; 0x23
     2f6:	bc a3       	std	Y+36, r27	; 0x24
     2f8:	89 8c       	ldd	r8, Y+25	; 0x19
     2fa:	9a 8c       	ldd	r9, Y+26	; 0x1a
     2fc:	ab 8c       	ldd	r10, Y+27	; 0x1b
     2fe:	bc 8c       	ldd	r11, Y+28	; 0x1c
     300:	a5 01       	movw	r20, r10
     302:	94 01       	movw	r18, r8
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     30c:	9b 01       	movw	r18, r22
     30e:	ac 01       	movw	r20, r24
     310:	6d a1       	ldd	r22, Y+37	; 0x25
     312:	7e a1       	ldd	r23, Y+38	; 0x26
     314:	8f a1       	ldd	r24, Y+39	; 0x27
     316:	98 a5       	ldd	r25, Y+40	; 0x28
     318:	0e 94 2c 08 	call	0x1058	; 0x1058 <__addsf3>
     31c:	69 87       	std	Y+9, r22	; 0x09
     31e:	7a 87       	std	Y+10, r23	; 0x0a
     320:	8b 87       	std	Y+11, r24	; 0x0b
     322:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = (-1*(A.im * B.im))+(A.re * B.re);                            //Calculate real part
     324:	29 a1       	ldd	r18, Y+33	; 0x21
     326:	3a a1       	ldd	r19, Y+34	; 0x22
     328:	4b a1       	ldd	r20, Y+35	; 0x23
     32a:	5c a1       	ldd	r21, Y+36	; 0x24
     32c:	c3 01       	movw	r24, r6
     32e:	b2 01       	movw	r22, r4
     330:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	a5 01       	movw	r20, r10
     33a:	94 01       	movw	r18, r8
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	c3 01       	movw	r24, r6
     34a:	b2 01       	movw	r22, r4
     34c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__subsf3>
     350:	6d 87       	std	Y+13, r22	; 0x0d
     352:	7e 87       	std	Y+14, r23	; 0x0e
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Returns complex struct
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	fe 01       	movw	r30, r28
     35c:	39 96       	adiw	r30, 0x09	; 9
     35e:	de 01       	movw	r26, r28
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	01 90       	ld	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	8a 95       	dec	r24
     368:	e1 f7       	brne	.-8      	; 0x362 <cf_multiply+0xe8>
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3a 81       	ldd	r19, Y+2	; 0x02
     36e:	4b 81       	ldd	r20, Y+3	; 0x03
     370:	5c 81       	ldd	r21, Y+4	; 0x04
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
}
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	a8 96       	adiw	r28, 0x28	; 40
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	08 95       	ret

000003a2 <cf_multiply_rf>:



complexfloat cf_multiply_rf(complexfloat A, float B)
{
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	68 97       	sbiw	r28, 0x18	; 24
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	29 8b       	std	Y+17, r18	; 0x11
     3be:	3a 8b       	std	Y+18, r19	; 0x12
     3c0:	4b 8b       	std	Y+19, r20	; 0x13
     3c2:	5c 8b       	std	Y+20, r21	; 0x14
     3c4:	6d 8b       	std	Y+21, r22	; 0x15
     3c6:	7e 8b       	std	Y+22, r23	; 0x16
     3c8:	8f 8b       	std	Y+23, r24	; 0x17
     3ca:	98 8f       	std	Y+24, r25	; 0x18
     3cc:	67 01       	movw	r12, r14
     3ce:	78 01       	movw	r14, r16
    complexfloat C;                                                     //Creates a complex struct to return

    C.im = A.im * B;                                                    //Calculates complex part
     3d0:	69 89       	ldd	r22, Y+17	; 0x11
     3d2:	7a 89       	ldd	r23, Y+18	; 0x12
     3d4:	8b 89       	ldd	r24, Y+19	; 0x13
     3d6:	9c 89       	ldd	r25, Y+20	; 0x14
     3d8:	a7 01       	movw	r20, r14
     3da:	96 01       	movw	r18, r12
     3dc:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     3e0:	69 87       	std	Y+9, r22	; 0x09
     3e2:	7a 87       	std	Y+10, r23	; 0x0a
     3e4:	8b 87       	std	Y+11, r24	; 0x0b
     3e6:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re * B;                                                    //Calculates real part
     3e8:	2d 89       	ldd	r18, Y+21	; 0x15
     3ea:	3e 89       	ldd	r19, Y+22	; 0x16
     3ec:	4f 89       	ldd	r20, Y+23	; 0x17
     3ee:	58 8d       	ldd	r21, Y+24	; 0x18
     3f0:	c7 01       	movw	r24, r14
     3f2:	b6 01       	movw	r22, r12
     3f4:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     3f8:	6d 87       	std	Y+13, r22	; 0x0d
     3fa:	7e 87       	std	Y+14, r23	; 0x0e
     3fc:	8f 87       	std	Y+15, r24	; 0x0f
     3fe:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Returns complex struct
     400:	88 e0       	ldi	r24, 0x08	; 8
     402:	fe 01       	movw	r30, r28
     404:	39 96       	adiw	r30, 0x09	; 9
     406:	de 01       	movw	r26, r28
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	01 90       	ld	r0, Z+
     40c:	0d 92       	st	X+, r0
     40e:	8a 95       	dec	r24
     410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	29 81       	ldd	r18, Y+1	; 0x01
     414:	3a 81       	ldd	r19, Y+2	; 0x02
     416:	4b 81       	ldd	r20, Y+3	; 0x03
     418:	5c 81       	ldd	r21, Y+4	; 0x04
     41a:	6d 81       	ldd	r22, Y+5	; 0x05
     41c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     41e:	8f 81       	ldd	r24, Y+7	; 0x07
     420:	98 85       	ldd	r25, Y+8	; 0x08
     422:	68 96       	adiw	r28, 0x18	; 24
     424:	cd bf       	out	0x3d, r28	; 61
     426:	de bf       	out	0x3e, r29	; 62
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <cf_exp>:



complexfloat cf_exp(float phi)
{
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	60 97       	sbiw	r28, 0x10	; 16
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	de bf       	out	0x3e, r29	; 62
     450:	6b 01       	movw	r12, r22
     452:	7c 01       	movw	r14, r24
    complexfloat C;                                                     //Creates a complex struct to return

    if(phi > 0)                                                         //positive exponent return cos(phi) + Isin(phi)
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	a9 01       	movw	r20, r18
     45a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__gesf2>
     45e:	18 16       	cp	r1, r24
     460:	8c f4       	brge	.+34     	; 0x484 <cf_exp+0x4a>
    {
        C.re = cosf(phi);
     462:	c7 01       	movw	r24, r14
     464:	b6 01       	movw	r22, r12
     466:	0e 94 98 08 	call	0x1130	; 0x1130 <cos>
     46a:	6d 87       	std	Y+13, r22	; 0x0d
     46c:	7e 87       	std	Y+14, r23	; 0x0e
     46e:	8f 87       	std	Y+15, r24	; 0x0f
     470:	98 8b       	std	Y+16, r25	; 0x10
        C.im = sinf(phi);
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <sin>
     47a:	69 87       	std	Y+9, r22	; 0x09
     47c:	7a 87       	std	Y+10, r23	; 0x0a
     47e:	8b 87       	std	Y+11, r24	; 0x0b
     480:	9c 87       	std	Y+12, r25	; 0x0c
     482:	10 c0       	rjmp	.+32     	; 0x4a4 <cf_exp+0x6a>
    }

    else                                                                //negative exponent return cos(phi) - Isin(phi)
    {
        C.re = cosf(phi);
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 98 08 	call	0x1130	; 0x1130 <cos>
     48c:	6d 87       	std	Y+13, r22	; 0x0d
     48e:	7e 87       	std	Y+14, r23	; 0x0e
     490:	8f 87       	std	Y+15, r24	; 0x0f
     492:	98 8b       	std	Y+16, r25	; 0x10
        C.im = (sinf(phi));
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <sin>
     49c:	69 87       	std	Y+9, r22	; 0x09
     49e:	7a 87       	std	Y+10, r23	; 0x0a
     4a0:	8b 87       	std	Y+11, r24	; 0x0b
     4a2:	9c 87       	std	Y+12, r25	; 0x0c
    }

    return C;                                                           //return complex exponent
     4a4:	88 e0       	ldi	r24, 0x08	; 8
     4a6:	fe 01       	movw	r30, r28
     4a8:	39 96       	adiw	r30, 0x09	; 9
     4aa:	de 01       	movw	r26, r28
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	01 90       	ld	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	8a 95       	dec	r24
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <cf_exp+0x74>
     4b6:	29 81       	ldd	r18, Y+1	; 0x01
     4b8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ba:	4b 81       	ldd	r20, Y+3	; 0x03
     4bc:	5c 81       	ldd	r21, Y+4	; 0x04
     4be:	6d 81       	ldd	r22, Y+5	; 0x05
     4c0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     4c2:	8f 81       	ldd	r24, Y+7	; 0x07
     4c4:	98 85       	ldd	r25, Y+8	; 0x08
     4c6:	60 96       	adiw	r28, 0x10	; 16
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	08 95       	ret

000004da <cf_plus>:



complexfloat cf_plus(complexfloat A, complexfloat B)
{
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	a0 97       	sbiw	r28, 0x20	; 32
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	29 8b       	std	Y+17, r18	; 0x11
     4fa:	3a 8b       	std	Y+18, r19	; 0x12
     4fc:	4b 8b       	std	Y+19, r20	; 0x13
     4fe:	5c 8b       	std	Y+20, r21	; 0x14
     500:	6d 8b       	std	Y+21, r22	; 0x15
     502:	7e 8b       	std	Y+22, r23	; 0x16
     504:	8f 8b       	std	Y+23, r24	; 0x17
     506:	98 8f       	std	Y+24, r25	; 0x18
     508:	a9 8e       	std	Y+25, r10	; 0x19
     50a:	ba 8e       	std	Y+26, r11	; 0x1a
     50c:	cb 8e       	std	Y+27, r12	; 0x1b
     50e:	dc 8e       	std	Y+28, r13	; 0x1c
     510:	ed 8e       	std	Y+29, r14	; 0x1d
     512:	fe 8e       	std	Y+30, r15	; 0x1e
     514:	0f 8f       	std	Y+31, r16	; 0x1f
     516:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;

    C.im = A.im + B.im;                                                 //Add complex components
     518:	69 89       	ldd	r22, Y+17	; 0x11
     51a:	7a 89       	ldd	r23, Y+18	; 0x12
     51c:	8b 89       	ldd	r24, Y+19	; 0x13
     51e:	9c 89       	ldd	r25, Y+20	; 0x14
     520:	29 8d       	ldd	r18, Y+25	; 0x19
     522:	3a 8d       	ldd	r19, Y+26	; 0x1a
     524:	4b 8d       	ldd	r20, Y+27	; 0x1b
     526:	5c 8d       	ldd	r21, Y+28	; 0x1c
     528:	0e 94 2c 08 	call	0x1058	; 0x1058 <__addsf3>
     52c:	69 87       	std	Y+9, r22	; 0x09
     52e:	7a 87       	std	Y+10, r23	; 0x0a
     530:	8b 87       	std	Y+11, r24	; 0x0b
     532:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re + B.re;                                                 //Add real components
     534:	6d 89       	ldd	r22, Y+21	; 0x15
     536:	7e 89       	ldd	r23, Y+22	; 0x16
     538:	8f 89       	ldd	r24, Y+23	; 0x17
     53a:	98 8d       	ldd	r25, Y+24	; 0x18
     53c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     53e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     540:	4f 8d       	ldd	r20, Y+31	; 0x1f
     542:	58 a1       	ldd	r21, Y+32	; 0x20
     544:	0e 94 2c 08 	call	0x1058	; 0x1058 <__addsf3>
     548:	6d 87       	std	Y+13, r22	; 0x0d
     54a:	7e 87       	std	Y+14, r23	; 0x0e
     54c:	8f 87       	std	Y+15, r24	; 0x0f
     54e:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Return complex struct
     550:	88 e0       	ldi	r24, 0x08	; 8
     552:	fe 01       	movw	r30, r28
     554:	39 96       	adiw	r30, 0x09	; 9
     556:	de 01       	movw	r26, r28
     558:	11 96       	adiw	r26, 0x01	; 1
     55a:	01 90       	ld	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	8a 95       	dec	r24
     560:	e1 f7       	brne	.-8      	; 0x55a <cf_plus+0x80>
     562:	29 81       	ldd	r18, Y+1	; 0x01
     564:	3a 81       	ldd	r19, Y+2	; 0x02
     566:	4b 81       	ldd	r20, Y+3	; 0x03
     568:	5c 81       	ldd	r21, Y+4	; 0x04
     56a:	6d 81       	ldd	r22, Y+5	; 0x05
     56c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	a0 96       	adiw	r28, 0x20	; 32
     574:	cd bf       	out	0x3d, r28	; 61
     576:	de bf       	out	0x3e, r29	; 62
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	bf 90       	pop	r11
     58a:	af 90       	pop	r10
     58c:	08 95       	ret

0000058e <cf_minus>:



complexfloat cf_minus(complexfloat A, complexfloat B)
{
     58e:	af 92       	push	r10
     590:	bf 92       	push	r11
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	a0 97       	sbiw	r28, 0x20	; 32
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	29 8b       	std	Y+17, r18	; 0x11
     5ae:	3a 8b       	std	Y+18, r19	; 0x12
     5b0:	4b 8b       	std	Y+19, r20	; 0x13
     5b2:	5c 8b       	std	Y+20, r21	; 0x14
     5b4:	6d 8b       	std	Y+21, r22	; 0x15
     5b6:	7e 8b       	std	Y+22, r23	; 0x16
     5b8:	8f 8b       	std	Y+23, r24	; 0x17
     5ba:	98 8f       	std	Y+24, r25	; 0x18
     5bc:	a9 8e       	std	Y+25, r10	; 0x19
     5be:	ba 8e       	std	Y+26, r11	; 0x1a
     5c0:	cb 8e       	std	Y+27, r12	; 0x1b
     5c2:	dc 8e       	std	Y+28, r13	; 0x1c
     5c4:	ed 8e       	std	Y+29, r14	; 0x1d
     5c6:	fe 8e       	std	Y+30, r15	; 0x1e
     5c8:	0f 8f       	std	Y+31, r16	; 0x1f
     5ca:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;

    C.im = A.im - B.im;                                                 //Subtract complex components
     5cc:	69 89       	ldd	r22, Y+17	; 0x11
     5ce:	7a 89       	ldd	r23, Y+18	; 0x12
     5d0:	8b 89       	ldd	r24, Y+19	; 0x13
     5d2:	9c 89       	ldd	r25, Y+20	; 0x14
     5d4:	29 8d       	ldd	r18, Y+25	; 0x19
     5d6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5d8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     5da:	5c 8d       	ldd	r21, Y+28	; 0x1c
     5dc:	0e 94 2b 08 	call	0x1056	; 0x1056 <__subsf3>
     5e0:	69 87       	std	Y+9, r22	; 0x09
     5e2:	7a 87       	std	Y+10, r23	; 0x0a
     5e4:	8b 87       	std	Y+11, r24	; 0x0b
     5e6:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re - B.re;                                                 //Subtract real components
     5e8:	6d 89       	ldd	r22, Y+21	; 0x15
     5ea:	7e 89       	ldd	r23, Y+22	; 0x16
     5ec:	8f 89       	ldd	r24, Y+23	; 0x17
     5ee:	98 8d       	ldd	r25, Y+24	; 0x18
     5f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     5f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     5f4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     5f6:	58 a1       	ldd	r21, Y+32	; 0x20
     5f8:	0e 94 2b 08 	call	0x1056	; 0x1056 <__subsf3>
     5fc:	6d 87       	std	Y+13, r22	; 0x0d
     5fe:	7e 87       	std	Y+14, r23	; 0x0e
     600:	8f 87       	std	Y+15, r24	; 0x0f
     602:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Return complex struct
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	fe 01       	movw	r30, r28
     608:	39 96       	adiw	r30, 0x09	; 9
     60a:	de 01       	movw	r26, r28
     60c:	11 96       	adiw	r26, 0x01	; 1
     60e:	01 90       	ld	r0, Z+
     610:	0d 92       	st	X+, r0
     612:	8a 95       	dec	r24
     614:	e1 f7       	brne	.-8      	; 0x60e <cf_minus+0x80>
     616:	29 81       	ldd	r18, Y+1	; 0x01
     618:	3a 81       	ldd	r19, Y+2	; 0x02
     61a:	4b 81       	ldd	r20, Y+3	; 0x03
     61c:	5c 81       	ldd	r21, Y+4	; 0x04
     61e:	6d 81       	ldd	r22, Y+5	; 0x05
     620:	7e 81       	ldd	r23, Y+6	; 0x06
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	98 85       	ldd	r25, Y+8	; 0x08
     626:	a0 96       	adiw	r28, 0x20	; 32
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	bf 90       	pop	r11
     63e:	af 90       	pop	r10
     640:	08 95       	ret

00000642 <calc_BitReversal>:
#include "avr_fft.h"

uint16_t calc_BitReversal(uint16_t Value)
{
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
	uint16_t Nr;                                                                                                //Number of bits to be reversed
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed
     648:	80 e1       	ldi	r24, 0x10	; 16
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     650:	fc 01       	movw	r30, r24
     652:	31 97       	sbiw	r30, 0x01	; 1

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     654:	bf 01       	movw	r22, r30
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0

uint16_t calc_BitReversal(uint16_t Value)
{
	uint16_t Nr;                                                                                                //Number of bits to be reversed
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     65e:	1c c0       	rjmp	.+56     	; 0x698 <calc_BitReversal+0x56>
	{
		Temp = (0x01<<i);                                                                                       //Creates bit mask to test bit i
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	04 2e       	mov	r0, r20
     666:	02 c0       	rjmp	.+4      	; 0x66c <calc_BitReversal+0x2a>
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	0a 94       	dec	r0
     66e:	e2 f7       	brpl	.-8      	; 0x668 <calc_BitReversal+0x26>
		RValue |= (((Value&Temp)>>i)<<j);                                                                       //Tests bit i and shifts to jth position (Bit reversal)
     670:	2c 23       	and	r18, r28
     672:	3d 23       	and	r19, r29
     674:	04 2e       	mov	r0, r20
     676:	02 c0       	rjmp	.+4      	; 0x67c <calc_BitReversal+0x3a>
     678:	36 95       	lsr	r19
     67a:	27 95       	ror	r18
     67c:	0a 94       	dec	r0
     67e:	e2 f7       	brpl	.-8      	; 0x678 <calc_BitReversal+0x36>
     680:	06 2e       	mov	r0, r22
     682:	02 c0       	rjmp	.+4      	; 0x688 <calc_BitReversal+0x46>
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <calc_BitReversal+0x42>
     68c:	82 2b       	or	r24, r18
     68e:	93 2b       	or	r25, r19
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     690:	4f 5f       	subi	r20, 0xFF	; 255
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	61 50       	subi	r22, 0x01	; 1
     696:	71 09       	sbc	r23, r1
     698:	e4 17       	cp	r30, r20
     69a:	f5 07       	cpc	r31, r21
     69c:	08 f7       	brcc	.-62     	; 0x660 <calc_BitReversal+0x1e>
		Temp = (0x01<<i);                                                                                       //Creates bit mask to test bit i
		RValue |= (((Value&Temp)>>i)<<j);                                                                       //Tests bit i and shifts to jth position (Bit reversal)
	}

	return RValue;                                                                                              //Returns the bit reversed Value
}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <init_BRLookup>:



uint16_t *init_BRLookup(void)
{
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
	uint16_t *Lookup_Reverse = malloc(sizeof(uint16_t)*N);														//Allocates memory for lookup array size(2*N)bytes
     6b0:	80 e2       	ldi	r24, 0x20	; 32
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <malloc>
     6b8:	7c 01       	movw	r14, r24

	for(uint16_t i = 0; i < N; i++)
     6ba:	c0 e0       	ldi	r28, 0x00	; 0
     6bc:	d0 e0       	ldi	r29, 0x00	; 0
     6be:	0c c0       	rjmp	.+24     	; 0x6d8 <init_BRLookup+0x34>
	{
		Lookup_Reverse[i] = calc_BitReversal(i);																//Calculates the bit reversal for the fft input order
     6c0:	8e 01       	movw	r16, r28
     6c2:	00 0f       	add	r16, r16
     6c4:	11 1f       	adc	r17, r17
     6c6:	0e 0d       	add	r16, r14
     6c8:	1f 1d       	adc	r17, r15
     6ca:	ce 01       	movw	r24, r28
     6cc:	0e 94 21 03 	call	0x642	; 0x642 <calc_BitReversal>
     6d0:	f8 01       	movw	r30, r16
     6d2:	80 83       	st	Z, r24
     6d4:	91 83       	std	Z+1, r25	; 0x01

uint16_t *init_BRLookup(void)
{
	uint16_t *Lookup_Reverse = malloc(sizeof(uint16_t)*N);														//Allocates memory for lookup array size(2*N)bytes

	for(uint16_t i = 0; i < N; i++)
     6d6:	21 96       	adiw	r28, 0x01	; 1
     6d8:	c0 31       	cpi	r28, 0x10	; 16
     6da:	d1 05       	cpc	r29, r1
     6dc:	88 f3       	brcs	.-30     	; 0x6c0 <init_BRLookup+0x1c>
	{
		Lookup_Reverse[i] = calc_BitReversal(i);																//Calculates the bit reversal for the fft input order
	}

	return Lookup_Reverse;
}
     6de:	c7 01       	movw	r24, r14
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <init_avr_Wlookup>:

complexfloat *init_avr_Wlookup(void)
{
     6ee:	6f 92       	push	r6
     6f0:	7f 92       	push	r7
     6f2:	8f 92       	push	r8
     6f4:	9f 92       	push	r9
     6f6:	af 92       	push	r10
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	60 97       	sbiw	r28, 0x10	; 16
     710:	cd bf       	out	0x3d, r28	; 61
     712:	de bf       	out	0x3e, r29	; 62
	complexfloat *W = malloc(sizeof(complexfloat)*(N/2));														//Allocate heap memory for the twiddle factors
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 b2 0a 	call	0x1564	; 0x1564 <malloc>
     71c:	3c 01       	movw	r6, r24
	complexfloat TempW;                                                                                         //Create temporary variable
	TempW.re = 1, TempW.im = 0;                                                                                 //Set to value W^0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	a0 e8       	ldi	r26, 0x80	; 128
     724:	bf e3       	ldi	r27, 0x3F	; 63
     726:	8d 83       	std	Y+5, r24	; 0x05
     728:	9e 83       	std	Y+6, r25	; 0x06
     72a:	af 83       	std	Y+7, r26	; 0x07
     72c:	b8 87       	std	Y+8, r27	; 0x08
     72e:	19 82       	std	Y+1, r1	; 0x01
     730:	1a 82       	std	Y+2, r1	; 0x02
     732:	1b 82       	std	Y+3, r1	; 0x03
     734:	1c 82       	std	Y+4, r1	; 0x04
	complexfloat Wk = cf_exp((-2*M_PI)/N);																		//Value Wn^1
     736:	6b ed       	ldi	r22, 0xDB	; 219
     738:	7f e0       	ldi	r23, 0x0F	; 15
     73a:	89 ec       	ldi	r24, 0xC9	; 201
     73c:	9e eb       	ldi	r25, 0xBE	; 190
     73e:	0e 94 1d 02 	call	0x43a	; 0x43a <cf_exp>
     742:	29 87       	std	Y+9, r18	; 0x09
     744:	3a 87       	std	Y+10, r19	; 0x0a
     746:	4b 87       	std	Y+11, r20	; 0x0b
     748:	5c 87       	std	Y+12, r21	; 0x0c
     74a:	6d 87       	std	Y+13, r22	; 0x0d
     74c:	7e 87       	std	Y+14, r23	; 0x0e
     74e:	8f 87       	std	Y+15, r24	; 0x0f
     750:	98 8b       	std	Y+16, r25	; 0x10

	for(uint16_t i = 0; i < (N/2); i++)
     752:	81 2c       	mov	r8, r1
     754:	91 2c       	mov	r9, r1
     756:	36 c0       	rjmp	.+108    	; 0x7c4 <init_avr_Wlookup+0xd6>
	{
		W[i].re = TempW.re;                                                                                     //Generate twiddle factors
     758:	f4 01       	movw	r30, r8
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	e6 0d       	add	r30, r6
     768:	f7 1d       	adc	r31, r7
     76a:	8d 81       	ldd	r24, Y+5	; 0x05
     76c:	9e 81       	ldd	r25, Y+6	; 0x06
     76e:	af 81       	ldd	r26, Y+7	; 0x07
     770:	b8 85       	ldd	r27, Y+8	; 0x08
     772:	84 83       	std	Z+4, r24	; 0x04
     774:	95 83       	std	Z+5, r25	; 0x05
     776:	a6 83       	std	Z+6, r26	; 0x06
     778:	b7 83       	std	Z+7, r27	; 0x07
		W[i].im = TempW.im;
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	9a 81       	ldd	r25, Y+2	; 0x02
     77e:	ab 81       	ldd	r26, Y+3	; 0x03
     780:	bc 81       	ldd	r27, Y+4	; 0x04
     782:	80 83       	st	Z, r24
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	a2 83       	std	Z+2, r26	; 0x02
     788:	b3 83       	std	Z+3, r27	; 0x03

		TempW = cf_multiply(TempW, Wk);																			//Update temporary variable (W^(i+1))
     78a:	a9 84       	ldd	r10, Y+9	; 0x09
     78c:	ba 84       	ldd	r11, Y+10	; 0x0a
     78e:	cb 84       	ldd	r12, Y+11	; 0x0b
     790:	dc 84       	ldd	r13, Y+12	; 0x0c
     792:	ed 84       	ldd	r14, Y+13	; 0x0d
     794:	fe 84       	ldd	r15, Y+14	; 0x0e
     796:	0f 85       	ldd	r16, Y+15	; 0x0f
     798:	18 89       	ldd	r17, Y+16	; 0x10
     79a:	29 81       	ldd	r18, Y+1	; 0x01
     79c:	3a 81       	ldd	r19, Y+2	; 0x02
     79e:	4b 81       	ldd	r20, Y+3	; 0x03
     7a0:	5c 81       	ldd	r21, Y+4	; 0x04
     7a2:	6d 81       	ldd	r22, Y+5	; 0x05
     7a4:	7e 81       	ldd	r23, Y+6	; 0x06
     7a6:	8f 81       	ldd	r24, Y+7	; 0x07
     7a8:	98 85       	ldd	r25, Y+8	; 0x08
     7aa:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     7ae:	29 83       	std	Y+1, r18	; 0x01
     7b0:	3a 83       	std	Y+2, r19	; 0x02
     7b2:	4b 83       	std	Y+3, r20	; 0x03
     7b4:	5c 83       	std	Y+4, r21	; 0x04
     7b6:	6d 83       	std	Y+5, r22	; 0x05
     7b8:	7e 83       	std	Y+6, r23	; 0x06
     7ba:	8f 83       	std	Y+7, r24	; 0x07
     7bc:	98 87       	std	Y+8, r25	; 0x08
	complexfloat *W = malloc(sizeof(complexfloat)*(N/2));														//Allocate heap memory for the twiddle factors
	complexfloat TempW;                                                                                         //Create temporary variable
	TempW.re = 1, TempW.im = 0;                                                                                 //Set to value W^0
	complexfloat Wk = cf_exp((-2*M_PI)/N);																		//Value Wn^1

	for(uint16_t i = 0; i < (N/2); i++)
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	88 1a       	sub	r8, r24
     7c2:	98 0a       	sbc	r9, r24
     7c4:	88 e0       	ldi	r24, 0x08	; 8
     7c6:	88 16       	cp	r8, r24
     7c8:	91 04       	cpc	r9, r1
     7ca:	30 f2       	brcs	.-116    	; 0x758 <init_avr_Wlookup+0x6a>

		TempW = cf_multiply(TempW, Wk);																			//Update temporary variable (W^(i+1))
	}

	return W;                                                                                                   //Return pointer to the complex struct containing twiddle factors
}
     7cc:	c3 01       	movw	r24, r6
     7ce:	60 96       	adiw	r28, 0x10	; 16
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	6f 90       	pop	r6
     7f0:	08 95       	ret

000007f2 <init_avr_fft>:



complexfloat *init_avr_fft(void)
{
	complexfloat *FFT_Array = malloc(sizeof(complexfloat)*N);													//Allocate heap memory 4*N bytes
     7f2:	80 e8       	ldi	r24, 0x80	; 128
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <malloc>
	return FFT_Array;                                                                                           //Returns pointer to allocated memory
}
     7fa:	08 95       	ret

000007fc <apply_avr_Window>:



void apply_avr_Window(complexfloat *FFT_Array, float *Window, uint16_t *Lookup_Reverse)
{
     7fc:	6f 92       	push	r6
     7fe:	7f 92       	push	r7
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	6c 01       	movw	r12, r24
     81a:	5b 01       	movw	r10, r22
     81c:	4a 01       	movw	r8, r20
	for(uint16_t i = 0; i < (N/2); i++)
     81e:	61 2c       	mov	r6, r1
     820:	71 2c       	mov	r7, r1
     822:	2f c0       	rjmp	.+94     	; 0x882 <apply_avr_Window+0x86>
	{
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
     824:	f3 01       	movw	r30, r6
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	e8 0d       	add	r30, r8
     82c:	f9 1d       	adc	r31, r9
     82e:	c0 81       	ld	r28, Z
     830:	d1 81       	ldd	r29, Z+1	; 0x01
     832:	cc 0f       	add	r28, r28
     834:	dd 1f       	adc	r29, r29
     836:	cc 0f       	add	r28, r28
     838:	dd 1f       	adc	r29, r29
     83a:	cc 0f       	add	r28, r28
     83c:	dd 1f       	adc	r29, r29
     83e:	f3 01       	movw	r30, r6
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	ea 0d       	add	r30, r10
     84a:	fb 1d       	adc	r31, r11
     84c:	e0 80       	ld	r14, Z
     84e:	f1 80       	ldd	r15, Z+1	; 0x01
     850:	02 81       	ldd	r16, Z+2	; 0x02
     852:	13 81       	ldd	r17, Z+3	; 0x03
     854:	cc 0d       	add	r28, r12
     856:	dd 1d       	adc	r29, r13
     858:	28 81       	ld	r18, Y
     85a:	39 81       	ldd	r19, Y+1	; 0x01
     85c:	4a 81       	ldd	r20, Y+2	; 0x02
     85e:	5b 81       	ldd	r21, Y+3	; 0x03
     860:	6c 81       	ldd	r22, Y+4	; 0x04
     862:	7d 81       	ldd	r23, Y+5	; 0x05
     864:	8e 81       	ldd	r24, Y+6	; 0x06
     866:	9f 81       	ldd	r25, Y+7	; 0x07
     868:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_multiply_rf>
     86c:	28 83       	st	Y, r18
     86e:	39 83       	std	Y+1, r19	; 0x01
     870:	4a 83       	std	Y+2, r20	; 0x02
     872:	5b 83       	std	Y+3, r21	; 0x03
     874:	6c 83       	std	Y+4, r22	; 0x04
     876:	7d 83       	std	Y+5, r23	; 0x05
     878:	8e 83       	std	Y+6, r24	; 0x06
     87a:	9f 83       	std	Y+7, r25	; 0x07



void apply_avr_Window(complexfloat *FFT_Array, float *Window, uint16_t *Lookup_Reverse)
{
	for(uint16_t i = 0; i < (N/2); i++)
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	68 1a       	sub	r6, r24
     880:	78 0a       	sbc	r7, r24
     882:	88 e0       	ldi	r24, 0x08	; 8
     884:	68 16       	cp	r6, r24
     886:	71 04       	cpc	r7, r1
     888:	68 f2       	brcs	.-102    	; 0x824 <apply_avr_Window+0x28>
     88a:	68 94       	set
     88c:	66 24       	eor	r6, r6
     88e:	63 f8       	bld	r6, 3
     890:	71 2c       	mov	r7, r1
     892:	34 c0       	rjmp	.+104    	; 0x8fc <apply_avr_Window+0x100>
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
	}

	for(uint16_t i = (N/2); i > 0; i--)
	{
		FFT_Array[Lookup_Reverse[N-i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[N-i]], Window[i-1]);			//Apply window to second half of samples
     894:	ee 27       	eor	r30, r30
     896:	ff 27       	eor	r31, r31
     898:	e6 19       	sub	r30, r6
     89a:	f7 09       	sbc	r31, r7
     89c:	ee 0f       	add	r30, r30
     89e:	ff 1f       	adc	r31, r31
     8a0:	e8 0d       	add	r30, r8
     8a2:	f9 1d       	adc	r31, r9
     8a4:	c0 a1       	ldd	r28, Z+32	; 0x20
     8a6:	d1 a1       	ldd	r29, Z+33	; 0x21
     8a8:	cc 0f       	add	r28, r28
     8aa:	dd 1f       	adc	r29, r29
     8ac:	cc 0f       	add	r28, r28
     8ae:	dd 1f       	adc	r29, r29
     8b0:	cc 0f       	add	r28, r28
     8b2:	dd 1f       	adc	r29, r29
     8b4:	f3 01       	movw	r30, r6
     8b6:	e1 50       	subi	r30, 0x01	; 1
     8b8:	f0 4c       	sbci	r31, 0xC0	; 192
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	ea 0d       	add	r30, r10
     8c4:	fb 1d       	adc	r31, r11
     8c6:	e0 80       	ld	r14, Z
     8c8:	f1 80       	ldd	r15, Z+1	; 0x01
     8ca:	02 81       	ldd	r16, Z+2	; 0x02
     8cc:	13 81       	ldd	r17, Z+3	; 0x03
     8ce:	cc 0d       	add	r28, r12
     8d0:	dd 1d       	adc	r29, r13
     8d2:	28 81       	ld	r18, Y
     8d4:	39 81       	ldd	r19, Y+1	; 0x01
     8d6:	4a 81       	ldd	r20, Y+2	; 0x02
     8d8:	5b 81       	ldd	r21, Y+3	; 0x03
     8da:	6c 81       	ldd	r22, Y+4	; 0x04
     8dc:	7d 81       	ldd	r23, Y+5	; 0x05
     8de:	8e 81       	ldd	r24, Y+6	; 0x06
     8e0:	9f 81       	ldd	r25, Y+7	; 0x07
     8e2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_multiply_rf>
     8e6:	28 83       	st	Y, r18
     8e8:	39 83       	std	Y+1, r19	; 0x01
     8ea:	4a 83       	std	Y+2, r20	; 0x02
     8ec:	5b 83       	std	Y+3, r21	; 0x03
     8ee:	6c 83       	std	Y+4, r22	; 0x04
     8f0:	7d 83       	std	Y+5, r23	; 0x05
     8f2:	8e 83       	std	Y+6, r24	; 0x06
     8f4:	9f 83       	std	Y+7, r25	; 0x07
	for(uint16_t i = 0; i < (N/2); i++)
	{
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
	}

	for(uint16_t i = (N/2); i > 0; i--)
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	68 1a       	sub	r6, r24
     8fa:	71 08       	sbc	r7, r1
     8fc:	61 14       	cp	r6, r1
     8fe:	71 04       	cpc	r7, r1
     900:	49 f6       	brne	.-110    	; 0x894 <apply_avr_Window+0x98>
	{
		FFT_Array[Lookup_Reverse[N-i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[N-i]], Window[i-1]);			//Apply window to second half of samples
	}
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	7f 90       	pop	r7
     91c:	6f 90       	pop	r6
     91e:	08 95       	ret

00000920 <calc_avr_FFT>:



void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
     920:	2f 92       	push	r2
     922:	3f 92       	push	r3
     924:	4f 92       	push	r4
     926:	5f 92       	push	r5
     928:	6f 92       	push	r6
     92a:	7f 92       	push	r7
     92c:	8f 92       	push	r8
     92e:	9f 92       	push	r9
     930:	af 92       	push	r10
     932:	bf 92       	push	r11
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	62 97       	sbiw	r28, 0x12	; 18
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	1c 01       	movw	r2, r24
     950:	6f 87       	std	Y+15, r22	; 0x0f
     952:	78 8b       	std	Y+16, r23	; 0x10
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     954:	19 8a       	std	Y+17, r1	; 0x11
     956:	1a 8a       	std	Y+18, r1	; 0x12

void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step
     958:	22 e0       	ldi	r18, 0x02	; 2
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	29 87       	std	Y+9, r18	; 0x09
     95e:	3a 87       	std	Y+10, r19	; 0x0a



void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
     960:	88 e0       	ldi	r24, 0x08	; 8
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	8d 87       	std	Y+13, r24	; 0x0d
     966:	9e 87       	std	Y+14, r25	; 0x0e
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     968:	d4 c0       	rjmp	.+424    	; 0xb12 <calc_avr_FFT+0x1f2>
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
		{
			for(uint16_t k = 0; k < ((N/PCalc)/2); k++)                                                         //Calculation in one parallel
			{
				Temp = cf_multiply(FFT_Array[(CNr*j)+(k+(CNr/2))], W[k*((N/2)/(CNr/2))]);						//Calculates multiplication in butterfly
     96a:	88 e0       	ldi	r24, 0x08	; 8
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	69 84       	ldd	r6, Y+9	; 0x09
     970:	7a 84       	ldd	r7, Y+10	; 0x0a
     972:	76 94       	lsr	r7
     974:	67 94       	ror	r6
     976:	b3 01       	movw	r22, r6
     978:	0e 94 9e 0a 	call	0x153c	; 0x153c <__udivmodhi4>
     97c:	46 9e       	mul	r4, r22
     97e:	d0 01       	movw	r26, r0
     980:	47 9e       	mul	r4, r23
     982:	b0 0d       	add	r27, r0
     984:	56 9e       	mul	r5, r22
     986:	b0 0d       	add	r27, r0
     988:	11 24       	eor	r1, r1
     98a:	aa 0f       	add	r26, r26
     98c:	bb 1f       	adc	r27, r27
     98e:	aa 0f       	add	r26, r26
     990:	bb 1f       	adc	r27, r27
     992:	aa 0f       	add	r26, r26
     994:	bb 1f       	adc	r27, r27
     996:	ef 85       	ldd	r30, Y+15	; 0x0f
     998:	f8 89       	ldd	r31, Y+16	; 0x10
     99a:	ae 0f       	add	r26, r30
     99c:	bf 1f       	adc	r27, r31
     99e:	29 85       	ldd	r18, Y+9	; 0x09
     9a0:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     9a6:	28 9f       	mul	r18, r24
     9a8:	40 01       	movw	r8, r0
     9aa:	29 9f       	mul	r18, r25
     9ac:	90 0c       	add	r9, r0
     9ae:	38 9f       	mul	r19, r24
     9b0:	90 0c       	add	r9, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	f2 01       	movw	r30, r4
     9b6:	e6 0d       	add	r30, r6
     9b8:	f7 1d       	adc	r31, r7
     9ba:	e8 0d       	add	r30, r8
     9bc:	f9 1d       	adc	r31, r9
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	e2 0d       	add	r30, r2
     9cc:	f3 1d       	adc	r31, r3
     9ce:	ac 90       	ld	r10, X
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	bc 90       	ld	r11, X
     9d4:	11 97       	sbiw	r26, 0x01	; 1
     9d6:	12 96       	adiw	r26, 0x02	; 2
     9d8:	cc 90       	ld	r12, X
     9da:	12 97       	sbiw	r26, 0x02	; 2
     9dc:	13 96       	adiw	r26, 0x03	; 3
     9de:	dc 90       	ld	r13, X
     9e0:	13 97       	sbiw	r26, 0x03	; 3
     9e2:	14 96       	adiw	r26, 0x04	; 4
     9e4:	ec 90       	ld	r14, X
     9e6:	14 97       	sbiw	r26, 0x04	; 4
     9e8:	15 96       	adiw	r26, 0x05	; 5
     9ea:	fc 90       	ld	r15, X
     9ec:	15 97       	sbiw	r26, 0x05	; 5
     9ee:	16 96       	adiw	r26, 0x06	; 6
     9f0:	0c 91       	ld	r16, X
     9f2:	16 97       	sbiw	r26, 0x06	; 6
     9f4:	17 96       	adiw	r26, 0x07	; 7
     9f6:	1c 91       	ld	r17, X
     9f8:	20 81       	ld	r18, Z
     9fa:	31 81       	ldd	r19, Z+1	; 0x01
     9fc:	42 81       	ldd	r20, Z+2	; 0x02
     9fe:	53 81       	ldd	r21, Z+3	; 0x03
     a00:	64 81       	ldd	r22, Z+4	; 0x04
     a02:	75 81       	ldd	r23, Z+5	; 0x05
     a04:	86 81       	ldd	r24, Z+6	; 0x06
     a06:	97 81       	ldd	r25, Z+7	; 0x07
     a08:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     a0c:	29 83       	std	Y+1, r18	; 0x01
     a0e:	3a 83       	std	Y+2, r19	; 0x02
     a10:	4b 83       	std	Y+3, r20	; 0x03
     a12:	5c 83       	std	Y+4, r21	; 0x04
     a14:	6d 83       	std	Y+5, r22	; 0x05
     a16:	7e 83       	std	Y+6, r23	; 0x06
     a18:	8f 83       	std	Y+7, r24	; 0x07
     a1a:	98 87       	std	Y+8, r25	; 0x08
				FFT_Array[((j*CNr)+k)+(CNr/2)] = cf_minus(FFT_Array[(j*CNr)+k],Temp);							//Calculates and stores bottom of butterfly
     a1c:	84 0c       	add	r8, r4
     a1e:	95 1c       	adc	r9, r5
     a20:	68 0c       	add	r6, r8
     a22:	79 1c       	adc	r7, r9
     a24:	66 0c       	add	r6, r6
     a26:	77 1c       	adc	r7, r7
     a28:	66 0c       	add	r6, r6
     a2a:	77 1c       	adc	r7, r7
     a2c:	66 0c       	add	r6, r6
     a2e:	77 1c       	adc	r7, r7
     a30:	62 0c       	add	r6, r2
     a32:	73 1c       	adc	r7, r3
     a34:	88 0c       	add	r8, r8
     a36:	99 1c       	adc	r9, r9
     a38:	88 0c       	add	r8, r8
     a3a:	99 1c       	adc	r9, r9
     a3c:	88 0c       	add	r8, r8
     a3e:	99 1c       	adc	r9, r9
     a40:	82 0c       	add	r8, r2
     a42:	93 1c       	adc	r9, r3
     a44:	a2 2e       	mov	r10, r18
     a46:	b3 2e       	mov	r11, r19
     a48:	c4 2e       	mov	r12, r20
     a4a:	d5 2e       	mov	r13, r21
     a4c:	e6 2e       	mov	r14, r22
     a4e:	f7 2e       	mov	r15, r23
     a50:	08 2f       	mov	r16, r24
     a52:	19 2f       	mov	r17, r25
     a54:	f4 01       	movw	r30, r8
     a56:	20 81       	ld	r18, Z
     a58:	31 81       	ldd	r19, Z+1	; 0x01
     a5a:	42 81       	ldd	r20, Z+2	; 0x02
     a5c:	53 81       	ldd	r21, Z+3	; 0x03
     a5e:	64 81       	ldd	r22, Z+4	; 0x04
     a60:	75 81       	ldd	r23, Z+5	; 0x05
     a62:	86 81       	ldd	r24, Z+6	; 0x06
     a64:	97 81       	ldd	r25, Z+7	; 0x07
     a66:	0e 94 c7 02 	call	0x58e	; 0x58e <cf_minus>
     a6a:	f3 01       	movw	r30, r6
     a6c:	20 83       	st	Z, r18
     a6e:	31 83       	std	Z+1, r19	; 0x01
     a70:	42 83       	std	Z+2, r20	; 0x02
     a72:	53 83       	std	Z+3, r21	; 0x03
     a74:	64 83       	std	Z+4, r22	; 0x04
     a76:	75 83       	std	Z+5, r23	; 0x05
     a78:	86 83       	std	Z+6, r24	; 0x06
     a7a:	97 83       	std	Z+7, r25	; 0x07
				FFT_Array[(j*CNr)+k] = cf_plus(FFT_Array[(j*CNr)+k],Temp);										//Calculates and stores top of butterfly
     a7c:	a9 80       	ldd	r10, Y+1	; 0x01
     a7e:	ba 80       	ldd	r11, Y+2	; 0x02
     a80:	cb 80       	ldd	r12, Y+3	; 0x03
     a82:	dc 80       	ldd	r13, Y+4	; 0x04
     a84:	ed 80       	ldd	r14, Y+5	; 0x05
     a86:	fe 80       	ldd	r15, Y+6	; 0x06
     a88:	0f 81       	ldd	r16, Y+7	; 0x07
     a8a:	18 85       	ldd	r17, Y+8	; 0x08
     a8c:	f4 01       	movw	r30, r8
     a8e:	20 81       	ld	r18, Z
     a90:	31 81       	ldd	r19, Z+1	; 0x01
     a92:	42 81       	ldd	r20, Z+2	; 0x02
     a94:	53 81       	ldd	r21, Z+3	; 0x03
     a96:	64 81       	ldd	r22, Z+4	; 0x04
     a98:	75 81       	ldd	r23, Z+5	; 0x05
     a9a:	86 81       	ldd	r24, Z+6	; 0x06
     a9c:	97 81       	ldd	r25, Z+7	; 0x07
     a9e:	0e 94 6d 02 	call	0x4da	; 0x4da <cf_plus>
     aa2:	f4 01       	movw	r30, r8
     aa4:	20 83       	st	Z, r18
     aa6:	31 83       	std	Z+1, r19	; 0x01
     aa8:	42 83       	std	Z+2, r20	; 0x02
     aaa:	53 83       	std	Z+3, r21	; 0x03
     aac:	64 83       	std	Z+4, r22	; 0x04
     aae:	75 83       	std	Z+5, r23	; 0x05
     ab0:	86 83       	std	Z+6, r24	; 0x06
     ab2:	97 83       	std	Z+7, r25	; 0x07

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
		{
			for(uint16_t k = 0; k < ((N/PCalc)/2); k++)                                                         //Calculation in one parallel
     ab4:	ff ef       	ldi	r31, 0xFF	; 255
     ab6:	4f 1a       	sub	r4, r31
     ab8:	5f 0a       	sbc	r5, r31
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <calc_avr_FFT+0x1a0>
     abc:	41 2c       	mov	r4, r1
     abe:	51 2c       	mov	r5, r1
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	6d 85       	ldd	r22, Y+13	; 0x0d
     ac6:	7e 85       	ldd	r23, Y+14	; 0x0e
     ac8:	0e 94 9e 0a 	call	0x153c	; 0x153c <__udivmodhi4>
     acc:	46 16       	cp	r4, r22
     ace:	57 06       	cpc	r5, r23
     ad0:	08 f4       	brcc	.+2      	; 0xad4 <calc_avr_FFT+0x1b4>
     ad2:	4b cf       	rjmp	.-362    	; 0x96a <calc_avr_FFT+0x4a>
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
     ad4:	2b 85       	ldd	r18, Y+11	; 0x0b
     ad6:	3c 85       	ldd	r19, Y+12	; 0x0c
     ad8:	2f 5f       	subi	r18, 0xFF	; 255
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	2b 87       	std	Y+11, r18	; 0x0b
     ade:	3c 87       	std	Y+12, r19	; 0x0c
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <calc_avr_FFT+0x1c6>
     ae2:	1b 86       	std	Y+11, r1	; 0x0b
     ae4:	1c 86       	std	Y+12, r1	; 0x0c
     ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
     aea:	eb 85       	ldd	r30, Y+11	; 0x0b
     aec:	fc 85       	ldd	r31, Y+12	; 0x0c
     aee:	e8 17       	cp	r30, r24
     af0:	f9 07       	cpc	r31, r25
     af2:	20 f3       	brcs	.-56     	; 0xabc <calc_avr_FFT+0x19c>
				FFT_Array[((j*CNr)+k)+(CNr/2)] = cf_minus(FFT_Array[(j*CNr)+k],Temp);							//Calculates and stores bottom of butterfly
				FFT_Array[(j*CNr)+k] = cf_plus(FFT_Array[(j*CNr)+k],Temp);										//Calculates and stores top of butterfly
			}
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
     af4:	29 85       	ldd	r18, Y+9	; 0x09
     af6:	3a 85       	ldd	r19, Y+10	; 0x0a
     af8:	22 0f       	add	r18, r18
     afa:	33 1f       	adc	r19, r19
     afc:	29 87       	std	Y+9, r18	; 0x09
     afe:	3a 87       	std	Y+10, r19	; 0x0a
		PCalc /= 2;                                                                                             //Set parallel computations to half
     b00:	96 95       	lsr	r25
     b02:	87 95       	ror	r24
     b04:	8d 87       	std	Y+13, r24	; 0x0d
     b06:	9e 87       	std	Y+14, r25	; 0x0e
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     b08:	89 89       	ldd	r24, Y+17	; 0x11
     b0a:	9a 89       	ldd	r25, Y+18	; 0x12
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	89 8b       	std	Y+17, r24	; 0x11
     b10:	9a 8b       	std	Y+18, r25	; 0x12
     b12:	80 e1       	ldi	r24, 0x10	; 16
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     b1a:	e9 89       	ldd	r30, Y+17	; 0x11
     b1c:	fa 89       	ldd	r31, Y+18	; 0x12
     b1e:	e8 17       	cp	r30, r24
     b20:	f9 07       	cpc	r31, r25
     b22:	f8 f2       	brcs	.-66     	; 0xae2 <calc_avr_FFT+0x1c2>
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
		PCalc /= 2;                                                                                             //Set parallel computations to half
	}
}
     b24:	62 96       	adiw	r28, 0x12	; 18
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	6f 90       	pop	r6
     b46:	5f 90       	pop	r5
     b48:	4f 90       	pop	r4
     b4a:	3f 90       	pop	r3
     b4c:	2f 90       	pop	r2
     b4e:	08 95       	ret

00000b50 <init_Window>:

float *init_Window(void)
{
     b50:	4f 92       	push	r4
     b52:	5f 92       	push	r5
     b54:	6f 92       	push	r6
     b56:	7f 92       	push	r7
     b58:	af 92       	push	r10
     b5a:	bf 92       	push	r11
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
	float *Window = malloc(sizeof(float)*(N/2));																//Allocate memory for the window function
     b6c:	80 e2       	ldi	r24, 0x20	; 32
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 b2 0a 	call	0x1564	; 0x1564 <malloc>
     b74:	5c 01       	movw	r10, r24
	for(uint16_t i = 0; i < (N/2); i++)
     b76:	c0 e0       	ldi	r28, 0x00	; 0
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	6c c0       	rjmp	.+216    	; 0xc54 <init_Window+0x104>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
     b7c:	8e 01       	movw	r16, r28
     b7e:	00 0f       	add	r16, r16
     b80:	11 1f       	adc	r17, r17
     b82:	00 0f       	add	r16, r16
     b84:	11 1f       	adc	r17, r17
     b86:	0a 0d       	add	r16, r10
     b88:	1b 1d       	adc	r17, r11
     b8a:	be 01       	movw	r22, r28
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 9d 08 	call	0x113a	; 0x113a <__floatunsisf>
     b94:	6b 01       	movw	r12, r22
     b96:	7c 01       	movw	r14, r24
     b98:	2b ed       	ldi	r18, 0xDB	; 219
     b9a:	3f e0       	ldi	r19, 0x0F	; 15
     b9c:	49 ec       	ldi	r20, 0xC9	; 201
     b9e:	50 e4       	ldi	r21, 0x40	; 64
     ba0:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e8       	ldi	r20, 0x80	; 128
     baa:	5d e3       	ldi	r21, 0x3D	; 61
     bac:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     bb0:	0e 94 98 08 	call	0x1130	; 0x1130 <cos>
     bb4:	26 e2       	ldi	r18, 0x26	; 38
     bb6:	31 e0       	ldi	r19, 0x01	; 1
     bb8:	4a ef       	ldi	r20, 0xFA	; 250
     bba:	5e e3       	ldi	r21, 0x3E	; 62
     bbc:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	64 e1       	ldi	r22, 0x14	; 20
     bc6:	7e ea       	ldi	r23, 0xAE	; 174
     bc8:	87 eb       	ldi	r24, 0xB7	; 183
     bca:	9e e3       	ldi	r25, 0x3E	; 62
     bcc:	0e 94 2b 08 	call	0x1056	; 0x1056 <__subsf3>
     bd0:	2b 01       	movw	r4, r22
     bd2:	3c 01       	movw	r6, r24
     bd4:	2b ed       	ldi	r18, 0xDB	; 219
     bd6:	3f e0       	ldi	r19, 0x0F	; 15
     bd8:	49 e4       	ldi	r20, 0x49	; 73
     bda:	51 e4       	ldi	r21, 0x41	; 65
     bdc:	c7 01       	movw	r24, r14
     bde:	b6 01       	movw	r22, r12
     be0:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e8       	ldi	r20, 0x80	; 128
     bea:	5d e3       	ldi	r21, 0x3D	; 61
     bec:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     bf0:	0e 94 98 08 	call	0x1130	; 0x1130 <cos>
     bf4:	24 eb       	ldi	r18, 0xB4	; 180
     bf6:	3b ea       	ldi	r19, 0xAB	; 171
     bf8:	40 e1       	ldi	r20, 0x10	; 16
     bfa:	5e e3       	ldi	r21, 0x3E	; 62
     bfc:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	c3 01       	movw	r24, r6
     c06:	b2 01       	movw	r22, r4
     c08:	0e 94 2c 08 	call	0x1058	; 0x1058 <__addsf3>
     c0c:	2b 01       	movw	r4, r22
     c0e:	3c 01       	movw	r6, r24
     c10:	24 ee       	ldi	r18, 0xE4	; 228
     c12:	3b ec       	ldi	r19, 0xCB	; 203
     c14:	46 e9       	ldi	r20, 0x96	; 150
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	c7 01       	movw	r24, r14
     c1a:	b6 01       	movw	r22, r12
     c1c:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e8       	ldi	r20, 0x80	; 128
     c26:	5d e3       	ldi	r21, 0x3D	; 61
     c28:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     c2c:	0e 94 98 08 	call	0x1130	; 0x1130 <cos>
     c30:	29 e7       	ldi	r18, 0x79	; 121
     c32:	3d e5       	ldi	r19, 0x5D	; 93
     c34:	4f e3       	ldi	r20, 0x3F	; 63
     c36:	5c e3       	ldi	r21, 0x3C	; 60
     c38:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     c3c:	9b 01       	movw	r18, r22
     c3e:	ac 01       	movw	r20, r24
     c40:	c3 01       	movw	r24, r6
     c42:	b2 01       	movw	r22, r4
     c44:	0e 94 2b 08 	call	0x1056	; 0x1056 <__subsf3>
     c48:	f8 01       	movw	r30, r16
     c4a:	60 83       	st	Z, r22
     c4c:	71 83       	std	Z+1, r23	; 0x01
     c4e:	82 83       	std	Z+2, r24	; 0x02
     c50:	93 83       	std	Z+3, r25	; 0x03
}

float *init_Window(void)
{
	float *Window = malloc(sizeof(float)*(N/2));																//Allocate memory for the window function
	for(uint16_t i = 0; i < (N/2); i++)
     c52:	21 96       	adiw	r28, 0x01	; 1
     c54:	c8 30       	cpi	r28, 0x08	; 8
     c56:	d1 05       	cpc	r29, r1
     c58:	08 f4       	brcc	.+2      	; 0xc5c <init_Window+0x10c>
     c5a:	90 cf       	rjmp	.-224    	; 0xb7c <init_Window+0x2c>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
	}

	return Window;
     c5c:	c5 01       	movw	r24, r10
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	5f 90       	pop	r5
     c78:	4f 90       	pop	r4
     c7a:	08 95       	ret

00000c7c <DebugPrint_spectrum>:
#include "DSP.h" 
#include "handle.h"


void DebugPrint_spectrum(complexfloat* FFT_Array, uint16_t FBins)										//Calculates vector lengths and prints the floats
{
     c7c:	8f 92       	push	r8
     c7e:	9f 92       	push	r9
     c80:	af 92       	push	r10
     c82:	bf 92       	push	r11
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	6c 01       	movw	r12, r24
     c96:	7b 01       	movw	r14, r22
	float v_lenth;																						//Temp storage for vector magnitude

	for(uint16_t i = 0; i < FBins; i++)
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	10 e0       	ldi	r17, 0x00	; 0
     c9c:	27 c0       	rjmp	.+78     	; 0xcec <DebugPrint_spectrum+0x70>
	{
		v_lenth = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate vector magnitude frequency bin i
     c9e:	e8 01       	movw	r28, r16
     ca0:	cc 0f       	add	r28, r28
     ca2:	dd 1f       	adc	r29, r29
     ca4:	cc 0f       	add	r28, r28
     ca6:	dd 1f       	adc	r29, r29
     ca8:	cc 0f       	add	r28, r28
     caa:	dd 1f       	adc	r29, r29
     cac:	cc 0d       	add	r28, r12
     cae:	dd 1d       	adc	r29, r13
     cb0:	68 81       	ld	r22, Y
     cb2:	79 81       	ldd	r23, Y+1	; 0x01
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	9b 81       	ldd	r25, Y+3	; 0x03
     cb8:	9b 01       	movw	r18, r22
     cba:	ac 01       	movw	r20, r24
     cbc:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     cc0:	4b 01       	movw	r8, r22
     cc2:	5c 01       	movw	r10, r24
     cc4:	6c 81       	ldd	r22, Y+4	; 0x04
     cc6:	7d 81       	ldd	r23, Y+5	; 0x05
     cc8:	8e 81       	ldd	r24, Y+6	; 0x06
     cca:	9f 81       	ldd	r25, Y+7	; 0x07
     ccc:	9b 01       	movw	r18, r22
     cce:	ac 01       	movw	r20, r24
     cd0:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
     cd4:	9b 01       	movw	r18, r22
     cd6:	ac 01       	movw	r20, r24
     cd8:	c5 01       	movw	r24, r10
     cda:	b4 01       	movw	r22, r8
     cdc:	0e 94 2c 08 	call	0x1058	; 0x1058 <__addsf3>
     ce0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <sqrt>
		writeF_UART(v_lenth);																			//Write the float in 8bit sections through the UART --> USB2.0	
     ce4:	0e 94 af 06 	call	0xd5e	; 0xd5e <writeF_UART>

void DebugPrint_spectrum(complexfloat* FFT_Array, uint16_t FBins)										//Calculates vector lengths and prints the floats
{
	float v_lenth;																						//Temp storage for vector magnitude

	for(uint16_t i = 0; i < FBins; i++)
     ce8:	0f 5f       	subi	r16, 0xFF	; 255
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	0e 15       	cp	r16, r14
     cee:	1f 05       	cpc	r17, r15
     cf0:	b0 f2       	brcs	.-84     	; 0xc9e <DebugPrint_spectrum+0x22>
	{
		v_lenth = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate vector magnitude frequency bin i
		writeF_UART(v_lenth);																			//Write the float in 8bit sections through the UART --> USB2.0	
	}
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	bf 90       	pop	r11
     d04:	af 90       	pop	r10
     d06:	9f 90       	pop	r9
     d08:	8f 90       	pop	r8
     d0a:	08 95       	ret

00000d0c <stop_timer>:
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is low
		garbage = USARTE0.DATA;																		//read the data until register is automatically cleared
	}
	
	return data;																					//returns 8bit received data
}
     d0c:	e0 e0       	ldi	r30, 0x00	; 0
     d0e:	fa e0       	ldi	r31, 0x0A	; 10
     d10:	10 82       	st	Z, r1
     d12:	86 81       	ldd	r24, Z+6	; 0x06
     d14:	8c 7f       	andi	r24, 0xFC	; 252
     d16:	86 83       	std	Z+6, r24	; 0x06
     d18:	10 a2       	std	Z+32, r1	; 0x20
     d1a:	11 a2       	std	Z+33, r1	; 0x21
     d1c:	08 95       	ret

00000d1e <start_timer>:
     d1e:	e0 e0       	ldi	r30, 0x00	; 0
     d20:	fa e0       	ldi	r31, 0x0A	; 10
     d22:	10 a2       	std	Z+32, r1	; 0x20
     d24:	11 a2       	std	Z+33, r1	; 0x21
     d26:	86 81       	ldd	r24, Z+6	; 0x06
     d28:	8c 7f       	andi	r24, 0xFC	; 252
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	86 83       	std	Z+6, r24	; 0x06
     d2e:	86 e0       	ldi	r24, 0x06	; 6
     d30:	80 83       	st	Z, r24
     d32:	08 95       	ret

00000d34 <write8_UART>:
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <write8_UART+0xe>
     d3a:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     d3e:	20 72       	andi	r18, 0x20	; 32
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	23 2b       	or	r18, r19
     d44:	d1 f3       	breq	.-12     	; 0xd3a <write8_UART+0x6>
     d46:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <write8_UART+0x24>
     d50:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     d54:	80 72       	andi	r24, 0x20	; 32
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	89 2b       	or	r24, r25
     d5a:	d1 f3       	breq	.-12     	; 0xd50 <write8_UART+0x1c>
     d5c:	08 95       	ret

00000d5e <writeF_UART>:

void writeF_UART(float data)
{
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	00 d0       	rcall	.+0      	; 0xd64 <writeF_UART+0x6>
     d64:	1f 92       	push	r1
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	69 83       	std	Y+1, r22	; 0x01
     d6c:	7a 83       	std	Y+2, r23	; 0x02
     d6e:	8b 83       	std	Y+3, r24	; 0x03
     d70:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t *sendarray = (uint8_t*)(&data);															//converts float to 4 separate bytes in send array
	write8_UART(sendarray[0]);																		//Sends separate bytes (LF)
     d72:	86 2f       	mov	r24, r22
     d74:	0e 94 9a 06 	call	0xd34	; 0xd34 <write8_UART>
	write8_UART(sendarray[1]);
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	0e 94 9a 06 	call	0xd34	; 0xd34 <write8_UART>
	write8_UART(sendarray[2]);
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	0e 94 9a 06 	call	0xd34	; 0xd34 <write8_UART>
	write8_UART(sendarray[3]);
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	0e 94 9a 06 	call	0xd34	; 0xd34 <write8_UART>
}
     d8a:	24 96       	adiw	r28, 0x04	; 4
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <read_ADC>:

void read_ADC(complexfloat *FFT_Array, uint16_t *Lookup_Reverse, uint16_t i)
{
     d96:	cf 92       	push	r12
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	7c 01       	movw	r14, r24
	ADCA.CTRLA = ADC_ENABLE_bm;																		//Enables ADCA
     da8:	a0 e0       	ldi	r26, 0x00	; 0
     daa:	b2 e0       	ldi	r27, 0x02	; 2
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	8c 93       	st	X, r24
	ADCB.CTRLA = ADC_ENABLE_bm;																		//Enables ADCB
     db0:	e0 e4       	ldi	r30, 0x40	; 64
     db2:	f2 e0       	ldi	r31, 0x02	; 2
     db4:	80 83       	st	Z, r24
	
	ADCA.CTRLA |= (0x01 << 2);							 											//Start ADCA conversion CH0
     db6:	8c 91       	ld	r24, X
     db8:	84 60       	ori	r24, 0x04	; 4
     dba:	8c 93       	st	X, r24
	ADCB.CTRLA |= (0x01 << 2);																		//Start ADCB conversion CH0
     dbc:	80 81       	ld	r24, Z
     dbe:	84 60       	ori	r24, 0x04	; 4
     dc0:	80 83       	st	Z, r24
	
	while( (((ADCA.INTFLAGS & (0x01)) != (0xF)) && ((ADCB.INTFLAGS & (0x0F)) != (0x1))))			//Poll ADC IF
     dc2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
     dc6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	c9 f7       	brne	.-14     	; 0xdc2 <read_ADC+0x2c>
	{
		//Wait for conversion
	}
	
	FFT_Array[Lookup_Reverse[i]].re = ((float)ADCA.CH0.RES);										//Save I[i] sample to BR location in FFT_Array
     dd0:	44 0f       	add	r20, r20
     dd2:	55 1f       	adc	r21, r21
     dd4:	eb 01       	movw	r28, r22
     dd6:	c4 0f       	add	r28, r20
     dd8:	d5 1f       	adc	r29, r21
     dda:	08 81       	ld	r16, Y
     ddc:	19 81       	ldd	r17, Y+1	; 0x01
     dde:	00 0f       	add	r16, r16
     de0:	11 1f       	adc	r17, r17
     de2:	00 0f       	add	r16, r16
     de4:	11 1f       	adc	r17, r17
     de6:	00 0f       	add	r16, r16
     de8:	11 1f       	adc	r17, r17
     dea:	0e 0d       	add	r16, r14
     dec:	1f 1d       	adc	r17, r15
     dee:	c1 2c       	mov	r12, r1
     df0:	68 94       	set
     df2:	dd 24       	eor	r13, r13
     df4:	d1 f8       	bld	r13, 1
     df6:	f6 01       	movw	r30, r12
     df8:	64 a1       	ldd	r22, Z+36	; 0x24
     dfa:	75 a1       	ldd	r23, Z+37	; 0x25
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 9d 08 	call	0x113a	; 0x113a <__floatunsisf>
     e04:	f8 01       	movw	r30, r16
     e06:	64 83       	std	Z+4, r22	; 0x04
     e08:	75 83       	std	Z+5, r23	; 0x05
     e0a:	86 83       	std	Z+6, r24	; 0x06
     e0c:	97 83       	std	Z+7, r25	; 0x07
	FFT_Array[Lookup_Reverse[i]].im = ((float)ADCB.CH0.RES);										//Save Q[i] sample to BR location in FFT_Array
     e0e:	09 90       	ld	r0, Y+
     e10:	d8 81       	ld	r29, Y
     e12:	c0 2d       	mov	r28, r0
     e14:	cc 0f       	add	r28, r28
     e16:	dd 1f       	adc	r29, r29
     e18:	cc 0f       	add	r28, r28
     e1a:	dd 1f       	adc	r29, r29
     e1c:	cc 0f       	add	r28, r28
     e1e:	dd 1f       	adc	r29, r29
     e20:	ce 0d       	add	r28, r14
     e22:	df 1d       	adc	r29, r15
     e24:	00 e4       	ldi	r16, 0x40	; 64
     e26:	12 e0       	ldi	r17, 0x02	; 2
     e28:	f8 01       	movw	r30, r16
     e2a:	64 a1       	ldd	r22, Z+36	; 0x24
     e2c:	75 a1       	ldd	r23, Z+37	; 0x25
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 9d 08 	call	0x113a	; 0x113a <__floatunsisf>
     e36:	68 83       	st	Y, r22
     e38:	79 83       	std	Y+1, r23	; 0x01
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	9b 83       	std	Y+3, r25	; 0x03
	
	ADCA.CTRLA &= (0xFE);																			//Disable ADCA
     e3e:	f6 01       	movw	r30, r12
     e40:	80 81       	ld	r24, Z
     e42:	8e 7f       	andi	r24, 0xFE	; 254
     e44:	80 83       	st	Z, r24
	ADCB.CTRLA &= (0xFE);																			//Disable ADCB
     e46:	f8 01       	movw	r30, r16
     e48:	80 81       	ld	r24, Z
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	80 83       	st	Z, r24
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	08 95       	ret

00000e60 <__vector_47>:
uint16_t count = 0;																//keeps track of samples taken



ISR(TCE0_OVF_vect)																//When TC overflows (5kHz)
{
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	0b b6       	in	r0, 0x3b	; 59
     e6c:	0f 92       	push	r0
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
	read_ADC(FFT_Array, Reverse_Lookup, count);									//Gets IQ samples and decimates in time
     e86:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <__data_end>
     e8a:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <__data_end+0x1>
     e8e:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <Reverse_Lookup>
     e92:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <Reverse_Lookup+0x1>
     e96:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <FFT_Array>
     e9a:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <FFT_Array+0x1>
     e9e:	0e 94 cb 06 	call	0xd96	; 0xd96 <read_ADC>
	count++;																	//Add sample count by one
     ea2:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
     ea6:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
     eb0:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0b be       	out	0x3b, r0	; 59
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <main>:



int main(void)
{
	init_CLK();																	//Set F_CPU to 32MHz
     eda:	0e 94 c1 07 	call	0xf82	; 0xf82 <init_CLK>
	init_TIMER();																//Set timer for sampling @ fixed frequency
     ede:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <init_TIMER>
	init_UART();																//Debug UART 115200Baud (PE2: RX, PE3 TX)
     ee2:	0e 94 aa 07 	call	0xf54	; 0xf54 <init_UART>
	init_IO();																	//Setup of I/O pins
     ee6:	0e 94 de 07 	call	0xfbc	; 0xfbc <init_IO>
	init_ADC();																	//Set registers for internal ADC
     eea:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <init_ADC>
	init_DAC();																	//Set registers for internal DAC
     eee:	0e 94 24 08 	call	0x1048	; 0x1048 <init_DAC>
	
	sei();																		//Global interrupt mask
     ef2:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;												//Set low level interrupts
     ef4:	e0 ea       	ldi	r30, 0xA0	; 160
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	82 81       	ldd	r24, Z+2	; 0x02
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	82 83       	std	Z+2, r24	; 0x02
	
	complexfloat *FFT_Array = init_avr_fft();									//Creates data block in heap for FFT in place computation
     efe:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <init_avr_fft>
     f02:	ec 01       	movw	r28, r24
	complexfloat *W = init_avr_Wlookup();										//Creates heap lookup table for twiddle factors
     f04:	0e 94 77 03 	call	0x6ee	; 0x6ee <init_avr_Wlookup>
     f08:	6c 01       	movw	r12, r24
	uint16_t *Reverse_Lookup = init_BRLookup();									//Creates heap lookup table for bit reverse order (decimation order)
     f0a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <init_BRLookup>
     f0e:	7c 01       	movw	r14, r24
	float *Window = init_Window();												//Creates heap lookup table for the Window function
     f10:	0e 94 a8 05 	call	0xb50	; 0xb50 <init_Window>
     f14:	8c 01       	movw	r16, r24
	
	start_timer();																//Starts timer for sampling @ 5kHz										
     f16:	0e 94 8f 06 	call	0xd1e	; 0xd1e <start_timer>
	
	while(1)
	{
		if(count == (N-1))														//When the FFT array is full of samples perform calculations
     f1a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
     f1e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
     f22:	0f 97       	sbiw	r24, 0x0f	; 15
     f24:	d1 f7       	brne	.-12     	; 0xf1a <main+0x40>
		{
			stop_timer();														//Stop sampling and reset TC.CNT
     f26:	0e 94 86 06 	call	0xd0c	; 0xd0c <stop_timer>
			apply_avr_Window(FFT_Array, Window, Reverse_Lookup);				//Apply Blackman-Harris window
     f2a:	a7 01       	movw	r20, r14
     f2c:	b8 01       	movw	r22, r16
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 fe 03 	call	0x7fc	; 0x7fc <apply_avr_Window>
			calc_avr_FFT(FFT_Array, W);											//Calculates Radix2-FFT in pace
     f34:	b6 01       	movw	r22, r12
     f36:	ce 01       	movw	r24, r28
     f38:	0e 94 90 04 	call	0x920	; 0x920 <calc_avr_FFT>
			DebugPrint_spectrum(FFT_Array, N);									//Calculate vector magnitudes and send floats through UART --> USB2.0 in 8bit sections
     f3c:	60 e1       	ldi	r22, 0x10	; 16
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	ce 01       	movw	r24, r28
     f42:	0e 94 3e 06 	call	0xc7c	; 0xc7c <DebugPrint_spectrum>
			count = 0;															//Reset sample count
     f46:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <__data_end>
     f4a:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <__data_end+0x1>
			start_timer();														//Restart timer to collect new samples
     f4e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <start_timer>
     f52:	e3 cf       	rjmp	.-58     	; 0xf1a <main+0x40>

00000f54 <init_UART>:
#include "start.h"
#include "avr/io.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
     f54:	84 e0       	ldi	r24, 0x04	; 4
     f56:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
     f5a:	88 e0       	ldi	r24, 0x08	; 8
     f5c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
     f60:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x0D<<4);										//Set BSCALE to -3 for baud 115200
     f64:	e0 ea       	ldi	r30, 0xA0	; 160
     f66:	fa e0       	ldi	r31, 0x0A	; 10
     f68:	87 81       	ldd	r24, Z+7	; 0x07
     f6a:	80 6d       	ori	r24, 0xD0	; 208
     f6c:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x83);										//Set BSEL to 131 for baud 115200
     f6e:	86 81       	ldd	r24, Z+6	; 0x06
     f70:	83 68       	ori	r24, 0x83	; 131
     f72:	86 83       	std	Z+6, r24	; 0x06
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
     f74:	85 81       	ldd	r24, Z+5	; 0x05
     f76:	83 60       	ori	r24, 0x03	; 3
     f78:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
     f7c:	88 61       	ori	r24, 0x18	; 24
     f7e:	84 83       	std	Z+4, r24	; 0x04
     f80:	08 95       	ret

00000f82 <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
     f82:	e0 e5       	ldi	r30, 0x50	; 80
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
     f8c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
     f90:	81 ff       	sbrs	r24, 1
     f92:	fc cf       	rjmp	.-8      	; 0xf8c <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
     f94:	88 ed       	ldi	r24, 0xD8	; 216
     f96:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
     f98:	e0 e4       	ldi	r30, 0x40	; 64
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
     fa0:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
     fa2:	11 82       	std	Z+1, r1	; 0x01
     fa4:	08 95       	ret

00000fa6 <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
     fa6:	e0 e0       	ldi	r30, 0x00	; 0
     fa8:	fa e0       	ldi	r31, 0x0A	; 10
     faa:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
     fac:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PER = 0x19;													//Set overflow frequency to 5kHz = ((F_CPU/256)/(PER))
     fb2:	89 e1       	ldi	r24, 0x19	; 25
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	86 a3       	std	Z+38, r24	; 0x26
     fb8:	97 a3       	std	Z+39, r25	; 0x27
     fba:	08 95       	ret

00000fbc <init_IO>:
}

void init_IO(void)
{
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
     fbc:	e1 e0       	ldi	r30, 0x01	; 1
     fbe:	f6 e0       	ldi	r31, 0x06	; 6
     fc0:	80 e8       	ldi	r24, 0x80	; 128
     fc2:	80 83       	st	Z, r24
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
     fc4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
     fc8:	80 e1       	ldi	r24, 0x10	; 16
     fca:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	
	PORTA_DIRSET = PIN1_bm;												//Radar /enable pin
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	80 83       	st	Z, r24
	PORTA_OUTCLR = PIN1_bm;												//Enable radar
     fd2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     fd6:	08 95       	ret

00000fd8 <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//Set PA0 as input for I channel
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7be602>
	PORTB_DIRCLR = PIN0_bm;												//Set PB0 as input for Q channel
     fde:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x7be622>
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b2 e0       	ldi	r27, 0x02	; 2
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	14 96       	adiw	r26, 0x04	; 4
     fea:	8c 93       	st	X, r24
     fec:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
     fee:	e0 e4       	ldi	r30, 0x40	; 64
     ff0:	f2 e0       	ldi	r31, 0x02	; 2
     ff2:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
     ff4:	12 96       	adiw	r26, 0x02	; 2
     ff6:	8c 91       	ld	r24, X
     ff8:	12 97       	sbiw	r26, 0x02	; 2
     ffa:	12 96       	adiw	r26, 0x02	; 2
     ffc:	8c 93       	st	X, r24
     ffe:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
    1004:	12 96       	adiw	r26, 0x02	; 2
    1006:	8c 91       	ld	r24, X
    1008:	12 97       	sbiw	r26, 0x02	; 2
    100a:	80 61       	ori	r24, 0x10	; 16
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	8c 93       	st	X, r24
    1010:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	80 61       	ori	r24, 0x10	; 16
    1016:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 single ended input
    1018:	90 96       	adiw	r26, 0x20	; 32
    101a:	8c 91       	ld	r24, X
    101c:	90 97       	sbiw	r26, 0x20	; 32
    101e:	81 60       	ori	r24, 0x01	; 1
    1020:	90 96       	adiw	r26, 0x20	; 32
    1022:	8c 93       	st	X, r24
    1024:	90 97       	sbiw	r26, 0x20	; 32
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 single ended input
    1026:	80 a1       	ldd	r24, Z+32	; 0x20
    1028:	81 60       	ori	r24, 0x01	; 1
    102a:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
    102c:	91 96       	adiw	r26, 0x21	; 33
    102e:	8c 91       	ld	r24, X
    1030:	91 97       	sbiw	r26, 0x21	; 33
    1032:	87 60       	ori	r24, 0x07	; 7
    1034:	91 96       	adiw	r26, 0x21	; 33
    1036:	8c 93       	st	X, r24
    1038:	91 97       	sbiw	r26, 0x21	; 33
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
    103a:	81 a1       	ldd	r24, Z+33	; 0x21
    103c:	87 60       	ori	r24, 0x07	; 7
    103e:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCA CH0 to pin A0 as input for I channel
    1040:	91 96       	adiw	r26, 0x21	; 33
    1042:	1c 92       	st	X, r1
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCB CH0 to pin B0 as input for Q channel
    1044:	11 a2       	std	Z+33, r1	; 0x21
    1046:	08 95       	ret

00001048 <init_DAC>:
}

void init_DAC(void)
{
	DACB.CTRLC = DAC_REFSEL_INT1V_gc;									//set DAC reference to internal 1V
    1048:	e0 e2       	ldi	r30, 0x20	; 32
    104a:	f3 e0       	ldi	r31, 0x03	; 3
    104c:	12 82       	std	Z+2, r1	; 0x02
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;									//set DAC output to channel 0
    104e:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;							//Enable both DAC channels
    1050:	85 e0       	ldi	r24, 0x05	; 5
    1052:	80 83       	st	Z, r24
    1054:	08 95       	ret

00001056 <__subsf3>:
    1056:	50 58       	subi	r21, 0x80	; 128

00001058 <__addsf3>:
    1058:	bb 27       	eor	r27, r27
    105a:	aa 27       	eor	r26, r26
    105c:	0e 94 43 08 	call	0x1086	; 0x1086 <__addsf3x>
    1060:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__fp_round>
    1064:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_pscA>
    1068:	38 f0       	brcs	.+14     	; 0x1078 <__addsf3+0x20>
    106a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__fp_pscB>
    106e:	20 f0       	brcs	.+8      	; 0x1078 <__addsf3+0x20>
    1070:	39 f4       	brne	.+14     	; 0x1080 <__addsf3+0x28>
    1072:	9f 3f       	cpi	r25, 0xFF	; 255
    1074:	19 f4       	brne	.+6      	; 0x107c <__addsf3+0x24>
    1076:	26 f4       	brtc	.+8      	; 0x1080 <__addsf3+0x28>
    1078:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_nan>
    107c:	0e f4       	brtc	.+2      	; 0x1080 <__addsf3+0x28>
    107e:	e0 95       	com	r30
    1080:	e7 fb       	bst	r30, 7
    1082:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__fp_inf>

00001086 <__addsf3x>:
    1086:	e9 2f       	mov	r30, r25
    1088:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_split3>
    108c:	58 f3       	brcs	.-42     	; 0x1064 <__addsf3+0xc>
    108e:	ba 17       	cp	r27, r26
    1090:	62 07       	cpc	r22, r18
    1092:	73 07       	cpc	r23, r19
    1094:	84 07       	cpc	r24, r20
    1096:	95 07       	cpc	r25, r21
    1098:	20 f0       	brcs	.+8      	; 0x10a2 <__addsf3x+0x1c>
    109a:	79 f4       	brne	.+30     	; 0x10ba <__addsf3x+0x34>
    109c:	a6 f5       	brtc	.+104    	; 0x1106 <__addsf3x+0x80>
    109e:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__fp_zero>
    10a2:	0e f4       	brtc	.+2      	; 0x10a6 <__addsf3x+0x20>
    10a4:	e0 95       	com	r30
    10a6:	0b 2e       	mov	r0, r27
    10a8:	ba 2f       	mov	r27, r26
    10aa:	a0 2d       	mov	r26, r0
    10ac:	0b 01       	movw	r0, r22
    10ae:	b9 01       	movw	r22, r18
    10b0:	90 01       	movw	r18, r0
    10b2:	0c 01       	movw	r0, r24
    10b4:	ca 01       	movw	r24, r20
    10b6:	a0 01       	movw	r20, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	ff 27       	eor	r31, r31
    10bc:	59 1b       	sub	r21, r25
    10be:	99 f0       	breq	.+38     	; 0x10e6 <__addsf3x+0x60>
    10c0:	59 3f       	cpi	r21, 0xF9	; 249
    10c2:	50 f4       	brcc	.+20     	; 0x10d8 <__addsf3x+0x52>
    10c4:	50 3e       	cpi	r21, 0xE0	; 224
    10c6:	68 f1       	brcs	.+90     	; 0x1122 <__addsf3x+0x9c>
    10c8:	1a 16       	cp	r1, r26
    10ca:	f0 40       	sbci	r31, 0x00	; 0
    10cc:	a2 2f       	mov	r26, r18
    10ce:	23 2f       	mov	r18, r19
    10d0:	34 2f       	mov	r19, r20
    10d2:	44 27       	eor	r20, r20
    10d4:	58 5f       	subi	r21, 0xF8	; 248
    10d6:	f3 cf       	rjmp	.-26     	; 0x10be <__addsf3x+0x38>
    10d8:	46 95       	lsr	r20
    10da:	37 95       	ror	r19
    10dc:	27 95       	ror	r18
    10de:	a7 95       	ror	r26
    10e0:	f0 40       	sbci	r31, 0x00	; 0
    10e2:	53 95       	inc	r21
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <__addsf3x+0x52>
    10e6:	7e f4       	brtc	.+30     	; 0x1106 <__addsf3x+0x80>
    10e8:	1f 16       	cp	r1, r31
    10ea:	ba 0b       	sbc	r27, r26
    10ec:	62 0b       	sbc	r22, r18
    10ee:	73 0b       	sbc	r23, r19
    10f0:	84 0b       	sbc	r24, r20
    10f2:	ba f0       	brmi	.+46     	; 0x1122 <__addsf3x+0x9c>
    10f4:	91 50       	subi	r25, 0x01	; 1
    10f6:	a1 f0       	breq	.+40     	; 0x1120 <__addsf3x+0x9a>
    10f8:	ff 0f       	add	r31, r31
    10fa:	bb 1f       	adc	r27, r27
    10fc:	66 1f       	adc	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	c2 f7       	brpl	.-16     	; 0x10f4 <__addsf3x+0x6e>
    1104:	0e c0       	rjmp	.+28     	; 0x1122 <__addsf3x+0x9c>
    1106:	ba 0f       	add	r27, r26
    1108:	62 1f       	adc	r22, r18
    110a:	73 1f       	adc	r23, r19
    110c:	84 1f       	adc	r24, r20
    110e:	48 f4       	brcc	.+18     	; 0x1122 <__addsf3x+0x9c>
    1110:	87 95       	ror	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	b7 95       	ror	r27
    1118:	f7 95       	ror	r31
    111a:	9e 3f       	cpi	r25, 0xFE	; 254
    111c:	08 f0       	brcs	.+2      	; 0x1120 <__addsf3x+0x9a>
    111e:	b0 cf       	rjmp	.-160    	; 0x1080 <__addsf3+0x28>
    1120:	93 95       	inc	r25
    1122:	88 0f       	add	r24, r24
    1124:	08 f0       	brcs	.+2      	; 0x1128 <__addsf3x+0xa2>
    1126:	99 27       	eor	r25, r25
    1128:	ee 0f       	add	r30, r30
    112a:	97 95       	ror	r25
    112c:	87 95       	ror	r24
    112e:	08 95       	ret

00001130 <cos>:
    1130:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_rempio2>
    1134:	e3 95       	inc	r30
    1136:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_sinus>

0000113a <__floatunsisf>:
    113a:	e8 94       	clt
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <__floatsisf+0x12>

0000113e <__floatsisf>:
    113e:	97 fb       	bst	r25, 7
    1140:	3e f4       	brtc	.+14     	; 0x1150 <__floatsisf+0x12>
    1142:	90 95       	com	r25
    1144:	80 95       	com	r24
    1146:	70 95       	com	r23
    1148:	61 95       	neg	r22
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	8f 4f       	sbci	r24, 0xFF	; 255
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	99 23       	and	r25, r25
    1152:	a9 f0       	breq	.+42     	; 0x117e <__floatsisf+0x40>
    1154:	f9 2f       	mov	r31, r25
    1156:	96 e9       	ldi	r25, 0x96	; 150
    1158:	bb 27       	eor	r27, r27
    115a:	93 95       	inc	r25
    115c:	f6 95       	lsr	r31
    115e:	87 95       	ror	r24
    1160:	77 95       	ror	r23
    1162:	67 95       	ror	r22
    1164:	b7 95       	ror	r27
    1166:	f1 11       	cpse	r31, r1
    1168:	f8 cf       	rjmp	.-16     	; 0x115a <__floatsisf+0x1c>
    116a:	fa f4       	brpl	.+62     	; 0x11aa <__floatsisf+0x6c>
    116c:	bb 0f       	add	r27, r27
    116e:	11 f4       	brne	.+4      	; 0x1174 <__floatsisf+0x36>
    1170:	60 ff       	sbrs	r22, 0
    1172:	1b c0       	rjmp	.+54     	; 0x11aa <__floatsisf+0x6c>
    1174:	6f 5f       	subi	r22, 0xFF	; 255
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	16 c0       	rjmp	.+44     	; 0x11aa <__floatsisf+0x6c>
    117e:	88 23       	and	r24, r24
    1180:	11 f0       	breq	.+4      	; 0x1186 <__floatsisf+0x48>
    1182:	96 e9       	ldi	r25, 0x96	; 150
    1184:	11 c0       	rjmp	.+34     	; 0x11a8 <__floatsisf+0x6a>
    1186:	77 23       	and	r23, r23
    1188:	21 f0       	breq	.+8      	; 0x1192 <__floatsisf+0x54>
    118a:	9e e8       	ldi	r25, 0x8E	; 142
    118c:	87 2f       	mov	r24, r23
    118e:	76 2f       	mov	r23, r22
    1190:	05 c0       	rjmp	.+10     	; 0x119c <__floatsisf+0x5e>
    1192:	66 23       	and	r22, r22
    1194:	71 f0       	breq	.+28     	; 0x11b2 <__floatsisf+0x74>
    1196:	96 e8       	ldi	r25, 0x86	; 134
    1198:	86 2f       	mov	r24, r22
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	2a f0       	brmi	.+10     	; 0x11aa <__floatsisf+0x6c>
    11a0:	9a 95       	dec	r25
    11a2:	66 0f       	add	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	88 1f       	adc	r24, r24
    11a8:	da f7       	brpl	.-10     	; 0x11a0 <__floatsisf+0x62>
    11aa:	88 0f       	add	r24, r24
    11ac:	96 95       	lsr	r25
    11ae:	87 95       	ror	r24
    11b0:	97 f9       	bld	r25, 7
    11b2:	08 95       	ret

000011b4 <__fp_inf>:
    11b4:	97 f9       	bld	r25, 7
    11b6:	9f 67       	ori	r25, 0x7F	; 127
    11b8:	80 e8       	ldi	r24, 0x80	; 128
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	08 95       	ret

000011c0 <__fp_nan>:
    11c0:	9f ef       	ldi	r25, 0xFF	; 255
    11c2:	80 ec       	ldi	r24, 0xC0	; 192
    11c4:	08 95       	ret

000011c6 <__fp_pscA>:
    11c6:	00 24       	eor	r0, r0
    11c8:	0a 94       	dec	r0
    11ca:	16 16       	cp	r1, r22
    11cc:	17 06       	cpc	r1, r23
    11ce:	18 06       	cpc	r1, r24
    11d0:	09 06       	cpc	r0, r25
    11d2:	08 95       	ret

000011d4 <__fp_pscB>:
    11d4:	00 24       	eor	r0, r0
    11d6:	0a 94       	dec	r0
    11d8:	12 16       	cp	r1, r18
    11da:	13 06       	cpc	r1, r19
    11dc:	14 06       	cpc	r1, r20
    11de:	05 06       	cpc	r0, r21
    11e0:	08 95       	ret
    11e2:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_nan>

000011e6 <__fp_rempio2>:
    11e6:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_splitA>
    11ea:	d8 f3       	brcs	.-10     	; 0x11e2 <__fp_pscB+0xe>
    11ec:	e8 94       	clt
    11ee:	e0 e0       	ldi	r30, 0x00	; 0
    11f0:	bb 27       	eor	r27, r27
    11f2:	9f 57       	subi	r25, 0x7F	; 127
    11f4:	f0 f0       	brcs	.+60     	; 0x1232 <__fp_rempio2+0x4c>
    11f6:	2a ed       	ldi	r18, 0xDA	; 218
    11f8:	3f e0       	ldi	r19, 0x0F	; 15
    11fa:	49 ec       	ldi	r20, 0xC9	; 201
    11fc:	06 c0       	rjmp	.+12     	; 0x120a <__fp_rempio2+0x24>
    11fe:	ee 0f       	add	r30, r30
    1200:	bb 0f       	add	r27, r27
    1202:	66 1f       	adc	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	88 1f       	adc	r24, r24
    1208:	28 f0       	brcs	.+10     	; 0x1214 <__fp_rempio2+0x2e>
    120a:	b2 3a       	cpi	r27, 0xA2	; 162
    120c:	62 07       	cpc	r22, r18
    120e:	73 07       	cpc	r23, r19
    1210:	84 07       	cpc	r24, r20
    1212:	28 f0       	brcs	.+10     	; 0x121e <__fp_rempio2+0x38>
    1214:	b2 5a       	subi	r27, 0xA2	; 162
    1216:	62 0b       	sbc	r22, r18
    1218:	73 0b       	sbc	r23, r19
    121a:	84 0b       	sbc	r24, r20
    121c:	e3 95       	inc	r30
    121e:	9a 95       	dec	r25
    1220:	72 f7       	brpl	.-36     	; 0x11fe <__fp_rempio2+0x18>
    1222:	80 38       	cpi	r24, 0x80	; 128
    1224:	30 f4       	brcc	.+12     	; 0x1232 <__fp_rempio2+0x4c>
    1226:	9a 95       	dec	r25
    1228:	bb 0f       	add	r27, r27
    122a:	66 1f       	adc	r22, r22
    122c:	77 1f       	adc	r23, r23
    122e:	88 1f       	adc	r24, r24
    1230:	d2 f7       	brpl	.-12     	; 0x1226 <__fp_rempio2+0x40>
    1232:	90 48       	sbci	r25, 0x80	; 128
    1234:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_mpack_finite>

00001238 <__fp_round>:
    1238:	09 2e       	mov	r0, r25
    123a:	03 94       	inc	r0
    123c:	00 0c       	add	r0, r0
    123e:	11 f4       	brne	.+4      	; 0x1244 <__fp_round+0xc>
    1240:	88 23       	and	r24, r24
    1242:	52 f0       	brmi	.+20     	; 0x1258 <__fp_round+0x20>
    1244:	bb 0f       	add	r27, r27
    1246:	40 f4       	brcc	.+16     	; 0x1258 <__fp_round+0x20>
    1248:	bf 2b       	or	r27, r31
    124a:	11 f4       	brne	.+4      	; 0x1250 <__fp_round+0x18>
    124c:	60 ff       	sbrs	r22, 0
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <__fp_round+0x20>
    1250:	6f 5f       	subi	r22, 0xFF	; 255
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	08 95       	ret

0000125a <__fp_sinus>:
    125a:	ef 93       	push	r30
    125c:	e0 ff       	sbrs	r30, 0
    125e:	07 c0       	rjmp	.+14     	; 0x126e <__fp_sinus+0x14>
    1260:	a2 ea       	ldi	r26, 0xA2	; 162
    1262:	2a ed       	ldi	r18, 0xDA	; 218
    1264:	3f e0       	ldi	r19, 0x0F	; 15
    1266:	49 ec       	ldi	r20, 0xC9	; 201
    1268:	5f eb       	ldi	r21, 0xBF	; 191
    126a:	0e 94 43 08 	call	0x1086	; 0x1086 <__addsf3x>
    126e:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_round>
    1272:	0f 90       	pop	r0
    1274:	03 94       	inc	r0
    1276:	01 fc       	sbrc	r0, 1
    1278:	90 58       	subi	r25, 0x80	; 128
    127a:	ec ef       	ldi	r30, 0xFC	; 252
    127c:	f1 e0       	ldi	r31, 0x01	; 1
    127e:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__fp_powsodd>

00001282 <__fp_split3>:
    1282:	57 fd       	sbrc	r21, 7
    1284:	90 58       	subi	r25, 0x80	; 128
    1286:	44 0f       	add	r20, r20
    1288:	55 1f       	adc	r21, r21
    128a:	59 f0       	breq	.+22     	; 0x12a2 <__fp_splitA+0x10>
    128c:	5f 3f       	cpi	r21, 0xFF	; 255
    128e:	71 f0       	breq	.+28     	; 0x12ac <__fp_splitA+0x1a>
    1290:	47 95       	ror	r20

00001292 <__fp_splitA>:
    1292:	88 0f       	add	r24, r24
    1294:	97 fb       	bst	r25, 7
    1296:	99 1f       	adc	r25, r25
    1298:	61 f0       	breq	.+24     	; 0x12b2 <__fp_splitA+0x20>
    129a:	9f 3f       	cpi	r25, 0xFF	; 255
    129c:	79 f0       	breq	.+30     	; 0x12bc <__fp_splitA+0x2a>
    129e:	87 95       	ror	r24
    12a0:	08 95       	ret
    12a2:	12 16       	cp	r1, r18
    12a4:	13 06       	cpc	r1, r19
    12a6:	14 06       	cpc	r1, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	f2 cf       	rjmp	.-28     	; 0x1290 <__fp_split3+0xe>
    12ac:	46 95       	lsr	r20
    12ae:	f1 df       	rcall	.-30     	; 0x1292 <__fp_splitA>
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <__fp_splitA+0x30>
    12b2:	16 16       	cp	r1, r22
    12b4:	17 06       	cpc	r1, r23
    12b6:	18 06       	cpc	r1, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	f1 cf       	rjmp	.-30     	; 0x129e <__fp_splitA+0xc>
    12bc:	86 95       	lsr	r24
    12be:	71 05       	cpc	r23, r1
    12c0:	61 05       	cpc	r22, r1
    12c2:	08 94       	sec
    12c4:	08 95       	ret

000012c6 <__fp_zero>:
    12c6:	e8 94       	clt

000012c8 <__fp_szero>:
    12c8:	bb 27       	eor	r27, r27
    12ca:	66 27       	eor	r22, r22
    12cc:	77 27       	eor	r23, r23
    12ce:	cb 01       	movw	r24, r22
    12d0:	97 f9       	bld	r25, 7
    12d2:	08 95       	ret

000012d4 <__gesf2>:
    12d4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fp_cmp>
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <__gesf2+0x8>
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	08 95       	ret

000012de <__mulsf3>:
    12de:	0e 94 82 09 	call	0x1304	; 0x1304 <__mulsf3x>
    12e2:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__fp_round>
    12e6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_pscA>
    12ea:	38 f0       	brcs	.+14     	; 0x12fa <__mulsf3+0x1c>
    12ec:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__fp_pscB>
    12f0:	20 f0       	brcs	.+8      	; 0x12fa <__mulsf3+0x1c>
    12f2:	95 23       	and	r25, r21
    12f4:	11 f0       	breq	.+4      	; 0x12fa <__mulsf3+0x1c>
    12f6:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__fp_inf>
    12fa:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_nan>
    12fe:	11 24       	eor	r1, r1
    1300:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>

00001304 <__mulsf3x>:
    1304:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_split3>
    1308:	70 f3       	brcs	.-36     	; 0x12e6 <__mulsf3+0x8>

0000130a <__mulsf3_pse>:
    130a:	95 9f       	mul	r25, r21
    130c:	c1 f3       	breq	.-16     	; 0x12fe <__mulsf3+0x20>
    130e:	95 0f       	add	r25, r21
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	55 1f       	adc	r21, r21
    1314:	62 9f       	mul	r22, r18
    1316:	f0 01       	movw	r30, r0
    1318:	72 9f       	mul	r23, r18
    131a:	bb 27       	eor	r27, r27
    131c:	f0 0d       	add	r31, r0
    131e:	b1 1d       	adc	r27, r1
    1320:	63 9f       	mul	r22, r19
    1322:	aa 27       	eor	r26, r26
    1324:	f0 0d       	add	r31, r0
    1326:	b1 1d       	adc	r27, r1
    1328:	aa 1f       	adc	r26, r26
    132a:	64 9f       	mul	r22, r20
    132c:	66 27       	eor	r22, r22
    132e:	b0 0d       	add	r27, r0
    1330:	a1 1d       	adc	r26, r1
    1332:	66 1f       	adc	r22, r22
    1334:	82 9f       	mul	r24, r18
    1336:	22 27       	eor	r18, r18
    1338:	b0 0d       	add	r27, r0
    133a:	a1 1d       	adc	r26, r1
    133c:	62 1f       	adc	r22, r18
    133e:	73 9f       	mul	r23, r19
    1340:	b0 0d       	add	r27, r0
    1342:	a1 1d       	adc	r26, r1
    1344:	62 1f       	adc	r22, r18
    1346:	83 9f       	mul	r24, r19
    1348:	a0 0d       	add	r26, r0
    134a:	61 1d       	adc	r22, r1
    134c:	22 1f       	adc	r18, r18
    134e:	74 9f       	mul	r23, r20
    1350:	33 27       	eor	r19, r19
    1352:	a0 0d       	add	r26, r0
    1354:	61 1d       	adc	r22, r1
    1356:	23 1f       	adc	r18, r19
    1358:	84 9f       	mul	r24, r20
    135a:	60 0d       	add	r22, r0
    135c:	21 1d       	adc	r18, r1
    135e:	82 2f       	mov	r24, r18
    1360:	76 2f       	mov	r23, r22
    1362:	6a 2f       	mov	r22, r26
    1364:	11 24       	eor	r1, r1
    1366:	9f 57       	subi	r25, 0x7F	; 127
    1368:	50 40       	sbci	r21, 0x00	; 0
    136a:	9a f0       	brmi	.+38     	; 0x1392 <__mulsf3_pse+0x88>
    136c:	f1 f0       	breq	.+60     	; 0x13aa <__mulsf3_pse+0xa0>
    136e:	88 23       	and	r24, r24
    1370:	4a f0       	brmi	.+18     	; 0x1384 <__mulsf3_pse+0x7a>
    1372:	ee 0f       	add	r30, r30
    1374:	ff 1f       	adc	r31, r31
    1376:	bb 1f       	adc	r27, r27
    1378:	66 1f       	adc	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	91 50       	subi	r25, 0x01	; 1
    1380:	50 40       	sbci	r21, 0x00	; 0
    1382:	a9 f7       	brne	.-22     	; 0x136e <__mulsf3_pse+0x64>
    1384:	9e 3f       	cpi	r25, 0xFE	; 254
    1386:	51 05       	cpc	r21, r1
    1388:	80 f0       	brcs	.+32     	; 0x13aa <__mulsf3_pse+0xa0>
    138a:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__fp_inf>
    138e:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_szero>
    1392:	5f 3f       	cpi	r21, 0xFF	; 255
    1394:	e4 f3       	brlt	.-8      	; 0x138e <__mulsf3_pse+0x84>
    1396:	98 3e       	cpi	r25, 0xE8	; 232
    1398:	d4 f3       	brlt	.-12     	; 0x138e <__mulsf3_pse+0x84>
    139a:	86 95       	lsr	r24
    139c:	77 95       	ror	r23
    139e:	67 95       	ror	r22
    13a0:	b7 95       	ror	r27
    13a2:	f7 95       	ror	r31
    13a4:	e7 95       	ror	r30
    13a6:	9f 5f       	subi	r25, 0xFF	; 255
    13a8:	c1 f7       	brne	.-16     	; 0x139a <__mulsf3_pse+0x90>
    13aa:	fe 2b       	or	r31, r30
    13ac:	88 0f       	add	r24, r24
    13ae:	91 1d       	adc	r25, r1
    13b0:	96 95       	lsr	r25
    13b2:	87 95       	ror	r24
    13b4:	97 f9       	bld	r25, 7
    13b6:	08 95       	ret

000013b8 <sin>:
    13b8:	9f 93       	push	r25
    13ba:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_rempio2>
    13be:	0f 90       	pop	r0
    13c0:	07 fc       	sbrc	r0, 7
    13c2:	ee 5f       	subi	r30, 0xFE	; 254
    13c4:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_sinus>
    13c8:	19 f4       	brne	.+6      	; 0x13d0 <sin+0x18>
    13ca:	16 f4       	brtc	.+4      	; 0x13d0 <sin+0x18>
    13cc:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_nan>
    13d0:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_mpack>

000013d4 <sqrt>:
    13d4:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_splitA>
    13d8:	b8 f3       	brcs	.-18     	; 0x13c8 <sin+0x10>
    13da:	99 23       	and	r25, r25
    13dc:	c9 f3       	breq	.-14     	; 0x13d0 <sin+0x18>
    13de:	b6 f3       	brts	.-20     	; 0x13cc <sin+0x14>
    13e0:	9f 57       	subi	r25, 0x7F	; 127
    13e2:	55 0b       	sbc	r21, r21
    13e4:	87 ff       	sbrs	r24, 7
    13e6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_norm2>
    13ea:	00 24       	eor	r0, r0
    13ec:	a0 e6       	ldi	r26, 0x60	; 96
    13ee:	40 ea       	ldi	r20, 0xA0	; 160
    13f0:	90 01       	movw	r18, r0
    13f2:	80 58       	subi	r24, 0x80	; 128
    13f4:	56 95       	lsr	r21
    13f6:	97 95       	ror	r25
    13f8:	28 f4       	brcc	.+10     	; 0x1404 <sqrt+0x30>
    13fa:	80 5c       	subi	r24, 0xC0	; 192
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	20 f0       	brcs	.+8      	; 0x140c <sqrt+0x38>
    1404:	26 17       	cp	r18, r22
    1406:	37 07       	cpc	r19, r23
    1408:	48 07       	cpc	r20, r24
    140a:	30 f4       	brcc	.+12     	; 0x1418 <sqrt+0x44>
    140c:	62 1b       	sub	r22, r18
    140e:	73 0b       	sbc	r23, r19
    1410:	84 0b       	sbc	r24, r20
    1412:	20 29       	or	r18, r0
    1414:	31 29       	or	r19, r1
    1416:	4a 2b       	or	r20, r26
    1418:	a6 95       	lsr	r26
    141a:	17 94       	ror	r1
    141c:	07 94       	ror	r0
    141e:	20 25       	eor	r18, r0
    1420:	31 25       	eor	r19, r1
    1422:	4a 27       	eor	r20, r26
    1424:	58 f7       	brcc	.-42     	; 0x13fc <sqrt+0x28>
    1426:	66 0f       	add	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	88 1f       	adc	r24, r24
    142c:	20 f0       	brcs	.+8      	; 0x1436 <sqrt+0x62>
    142e:	26 17       	cp	r18, r22
    1430:	37 07       	cpc	r19, r23
    1432:	48 07       	cpc	r20, r24
    1434:	30 f4       	brcc	.+12     	; 0x1442 <sqrt+0x6e>
    1436:	62 0b       	sbc	r22, r18
    1438:	73 0b       	sbc	r23, r19
    143a:	84 0b       	sbc	r24, r20
    143c:	20 0d       	add	r18, r0
    143e:	31 1d       	adc	r19, r1
    1440:	41 1d       	adc	r20, r1
    1442:	a0 95       	com	r26
    1444:	81 f7       	brne	.-32     	; 0x1426 <sqrt+0x52>
    1446:	b9 01       	movw	r22, r18
    1448:	84 2f       	mov	r24, r20
    144a:	91 58       	subi	r25, 0x81	; 129
    144c:	88 0f       	add	r24, r24
    144e:	96 95       	lsr	r25
    1450:	87 95       	ror	r24
    1452:	08 95       	ret

00001454 <__fp_cmp>:
    1454:	99 0f       	add	r25, r25
    1456:	00 08       	sbc	r0, r0
    1458:	55 0f       	add	r21, r21
    145a:	aa 0b       	sbc	r26, r26
    145c:	e0 e8       	ldi	r30, 0x80	; 128
    145e:	fe ef       	ldi	r31, 0xFE	; 254
    1460:	16 16       	cp	r1, r22
    1462:	17 06       	cpc	r1, r23
    1464:	e8 07       	cpc	r30, r24
    1466:	f9 07       	cpc	r31, r25
    1468:	c0 f0       	brcs	.+48     	; 0x149a <__fp_cmp+0x46>
    146a:	12 16       	cp	r1, r18
    146c:	13 06       	cpc	r1, r19
    146e:	e4 07       	cpc	r30, r20
    1470:	f5 07       	cpc	r31, r21
    1472:	98 f0       	brcs	.+38     	; 0x149a <__fp_cmp+0x46>
    1474:	62 1b       	sub	r22, r18
    1476:	73 0b       	sbc	r23, r19
    1478:	84 0b       	sbc	r24, r20
    147a:	95 0b       	sbc	r25, r21
    147c:	39 f4       	brne	.+14     	; 0x148c <__fp_cmp+0x38>
    147e:	0a 26       	eor	r0, r26
    1480:	61 f0       	breq	.+24     	; 0x149a <__fp_cmp+0x46>
    1482:	23 2b       	or	r18, r19
    1484:	24 2b       	or	r18, r20
    1486:	25 2b       	or	r18, r21
    1488:	21 f4       	brne	.+8      	; 0x1492 <__fp_cmp+0x3e>
    148a:	08 95       	ret
    148c:	0a 26       	eor	r0, r26
    148e:	09 f4       	brne	.+2      	; 0x1492 <__fp_cmp+0x3e>
    1490:	a1 40       	sbci	r26, 0x01	; 1
    1492:	a6 95       	lsr	r26
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	81 1d       	adc	r24, r1
    1498:	81 1d       	adc	r24, r1
    149a:	08 95       	ret

0000149c <__fp_mpack>:
    149c:	9f 3f       	cpi	r25, 0xFF	; 255
    149e:	31 f0       	breq	.+12     	; 0x14ac <__fp_mpack_finite+0xc>

000014a0 <__fp_mpack_finite>:
    14a0:	91 50       	subi	r25, 0x01	; 1
    14a2:	20 f4       	brcc	.+8      	; 0x14ac <__fp_mpack_finite+0xc>
    14a4:	87 95       	ror	r24
    14a6:	77 95       	ror	r23
    14a8:	67 95       	ror	r22
    14aa:	b7 95       	ror	r27
    14ac:	88 0f       	add	r24, r24
    14ae:	91 1d       	adc	r25, r1
    14b0:	96 95       	lsr	r25
    14b2:	87 95       	ror	r24
    14b4:	97 f9       	bld	r25, 7
    14b6:	08 95       	ret

000014b8 <__fp_norm2>:
    14b8:	91 50       	subi	r25, 0x01	; 1
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	d2 f7       	brpl	.-12     	; 0x14b8 <__fp_norm2>
    14c4:	08 95       	ret

000014c6 <__fp_powsodd>:
    14c6:	9f 93       	push	r25
    14c8:	8f 93       	push	r24
    14ca:	7f 93       	push	r23
    14cc:	6f 93       	push	r22
    14ce:	ff 93       	push	r31
    14d0:	ef 93       	push	r30
    14d2:	9b 01       	movw	r18, r22
    14d4:	ac 01       	movw	r20, r24
    14d6:	0e 94 6f 09 	call	0x12de	; 0x12de <__mulsf3>
    14da:	ef 91       	pop	r30
    14dc:	ff 91       	pop	r31
    14de:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__fp_powser>
    14e2:	2f 91       	pop	r18
    14e4:	3f 91       	pop	r19
    14e6:	4f 91       	pop	r20
    14e8:	5f 91       	pop	r21
    14ea:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__mulsf3>

000014ee <__fp_powser>:
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	1f 93       	push	r17
    14f4:	0f 93       	push	r16
    14f6:	ff 92       	push	r15
    14f8:	ef 92       	push	r14
    14fa:	df 92       	push	r13
    14fc:	7b 01       	movw	r14, r22
    14fe:	8c 01       	movw	r16, r24
    1500:	68 94       	set
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <__fp_powser+0x22>
    1504:	da 2e       	mov	r13, r26
    1506:	ef 01       	movw	r28, r30
    1508:	0e 94 82 09 	call	0x1304	; 0x1304 <__mulsf3x>
    150c:	fe 01       	movw	r30, r28
    150e:	e8 94       	clt
    1510:	a5 91       	lpm	r26, Z+
    1512:	25 91       	lpm	r18, Z+
    1514:	35 91       	lpm	r19, Z+
    1516:	45 91       	lpm	r20, Z+
    1518:	55 91       	lpm	r21, Z+
    151a:	a6 f3       	brts	.-24     	; 0x1504 <__fp_powser+0x16>
    151c:	ef 01       	movw	r28, r30
    151e:	0e 94 43 08 	call	0x1086	; 0x1086 <__addsf3x>
    1522:	fe 01       	movw	r30, r28
    1524:	97 01       	movw	r18, r14
    1526:	a8 01       	movw	r20, r16
    1528:	da 94       	dec	r13
    152a:	69 f7       	brne	.-38     	; 0x1506 <__fp_powser+0x18>
    152c:	df 90       	pop	r13
    152e:	ef 90       	pop	r14
    1530:	ff 90       	pop	r15
    1532:	0f 91       	pop	r16
    1534:	1f 91       	pop	r17
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <__udivmodhi4>:
    153c:	aa 1b       	sub	r26, r26
    153e:	bb 1b       	sub	r27, r27
    1540:	51 e1       	ldi	r21, 0x11	; 17
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <__udivmodhi4_ep>

00001544 <__udivmodhi4_loop>:
    1544:	aa 1f       	adc	r26, r26
    1546:	bb 1f       	adc	r27, r27
    1548:	a6 17       	cp	r26, r22
    154a:	b7 07       	cpc	r27, r23
    154c:	10 f0       	brcs	.+4      	; 0x1552 <__udivmodhi4_ep>
    154e:	a6 1b       	sub	r26, r22
    1550:	b7 0b       	sbc	r27, r23

00001552 <__udivmodhi4_ep>:
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	5a 95       	dec	r21
    1558:	a9 f7       	brne	.-22     	; 0x1544 <__udivmodhi4_loop>
    155a:	80 95       	com	r24
    155c:	90 95       	com	r25
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	08 95       	ret

00001564 <malloc>:
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	82 30       	cpi	r24, 0x02	; 2
    156e:	91 05       	cpc	r25, r1
    1570:	10 f4       	brcc	.+4      	; 0x1576 <malloc+0x12>
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <__flp>
    157a:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <__flp+0x1>
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	19 f1       	breq	.+70     	; 0x15d0 <malloc+0x6c>
    158a:	40 81       	ld	r20, Z
    158c:	51 81       	ldd	r21, Z+1	; 0x01
    158e:	02 81       	ldd	r16, Z+2	; 0x02
    1590:	13 81       	ldd	r17, Z+3	; 0x03
    1592:	48 17       	cp	r20, r24
    1594:	59 07       	cpc	r21, r25
    1596:	c8 f0       	brcs	.+50     	; 0x15ca <malloc+0x66>
    1598:	84 17       	cp	r24, r20
    159a:	95 07       	cpc	r25, r21
    159c:	69 f4       	brne	.+26     	; 0x15b8 <malloc+0x54>
    159e:	10 97       	sbiw	r26, 0x00	; 0
    15a0:	31 f0       	breq	.+12     	; 0x15ae <malloc+0x4a>
    15a2:	12 96       	adiw	r26, 0x02	; 2
    15a4:	0c 93       	st	X, r16
    15a6:	12 97       	sbiw	r26, 0x02	; 2
    15a8:	13 96       	adiw	r26, 0x03	; 3
    15aa:	1c 93       	st	X, r17
    15ac:	27 c0       	rjmp	.+78     	; 0x15fc <malloc+0x98>
    15ae:	00 93 12 20 	sts	0x2012, r16	; 0x802012 <__flp>
    15b2:	10 93 13 20 	sts	0x2013, r17	; 0x802013 <__flp+0x1>
    15b6:	22 c0       	rjmp	.+68     	; 0x15fc <malloc+0x98>
    15b8:	21 15       	cp	r18, r1
    15ba:	31 05       	cpc	r19, r1
    15bc:	19 f0       	breq	.+6      	; 0x15c4 <malloc+0x60>
    15be:	42 17       	cp	r20, r18
    15c0:	53 07       	cpc	r21, r19
    15c2:	18 f4       	brcc	.+6      	; 0x15ca <malloc+0x66>
    15c4:	9a 01       	movw	r18, r20
    15c6:	bd 01       	movw	r22, r26
    15c8:	ef 01       	movw	r28, r30
    15ca:	df 01       	movw	r26, r30
    15cc:	f8 01       	movw	r30, r16
    15ce:	db cf       	rjmp	.-74     	; 0x1586 <malloc+0x22>
    15d0:	21 15       	cp	r18, r1
    15d2:	31 05       	cpc	r19, r1
    15d4:	f9 f0       	breq	.+62     	; 0x1614 <malloc+0xb0>
    15d6:	28 1b       	sub	r18, r24
    15d8:	39 0b       	sbc	r19, r25
    15da:	24 30       	cpi	r18, 0x04	; 4
    15dc:	31 05       	cpc	r19, r1
    15de:	80 f4       	brcc	.+32     	; 0x1600 <malloc+0x9c>
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	61 15       	cp	r22, r1
    15e6:	71 05       	cpc	r23, r1
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <malloc+0x8e>
    15ea:	fb 01       	movw	r30, r22
    15ec:	82 83       	std	Z+2, r24	; 0x02
    15ee:	93 83       	std	Z+3, r25	; 0x03
    15f0:	04 c0       	rjmp	.+8      	; 0x15fa <malloc+0x96>
    15f2:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__flp>
    15f6:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <__flp+0x1>
    15fa:	fe 01       	movw	r30, r28
    15fc:	32 96       	adiw	r30, 0x02	; 2
    15fe:	44 c0       	rjmp	.+136    	; 0x1688 <malloc+0x124>
    1600:	fe 01       	movw	r30, r28
    1602:	e2 0f       	add	r30, r18
    1604:	f3 1f       	adc	r31, r19
    1606:	81 93       	st	Z+, r24
    1608:	91 93       	st	Z+, r25
    160a:	22 50       	subi	r18, 0x02	; 2
    160c:	31 09       	sbc	r19, r1
    160e:	28 83       	st	Y, r18
    1610:	39 83       	std	Y+1, r19	; 0x01
    1612:	3a c0       	rjmp	.+116    	; 0x1688 <malloc+0x124>
    1614:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    1618:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    161c:	23 2b       	or	r18, r19
    161e:	41 f4       	brne	.+16     	; 0x1630 <malloc+0xcc>
    1620:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1624:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1628:	20 93 10 20 	sts	0x2010, r18	; 0x802010 <__brkval>
    162c:	30 93 11 20 	sts	0x2011, r19	; 0x802011 <__brkval+0x1>
    1630:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    1634:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    1638:	21 15       	cp	r18, r1
    163a:	31 05       	cpc	r19, r1
    163c:	41 f4       	brne	.+16     	; 0x164e <malloc+0xea>
    163e:	2d b7       	in	r18, 0x3d	; 61
    1640:	3e b7       	in	r19, 0x3e	; 62
    1642:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1646:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    164a:	24 1b       	sub	r18, r20
    164c:	35 0b       	sbc	r19, r21
    164e:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <__brkval>
    1652:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <__brkval+0x1>
    1656:	e2 17       	cp	r30, r18
    1658:	f3 07       	cpc	r31, r19
    165a:	a0 f4       	brcc	.+40     	; 0x1684 <malloc+0x120>
    165c:	2e 1b       	sub	r18, r30
    165e:	3f 0b       	sbc	r19, r31
    1660:	28 17       	cp	r18, r24
    1662:	39 07       	cpc	r19, r25
    1664:	78 f0       	brcs	.+30     	; 0x1684 <malloc+0x120>
    1666:	ac 01       	movw	r20, r24
    1668:	4e 5f       	subi	r20, 0xFE	; 254
    166a:	5f 4f       	sbci	r21, 0xFF	; 255
    166c:	24 17       	cp	r18, r20
    166e:	35 07       	cpc	r19, r21
    1670:	48 f0       	brcs	.+18     	; 0x1684 <malloc+0x120>
    1672:	4e 0f       	add	r20, r30
    1674:	5f 1f       	adc	r21, r31
    1676:	40 93 10 20 	sts	0x2010, r20	; 0x802010 <__brkval>
    167a:	50 93 11 20 	sts	0x2011, r21	; 0x802011 <__brkval+0x1>
    167e:	81 93       	st	Z+, r24
    1680:	91 93       	st	Z+, r25
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <malloc+0x124>
    1684:	e0 e0       	ldi	r30, 0x00	; 0
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	cf 01       	movw	r24, r30
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	08 95       	ret

00001694 <free>:
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	09 f4       	brne	.+2      	; 0x169e <free+0xa>
    169c:	81 c0       	rjmp	.+258    	; 0x17a0 <free+0x10c>
    169e:	fc 01       	movw	r30, r24
    16a0:	32 97       	sbiw	r30, 0x02	; 2
    16a2:	12 82       	std	Z+2, r1	; 0x02
    16a4:	13 82       	std	Z+3, r1	; 0x03
    16a6:	a0 91 12 20 	lds	r26, 0x2012	; 0x802012 <__flp>
    16aa:	b0 91 13 20 	lds	r27, 0x2013	; 0x802013 <__flp+0x1>
    16ae:	10 97       	sbiw	r26, 0x00	; 0
    16b0:	81 f4       	brne	.+32     	; 0x16d2 <free+0x3e>
    16b2:	20 81       	ld	r18, Z
    16b4:	31 81       	ldd	r19, Z+1	; 0x01
    16b6:	82 0f       	add	r24, r18
    16b8:	93 1f       	adc	r25, r19
    16ba:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    16be:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    16c2:	28 17       	cp	r18, r24
    16c4:	39 07       	cpc	r19, r25
    16c6:	51 f5       	brne	.+84     	; 0x171c <free+0x88>
    16c8:	e0 93 10 20 	sts	0x2010, r30	; 0x802010 <__brkval>
    16cc:	f0 93 11 20 	sts	0x2011, r31	; 0x802011 <__brkval+0x1>
    16d0:	67 c0       	rjmp	.+206    	; 0x17a0 <free+0x10c>
    16d2:	ed 01       	movw	r28, r26
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	ce 17       	cp	r28, r30
    16da:	df 07       	cpc	r29, r31
    16dc:	40 f4       	brcc	.+16     	; 0x16ee <free+0x5a>
    16de:	4a 81       	ldd	r20, Y+2	; 0x02
    16e0:	5b 81       	ldd	r21, Y+3	; 0x03
    16e2:	9e 01       	movw	r18, r28
    16e4:	41 15       	cp	r20, r1
    16e6:	51 05       	cpc	r21, r1
    16e8:	f1 f0       	breq	.+60     	; 0x1726 <free+0x92>
    16ea:	ea 01       	movw	r28, r20
    16ec:	f5 cf       	rjmp	.-22     	; 0x16d8 <free+0x44>
    16ee:	c2 83       	std	Z+2, r28	; 0x02
    16f0:	d3 83       	std	Z+3, r29	; 0x03
    16f2:	40 81       	ld	r20, Z
    16f4:	51 81       	ldd	r21, Z+1	; 0x01
    16f6:	84 0f       	add	r24, r20
    16f8:	95 1f       	adc	r25, r21
    16fa:	c8 17       	cp	r28, r24
    16fc:	d9 07       	cpc	r29, r25
    16fe:	59 f4       	brne	.+22     	; 0x1716 <free+0x82>
    1700:	88 81       	ld	r24, Y
    1702:	99 81       	ldd	r25, Y+1	; 0x01
    1704:	84 0f       	add	r24, r20
    1706:	95 1f       	adc	r25, r21
    1708:	02 96       	adiw	r24, 0x02	; 2
    170a:	80 83       	st	Z, r24
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	82 83       	std	Z+2, r24	; 0x02
    1714:	93 83       	std	Z+3, r25	; 0x03
    1716:	21 15       	cp	r18, r1
    1718:	31 05       	cpc	r19, r1
    171a:	29 f4       	brne	.+10     	; 0x1726 <free+0x92>
    171c:	e0 93 12 20 	sts	0x2012, r30	; 0x802012 <__flp>
    1720:	f0 93 13 20 	sts	0x2013, r31	; 0x802013 <__flp+0x1>
    1724:	3d c0       	rjmp	.+122    	; 0x17a0 <free+0x10c>
    1726:	e9 01       	movw	r28, r18
    1728:	ea 83       	std	Y+2, r30	; 0x02
    172a:	fb 83       	std	Y+3, r31	; 0x03
    172c:	49 91       	ld	r20, Y+
    172e:	59 91       	ld	r21, Y+
    1730:	c4 0f       	add	r28, r20
    1732:	d5 1f       	adc	r29, r21
    1734:	ec 17       	cp	r30, r28
    1736:	fd 07       	cpc	r31, r29
    1738:	61 f4       	brne	.+24     	; 0x1752 <free+0xbe>
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	84 0f       	add	r24, r20
    1740:	95 1f       	adc	r25, r21
    1742:	02 96       	adiw	r24, 0x02	; 2
    1744:	e9 01       	movw	r28, r18
    1746:	88 83       	st	Y, r24
    1748:	99 83       	std	Y+1, r25	; 0x01
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	8a 83       	std	Y+2, r24	; 0x02
    1750:	9b 83       	std	Y+3, r25	; 0x03
    1752:	e0 e0       	ldi	r30, 0x00	; 0
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	12 96       	adiw	r26, 0x02	; 2
    1758:	8d 91       	ld	r24, X+
    175a:	9c 91       	ld	r25, X
    175c:	13 97       	sbiw	r26, 0x03	; 3
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	19 f0       	breq	.+6      	; 0x1768 <free+0xd4>
    1762:	fd 01       	movw	r30, r26
    1764:	dc 01       	movw	r26, r24
    1766:	f7 cf       	rjmp	.-18     	; 0x1756 <free+0xc2>
    1768:	8d 91       	ld	r24, X+
    176a:	9c 91       	ld	r25, X
    176c:	11 97       	sbiw	r26, 0x01	; 1
    176e:	9d 01       	movw	r18, r26
    1770:	2e 5f       	subi	r18, 0xFE	; 254
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	82 0f       	add	r24, r18
    1776:	93 1f       	adc	r25, r19
    1778:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    177c:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    1780:	28 17       	cp	r18, r24
    1782:	39 07       	cpc	r19, r25
    1784:	69 f4       	brne	.+26     	; 0x17a0 <free+0x10c>
    1786:	30 97       	sbiw	r30, 0x00	; 0
    1788:	29 f4       	brne	.+10     	; 0x1794 <free+0x100>
    178a:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <__flp>
    178e:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <__flp+0x1>
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <free+0x104>
    1794:	12 82       	std	Z+2, r1	; 0x02
    1796:	13 82       	std	Z+3, r1	; 0x03
    1798:	a0 93 10 20 	sts	0x2010, r26	; 0x802010 <__brkval>
    179c:	b0 93 11 20 	sts	0x2011, r27	; 0x802011 <__brkval+0x1>
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <_exit>:
    17a6:	f8 94       	cli

000017a8 <__stop_program>:
    17a8:	ff cf       	rjmp	.-2      	; 0x17a8 <__stop_program>
