
Radar_ATXM256A3U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00001aee  00001b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002803  0080200e  0080200e  00001b90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006173  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039a6  00000000  00000000  00007f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b0  00000000  00000000  0000b8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000690  00000000  00000000  0000ca5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003372  00000000  00000000  0000d0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001680  00000000  00000000  0001045e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00011ade  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__ctors_end>
       4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      10:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      14:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      18:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      1c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      20:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      24:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      28:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      30:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      34:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      38:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      3c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      44:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      4c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      50:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      58:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      5c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      60:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      68:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      6c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      70:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      7c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      80:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      84:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      90:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      94:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      9c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      bc:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_47>
      c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      fc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     100:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     104:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     108:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     10c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     110:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     114:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     118:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     11c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     120:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     124:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     128:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     12c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     130:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     134:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     138:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     13c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     140:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     144:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     148:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     14c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     150:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     154:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     158:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     15c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     160:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     164:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     168:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     16c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     170:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     174:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     178:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     17c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     180:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     184:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     188:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     18c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     190:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     194:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     198:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     19c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1bc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <init_Window+0x2e>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df e5       	ldi	r29, 0x5F	; 95
     224:	de bf       	out	0x3e, r29	; 62
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0c bf       	out	0x3c, r16	; 60

0000022a <__do_copy_data>:
     22a:	10 e2       	ldi	r17, 0x20	; 32
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	ee ee       	ldi	r30, 0xEE	; 238
     232:	fa e1       	ldi	r31, 0x1A	; 26
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0b bf       	out	0x3b, r16	; 59
     238:	02 c0       	rjmp	.+4      	; 0x23e <__do_copy_data+0x14>
     23a:	07 90       	elpm	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	ae 30       	cpi	r26, 0x0E	; 14
     240:	b1 07       	cpc	r27, r17
     242:	d9 f7       	brne	.-10     	; 0x23a <__do_copy_data+0x10>

00000244 <__do_clear_bss>:
     244:	28 e4       	ldi	r18, 0x48	; 72
     246:	ae e0       	ldi	r26, 0x0E	; 14
     248:	b0 e2       	ldi	r27, 0x20	; 32
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	a1 31       	cpi	r26, 0x11	; 17
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>
     254:	0e 94 c1 08 	call	0x1182	; 0x1182 <main>
     258:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <_exit>

0000025c <__bad_interrupt>:
     25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000260 <avr_log2>:
#include "avr_complex.h"



uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
     260:	ac 01       	movw	r20, r24
	uint16_t i = 0;
	uint16_t res = 1;
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	30 e0       	ldi	r19, 0x00	; 0



uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
	uint16_t i = 0;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t res = 1;
	
	while(res < input)
     26a:	03 c0       	rjmp	.+6      	; 0x272 <avr_log2+0x12>
	{
		res *= 2;
     26c:	22 0f       	add	r18, r18
     26e:	33 1f       	adc	r19, r19
		i++;
     270:	01 96       	adiw	r24, 0x01	; 1
uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
	uint16_t i = 0;
	uint16_t res = 1;
	
	while(res < input)
     272:	24 17       	cp	r18, r20
     274:	35 07       	cpc	r19, r21
     276:	d0 f3       	brcs	.-12     	; 0x26c <avr_log2+0xc>
		res *= 2;
		i++;
	}
	
	return i;															//return log2
}
     278:	08 95       	ret

0000027a <cf_multiply>:



complexfloat cf_multiply(complexfloat A, complexfloat B)
{
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	a8 97       	sbiw	r28, 0x28	; 40
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	29 8b       	std	Y+17, r18	; 0x11
     2a6:	3a 8b       	std	Y+18, r19	; 0x12
     2a8:	4b 8b       	std	Y+19, r20	; 0x13
     2aa:	5c 8b       	std	Y+20, r21	; 0x14
     2ac:	6d 8b       	std	Y+21, r22	; 0x15
     2ae:	7e 8b       	std	Y+22, r23	; 0x16
     2b0:	8f 8b       	std	Y+23, r24	; 0x17
     2b2:	98 8f       	std	Y+24, r25	; 0x18
     2b4:	a9 8e       	std	Y+25, r10	; 0x19
     2b6:	ba 8e       	std	Y+26, r11	; 0x1a
     2b8:	cb 8e       	std	Y+27, r12	; 0x1b
     2ba:	dc 8e       	std	Y+28, r13	; 0x1c
     2bc:	ed 8e       	std	Y+29, r14	; 0x1d
     2be:	fe 8e       	std	Y+30, r15	; 0x1e
     2c0:	0f 8f       	std	Y+31, r16	; 0x1f
     2c2:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;                                                     //Creates a complex struct to return

    C.im = (A.im * B.re) + (A.re * B.im);                               //Calculate complex part
     2c4:	c9 88       	ldd	r12, Y+17	; 0x11
     2c6:	da 88       	ldd	r13, Y+18	; 0x12
     2c8:	eb 88       	ldd	r14, Y+19	; 0x13
     2ca:	fc 88       	ldd	r15, Y+20	; 0x14
     2cc:	4d 8c       	ldd	r4, Y+29	; 0x1d
     2ce:	5e 8c       	ldd	r5, Y+30	; 0x1e
     2d0:	6f 8c       	ldd	r6, Y+31	; 0x1f
     2d2:	78 a0       	ldd	r7, Y+32	; 0x20
     2d4:	a3 01       	movw	r20, r6
     2d6:	92 01       	movw	r18, r4
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     2e0:	6d a3       	std	Y+37, r22	; 0x25
     2e2:	7e a3       	std	Y+38, r23	; 0x26
     2e4:	8f a3       	std	Y+39, r24	; 0x27
     2e6:	98 a7       	std	Y+40, r25	; 0x28
     2e8:	8d 89       	ldd	r24, Y+21	; 0x15
     2ea:	9e 89       	ldd	r25, Y+22	; 0x16
     2ec:	af 89       	ldd	r26, Y+23	; 0x17
     2ee:	b8 8d       	ldd	r27, Y+24	; 0x18
     2f0:	89 a3       	std	Y+33, r24	; 0x21
     2f2:	9a a3       	std	Y+34, r25	; 0x22
     2f4:	ab a3       	std	Y+35, r26	; 0x23
     2f6:	bc a3       	std	Y+36, r27	; 0x24
     2f8:	89 8c       	ldd	r8, Y+25	; 0x19
     2fa:	9a 8c       	ldd	r9, Y+26	; 0x1a
     2fc:	ab 8c       	ldd	r10, Y+27	; 0x1b
     2fe:	bc 8c       	ldd	r11, Y+28	; 0x1c
     300:	a5 01       	movw	r20, r10
     302:	94 01       	movw	r18, r8
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     30c:	9b 01       	movw	r18, r22
     30e:	ac 01       	movw	r20, r24
     310:	6d a1       	ldd	r22, Y+37	; 0x25
     312:	7e a1       	ldd	r23, Y+38	; 0x26
     314:	8f a1       	ldd	r24, Y+39	; 0x27
     316:	98 a5       	ldd	r25, Y+40	; 0x28
     318:	0e 94 bb 09 	call	0x1376	; 0x1376 <__addsf3>
     31c:	69 87       	std	Y+9, r22	; 0x09
     31e:	7a 87       	std	Y+10, r23	; 0x0a
     320:	8b 87       	std	Y+11, r24	; 0x0b
     322:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = (-1*(A.im * B.im))+(A.re * B.re);                            //Calculate real part
     324:	29 a1       	ldd	r18, Y+33	; 0x21
     326:	3a a1       	ldd	r19, Y+34	; 0x22
     328:	4b a1       	ldd	r20, Y+35	; 0x23
     32a:	5c a1       	ldd	r21, Y+36	; 0x24
     32c:	c3 01       	movw	r24, r6
     32e:	b2 01       	movw	r22, r4
     330:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	a5 01       	movw	r20, r10
     33a:	94 01       	movw	r18, r8
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	c3 01       	movw	r24, r6
     34a:	b2 01       	movw	r22, r4
     34c:	0e 94 ba 09 	call	0x1374	; 0x1374 <__subsf3>
     350:	6d 87       	std	Y+13, r22	; 0x0d
     352:	7e 87       	std	Y+14, r23	; 0x0e
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Returns complex struct
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	fe 01       	movw	r30, r28
     35c:	39 96       	adiw	r30, 0x09	; 9
     35e:	de 01       	movw	r26, r28
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	01 90       	ld	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	8a 95       	dec	r24
     368:	e1 f7       	brne	.-8      	; 0x362 <cf_multiply+0xe8>
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3a 81       	ldd	r19, Y+2	; 0x02
     36e:	4b 81       	ldd	r20, Y+3	; 0x03
     370:	5c 81       	ldd	r21, Y+4	; 0x04
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
}
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	a8 96       	adiw	r28, 0x28	; 40
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	08 95       	ret

000003a2 <cf_multiply_rf>:



complexfloat cf_multiply_rf(complexfloat A, float B)
{
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	68 97       	sbiw	r28, 0x18	; 24
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	29 8b       	std	Y+17, r18	; 0x11
     3be:	3a 8b       	std	Y+18, r19	; 0x12
     3c0:	4b 8b       	std	Y+19, r20	; 0x13
     3c2:	5c 8b       	std	Y+20, r21	; 0x14
     3c4:	6d 8b       	std	Y+21, r22	; 0x15
     3c6:	7e 8b       	std	Y+22, r23	; 0x16
     3c8:	8f 8b       	std	Y+23, r24	; 0x17
     3ca:	98 8f       	std	Y+24, r25	; 0x18
     3cc:	67 01       	movw	r12, r14
     3ce:	78 01       	movw	r14, r16
    complexfloat C;                                                     //Creates a complex struct to return

    C.im = A.im * B;                                                    //Calculates complex part
     3d0:	69 89       	ldd	r22, Y+17	; 0x11
     3d2:	7a 89       	ldd	r23, Y+18	; 0x12
     3d4:	8b 89       	ldd	r24, Y+19	; 0x13
     3d6:	9c 89       	ldd	r25, Y+20	; 0x14
     3d8:	a7 01       	movw	r20, r14
     3da:	96 01       	movw	r18, r12
     3dc:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     3e0:	69 87       	std	Y+9, r22	; 0x09
     3e2:	7a 87       	std	Y+10, r23	; 0x0a
     3e4:	8b 87       	std	Y+11, r24	; 0x0b
     3e6:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re * B;                                                    //Calculates real part
     3e8:	2d 89       	ldd	r18, Y+21	; 0x15
     3ea:	3e 89       	ldd	r19, Y+22	; 0x16
     3ec:	4f 89       	ldd	r20, Y+23	; 0x17
     3ee:	58 8d       	ldd	r21, Y+24	; 0x18
     3f0:	c7 01       	movw	r24, r14
     3f2:	b6 01       	movw	r22, r12
     3f4:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     3f8:	6d 87       	std	Y+13, r22	; 0x0d
     3fa:	7e 87       	std	Y+14, r23	; 0x0e
     3fc:	8f 87       	std	Y+15, r24	; 0x0f
     3fe:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Returns complex struct
     400:	88 e0       	ldi	r24, 0x08	; 8
     402:	fe 01       	movw	r30, r28
     404:	39 96       	adiw	r30, 0x09	; 9
     406:	de 01       	movw	r26, r28
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	01 90       	ld	r0, Z+
     40c:	0d 92       	st	X+, r0
     40e:	8a 95       	dec	r24
     410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	29 81       	ldd	r18, Y+1	; 0x01
     414:	3a 81       	ldd	r19, Y+2	; 0x02
     416:	4b 81       	ldd	r20, Y+3	; 0x03
     418:	5c 81       	ldd	r21, Y+4	; 0x04
     41a:	6d 81       	ldd	r22, Y+5	; 0x05
     41c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     41e:	8f 81       	ldd	r24, Y+7	; 0x07
     420:	98 85       	ldd	r25, Y+8	; 0x08
     422:	68 96       	adiw	r28, 0x18	; 24
     424:	cd bf       	out	0x3d, r28	; 61
     426:	de bf       	out	0x3e, r29	; 62
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <cf_exp>:



complexfloat cf_exp(float phi)
{
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	60 97       	sbiw	r28, 0x10	; 16
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	de bf       	out	0x3e, r29	; 62
     450:	6b 01       	movw	r12, r22
     452:	7c 01       	movw	r14, r24
    complexfloat C;                                                     //Creates a complex struct to return

    if(phi > 0)                                                         //positive exponent return cos(phi) + Isin(phi)
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	a9 01       	movw	r20, r18
     45a:	0e 94 94 0b 	call	0x1728	; 0x1728 <__gesf2>
     45e:	18 16       	cp	r1, r24
     460:	8c f4       	brge	.+34     	; 0x484 <cf_exp+0x4a>
    {
        C.re = cosf(phi);
     462:	c7 01       	movw	r24, r14
     464:	b6 01       	movw	r22, r12
     466:	0e 94 2c 0a 	call	0x1458	; 0x1458 <cos>
     46a:	6d 87       	std	Y+13, r22	; 0x0d
     46c:	7e 87       	std	Y+14, r23	; 0x0e
     46e:	8f 87       	std	Y+15, r24	; 0x0f
     470:	98 8b       	std	Y+16, r25	; 0x10
        C.im = sinf(phi);
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 06 0c 	call	0x180c	; 0x180c <sin>
     47a:	69 87       	std	Y+9, r22	; 0x09
     47c:	7a 87       	std	Y+10, r23	; 0x0a
     47e:	8b 87       	std	Y+11, r24	; 0x0b
     480:	9c 87       	std	Y+12, r25	; 0x0c
     482:	10 c0       	rjmp	.+32     	; 0x4a4 <cf_exp+0x6a>
    }

    else                                                                //negative exponent return cos(phi) - Isin(phi)
    {
        C.re = cosf(phi);
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 2c 0a 	call	0x1458	; 0x1458 <cos>
     48c:	6d 87       	std	Y+13, r22	; 0x0d
     48e:	7e 87       	std	Y+14, r23	; 0x0e
     490:	8f 87       	std	Y+15, r24	; 0x0f
     492:	98 8b       	std	Y+16, r25	; 0x10
        C.im = (sinf(phi));
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	0e 94 06 0c 	call	0x180c	; 0x180c <sin>
     49c:	69 87       	std	Y+9, r22	; 0x09
     49e:	7a 87       	std	Y+10, r23	; 0x0a
     4a0:	8b 87       	std	Y+11, r24	; 0x0b
     4a2:	9c 87       	std	Y+12, r25	; 0x0c
    }

    return C;                                                           //return complex exponent
     4a4:	88 e0       	ldi	r24, 0x08	; 8
     4a6:	fe 01       	movw	r30, r28
     4a8:	39 96       	adiw	r30, 0x09	; 9
     4aa:	de 01       	movw	r26, r28
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	01 90       	ld	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	8a 95       	dec	r24
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <cf_exp+0x74>
     4b6:	29 81       	ldd	r18, Y+1	; 0x01
     4b8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ba:	4b 81       	ldd	r20, Y+3	; 0x03
     4bc:	5c 81       	ldd	r21, Y+4	; 0x04
     4be:	6d 81       	ldd	r22, Y+5	; 0x05
     4c0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     4c2:	8f 81       	ldd	r24, Y+7	; 0x07
     4c4:	98 85       	ldd	r25, Y+8	; 0x08
     4c6:	60 96       	adiw	r28, 0x10	; 16
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	08 95       	ret

000004da <cf_plus>:



complexfloat cf_plus(complexfloat A, complexfloat B)
{
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	a0 97       	sbiw	r28, 0x20	; 32
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	29 8b       	std	Y+17, r18	; 0x11
     4fa:	3a 8b       	std	Y+18, r19	; 0x12
     4fc:	4b 8b       	std	Y+19, r20	; 0x13
     4fe:	5c 8b       	std	Y+20, r21	; 0x14
     500:	6d 8b       	std	Y+21, r22	; 0x15
     502:	7e 8b       	std	Y+22, r23	; 0x16
     504:	8f 8b       	std	Y+23, r24	; 0x17
     506:	98 8f       	std	Y+24, r25	; 0x18
     508:	a9 8e       	std	Y+25, r10	; 0x19
     50a:	ba 8e       	std	Y+26, r11	; 0x1a
     50c:	cb 8e       	std	Y+27, r12	; 0x1b
     50e:	dc 8e       	std	Y+28, r13	; 0x1c
     510:	ed 8e       	std	Y+29, r14	; 0x1d
     512:	fe 8e       	std	Y+30, r15	; 0x1e
     514:	0f 8f       	std	Y+31, r16	; 0x1f
     516:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;

    C.im = A.im + B.im;                                                 //Add complex components
     518:	69 89       	ldd	r22, Y+17	; 0x11
     51a:	7a 89       	ldd	r23, Y+18	; 0x12
     51c:	8b 89       	ldd	r24, Y+19	; 0x13
     51e:	9c 89       	ldd	r25, Y+20	; 0x14
     520:	29 8d       	ldd	r18, Y+25	; 0x19
     522:	3a 8d       	ldd	r19, Y+26	; 0x1a
     524:	4b 8d       	ldd	r20, Y+27	; 0x1b
     526:	5c 8d       	ldd	r21, Y+28	; 0x1c
     528:	0e 94 bb 09 	call	0x1376	; 0x1376 <__addsf3>
     52c:	69 87       	std	Y+9, r22	; 0x09
     52e:	7a 87       	std	Y+10, r23	; 0x0a
     530:	8b 87       	std	Y+11, r24	; 0x0b
     532:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re + B.re;                                                 //Add real components
     534:	6d 89       	ldd	r22, Y+21	; 0x15
     536:	7e 89       	ldd	r23, Y+22	; 0x16
     538:	8f 89       	ldd	r24, Y+23	; 0x17
     53a:	98 8d       	ldd	r25, Y+24	; 0x18
     53c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     53e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     540:	4f 8d       	ldd	r20, Y+31	; 0x1f
     542:	58 a1       	ldd	r21, Y+32	; 0x20
     544:	0e 94 bb 09 	call	0x1376	; 0x1376 <__addsf3>
     548:	6d 87       	std	Y+13, r22	; 0x0d
     54a:	7e 87       	std	Y+14, r23	; 0x0e
     54c:	8f 87       	std	Y+15, r24	; 0x0f
     54e:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Return complex struct
     550:	88 e0       	ldi	r24, 0x08	; 8
     552:	fe 01       	movw	r30, r28
     554:	39 96       	adiw	r30, 0x09	; 9
     556:	de 01       	movw	r26, r28
     558:	11 96       	adiw	r26, 0x01	; 1
     55a:	01 90       	ld	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	8a 95       	dec	r24
     560:	e1 f7       	brne	.-8      	; 0x55a <cf_plus+0x80>
     562:	29 81       	ldd	r18, Y+1	; 0x01
     564:	3a 81       	ldd	r19, Y+2	; 0x02
     566:	4b 81       	ldd	r20, Y+3	; 0x03
     568:	5c 81       	ldd	r21, Y+4	; 0x04
     56a:	6d 81       	ldd	r22, Y+5	; 0x05
     56c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	a0 96       	adiw	r28, 0x20	; 32
     574:	cd bf       	out	0x3d, r28	; 61
     576:	de bf       	out	0x3e, r29	; 62
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	bf 90       	pop	r11
     58a:	af 90       	pop	r10
     58c:	08 95       	ret

0000058e <cf_minus>:



complexfloat cf_minus(complexfloat A, complexfloat B)
{
     58e:	af 92       	push	r10
     590:	bf 92       	push	r11
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	a0 97       	sbiw	r28, 0x20	; 32
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	29 8b       	std	Y+17, r18	; 0x11
     5ae:	3a 8b       	std	Y+18, r19	; 0x12
     5b0:	4b 8b       	std	Y+19, r20	; 0x13
     5b2:	5c 8b       	std	Y+20, r21	; 0x14
     5b4:	6d 8b       	std	Y+21, r22	; 0x15
     5b6:	7e 8b       	std	Y+22, r23	; 0x16
     5b8:	8f 8b       	std	Y+23, r24	; 0x17
     5ba:	98 8f       	std	Y+24, r25	; 0x18
     5bc:	a9 8e       	std	Y+25, r10	; 0x19
     5be:	ba 8e       	std	Y+26, r11	; 0x1a
     5c0:	cb 8e       	std	Y+27, r12	; 0x1b
     5c2:	dc 8e       	std	Y+28, r13	; 0x1c
     5c4:	ed 8e       	std	Y+29, r14	; 0x1d
     5c6:	fe 8e       	std	Y+30, r15	; 0x1e
     5c8:	0f 8f       	std	Y+31, r16	; 0x1f
     5ca:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;

    C.im = A.im - B.im;                                                 //Subtract complex components
     5cc:	69 89       	ldd	r22, Y+17	; 0x11
     5ce:	7a 89       	ldd	r23, Y+18	; 0x12
     5d0:	8b 89       	ldd	r24, Y+19	; 0x13
     5d2:	9c 89       	ldd	r25, Y+20	; 0x14
     5d4:	29 8d       	ldd	r18, Y+25	; 0x19
     5d6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5d8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     5da:	5c 8d       	ldd	r21, Y+28	; 0x1c
     5dc:	0e 94 ba 09 	call	0x1374	; 0x1374 <__subsf3>
     5e0:	69 87       	std	Y+9, r22	; 0x09
     5e2:	7a 87       	std	Y+10, r23	; 0x0a
     5e4:	8b 87       	std	Y+11, r24	; 0x0b
     5e6:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re - B.re;                                                 //Subtract real components
     5e8:	6d 89       	ldd	r22, Y+21	; 0x15
     5ea:	7e 89       	ldd	r23, Y+22	; 0x16
     5ec:	8f 89       	ldd	r24, Y+23	; 0x17
     5ee:	98 8d       	ldd	r25, Y+24	; 0x18
     5f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     5f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     5f4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     5f6:	58 a1       	ldd	r21, Y+32	; 0x20
     5f8:	0e 94 ba 09 	call	0x1374	; 0x1374 <__subsf3>
     5fc:	6d 87       	std	Y+13, r22	; 0x0d
     5fe:	7e 87       	std	Y+14, r23	; 0x0e
     600:	8f 87       	std	Y+15, r24	; 0x0f
     602:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Return complex struct
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	fe 01       	movw	r30, r28
     608:	39 96       	adiw	r30, 0x09	; 9
     60a:	de 01       	movw	r26, r28
     60c:	11 96       	adiw	r26, 0x01	; 1
     60e:	01 90       	ld	r0, Z+
     610:	0d 92       	st	X+, r0
     612:	8a 95       	dec	r24
     614:	e1 f7       	brne	.-8      	; 0x60e <cf_minus+0x80>
     616:	29 81       	ldd	r18, Y+1	; 0x01
     618:	3a 81       	ldd	r19, Y+2	; 0x02
     61a:	4b 81       	ldd	r20, Y+3	; 0x03
     61c:	5c 81       	ldd	r21, Y+4	; 0x04
     61e:	6d 81       	ldd	r22, Y+5	; 0x05
     620:	7e 81       	ldd	r23, Y+6	; 0x06
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	98 85       	ldd	r25, Y+8	; 0x08
     626:	a0 96       	adiw	r28, 0x20	; 32
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	bf 90       	pop	r11
     63e:	af 90       	pop	r10
     640:	08 95       	ret

00000642 <calc_BitReversal>:
#include "avr_fft.h"

uint16_t calc_BitReversal(uint16_t Value)
{
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
	uint16_t Nr;                                                                                                //Number of bits to be reversed
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     650:	fc 01       	movw	r30, r24
     652:	31 97       	sbiw	r30, 0x01	; 1

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     654:	bf 01       	movw	r22, r30
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0

uint16_t calc_BitReversal(uint16_t Value)
{
	uint16_t Nr;                                                                                                //Number of bits to be reversed
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     65e:	1c c0       	rjmp	.+56     	; 0x698 <calc_BitReversal+0x56>
	{
		Temp = (0x01<<i);                                                                                       //Creates bit mask to test bit i
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	04 2e       	mov	r0, r20
     666:	02 c0       	rjmp	.+4      	; 0x66c <calc_BitReversal+0x2a>
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	0a 94       	dec	r0
     66e:	e2 f7       	brpl	.-8      	; 0x668 <calc_BitReversal+0x26>
		RValue |= (((Value&Temp)>>i)<<j);                                                                       //Tests bit i and shifts to jth position (Bit reversal)
     670:	2c 23       	and	r18, r28
     672:	3d 23       	and	r19, r29
     674:	04 2e       	mov	r0, r20
     676:	02 c0       	rjmp	.+4      	; 0x67c <calc_BitReversal+0x3a>
     678:	36 95       	lsr	r19
     67a:	27 95       	ror	r18
     67c:	0a 94       	dec	r0
     67e:	e2 f7       	brpl	.-8      	; 0x678 <calc_BitReversal+0x36>
     680:	06 2e       	mov	r0, r22
     682:	02 c0       	rjmp	.+4      	; 0x688 <calc_BitReversal+0x46>
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <calc_BitReversal+0x42>
     68c:	82 2b       	or	r24, r18
     68e:	93 2b       	or	r25, r19
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     690:	4f 5f       	subi	r20, 0xFF	; 255
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	61 50       	subi	r22, 0x01	; 1
     696:	71 09       	sbc	r23, r1
     698:	e4 17       	cp	r30, r20
     69a:	f5 07       	cpc	r31, r21
     69c:	08 f7       	brcc	.-62     	; 0x660 <calc_BitReversal+0x1e>
		Temp = (0x01<<i);                                                                                       //Creates bit mask to test bit i
		RValue |= (((Value&Temp)>>i)<<j);                                                                       //Tests bit i and shifts to jth position (Bit reversal)
	}

	return RValue;                                                                                              //Returns the bit reversed Value
}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <init_BRLookup>:



void init_BRLookup(uint16_t *Lookup_Reverse)
{
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	7c 01       	movw	r14, r24
	for(uint16_t i = 0; i < N; i++)
     6b2:	c0 e0       	ldi	r28, 0x00	; 0
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
     6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <init_BRLookup+0x2c>
	{
		Lookup_Reverse[i] = calc_BitReversal(i);																//Calculates the bit reversal for the fft input order
     6b8:	8e 01       	movw	r16, r28
     6ba:	00 0f       	add	r16, r16
     6bc:	11 1f       	adc	r17, r17
     6be:	0e 0d       	add	r16, r14
     6c0:	1f 1d       	adc	r17, r15
     6c2:	ce 01       	movw	r24, r28
     6c4:	0e 94 21 03 	call	0x642	; 0x642 <calc_BitReversal>
     6c8:	f8 01       	movw	r30, r16
     6ca:	80 83       	st	Z, r24
     6cc:	91 83       	std	Z+1, r25	; 0x01



void init_BRLookup(uint16_t *Lookup_Reverse)
{
	for(uint16_t i = 0; i < N; i++)
     6ce:	21 96       	adiw	r28, 0x01	; 1
     6d0:	c1 15       	cp	r28, r1
     6d2:	f2 e0       	ldi	r31, 0x02	; 2
     6d4:	df 07       	cpc	r29, r31
     6d6:	80 f3       	brcs	.-32     	; 0x6b8 <init_BRLookup+0x14>
	{
		Lookup_Reverse[i] = calc_BitReversal(i);																//Calculates the bit reversal for the fft input order
	}
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <init_avr_Wlookup>:



void init_avr_Wlookup(complexfloat *W)
{
     6e6:	6f 92       	push	r6
     6e8:	7f 92       	push	r7
     6ea:	8f 92       	push	r8
     6ec:	9f 92       	push	r9
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	60 97       	sbiw	r28, 0x10	; 16
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	3c 01       	movw	r6, r24
	complexfloat TempW;                                                                                         //Create temporary variable
	TempW.re = 1, TempW.im = 0;                                                                                 //Set to value W^0
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a0 e8       	ldi	r26, 0x80	; 128
     714:	bf e3       	ldi	r27, 0x3F	; 63
     716:	8d 83       	std	Y+5, r24	; 0x05
     718:	9e 83       	std	Y+6, r25	; 0x06
     71a:	af 83       	std	Y+7, r26	; 0x07
     71c:	b8 87       	std	Y+8, r27	; 0x08
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	1a 82       	std	Y+2, r1	; 0x02
     722:	1b 82       	std	Y+3, r1	; 0x03
     724:	1c 82       	std	Y+4, r1	; 0x04
	complexfloat Wk = cf_exp((-2*M_PI)/N);																		//Value Wn^1
     726:	6b ed       	ldi	r22, 0xDB	; 219
     728:	7f e0       	ldi	r23, 0x0F	; 15
     72a:	89 e4       	ldi	r24, 0x49	; 73
     72c:	9c eb       	ldi	r25, 0xBC	; 188
     72e:	0e 94 1d 02 	call	0x43a	; 0x43a <cf_exp>
     732:	29 87       	std	Y+9, r18	; 0x09
     734:	3a 87       	std	Y+10, r19	; 0x0a
     736:	4b 87       	std	Y+11, r20	; 0x0b
     738:	5c 87       	std	Y+12, r21	; 0x0c
     73a:	6d 87       	std	Y+13, r22	; 0x0d
     73c:	7e 87       	std	Y+14, r23	; 0x0e
     73e:	8f 87       	std	Y+15, r24	; 0x0f
     740:	98 8b       	std	Y+16, r25	; 0x10

	for(uint16_t i = 0; i < (N/2); i++)
     742:	81 2c       	mov	r8, r1
     744:	91 2c       	mov	r9, r1
     746:	36 c0       	rjmp	.+108    	; 0x7b4 <init_avr_Wlookup+0xce>
	{
		W[i].re = TempW.re;                                                                                     //Generate twiddle factors
     748:	f4 01       	movw	r30, r8
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	ee 0f       	add	r30, r30
     750:	ff 1f       	adc	r31, r31
     752:	ee 0f       	add	r30, r30
     754:	ff 1f       	adc	r31, r31
     756:	e6 0d       	add	r30, r6
     758:	f7 1d       	adc	r31, r7
     75a:	8d 81       	ldd	r24, Y+5	; 0x05
     75c:	9e 81       	ldd	r25, Y+6	; 0x06
     75e:	af 81       	ldd	r26, Y+7	; 0x07
     760:	b8 85       	ldd	r27, Y+8	; 0x08
     762:	84 83       	std	Z+4, r24	; 0x04
     764:	95 83       	std	Z+5, r25	; 0x05
     766:	a6 83       	std	Z+6, r26	; 0x06
     768:	b7 83       	std	Z+7, r27	; 0x07
		W[i].im = TempW.im;
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	ab 81       	ldd	r26, Y+3	; 0x03
     770:	bc 81       	ldd	r27, Y+4	; 0x04
     772:	80 83       	st	Z, r24
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	a2 83       	std	Z+2, r26	; 0x02
     778:	b3 83       	std	Z+3, r27	; 0x03

		TempW = cf_multiply(TempW, Wk);																			//Update temporary variable (W^(i+1))
     77a:	a9 84       	ldd	r10, Y+9	; 0x09
     77c:	ba 84       	ldd	r11, Y+10	; 0x0a
     77e:	cb 84       	ldd	r12, Y+11	; 0x0b
     780:	dc 84       	ldd	r13, Y+12	; 0x0c
     782:	ed 84       	ldd	r14, Y+13	; 0x0d
     784:	fe 84       	ldd	r15, Y+14	; 0x0e
     786:	0f 85       	ldd	r16, Y+15	; 0x0f
     788:	18 89       	ldd	r17, Y+16	; 0x10
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	3a 81       	ldd	r19, Y+2	; 0x02
     78e:	4b 81       	ldd	r20, Y+3	; 0x03
     790:	5c 81       	ldd	r21, Y+4	; 0x04
     792:	6d 81       	ldd	r22, Y+5	; 0x05
     794:	7e 81       	ldd	r23, Y+6	; 0x06
     796:	8f 81       	ldd	r24, Y+7	; 0x07
     798:	98 85       	ldd	r25, Y+8	; 0x08
     79a:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     79e:	29 83       	std	Y+1, r18	; 0x01
     7a0:	3a 83       	std	Y+2, r19	; 0x02
     7a2:	4b 83       	std	Y+3, r20	; 0x03
     7a4:	5c 83       	std	Y+4, r21	; 0x04
     7a6:	6d 83       	std	Y+5, r22	; 0x05
     7a8:	7e 83       	std	Y+6, r23	; 0x06
     7aa:	8f 83       	std	Y+7, r24	; 0x07
     7ac:	98 87       	std	Y+8, r25	; 0x08
{
	complexfloat TempW;                                                                                         //Create temporary variable
	TempW.re = 1, TempW.im = 0;                                                                                 //Set to value W^0
	complexfloat Wk = cf_exp((-2*M_PI)/N);																		//Value Wn^1

	for(uint16_t i = 0; i < (N/2); i++)
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	88 1a       	sub	r8, r24
     7b2:	98 0a       	sbc	r9, r24
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	88 16       	cp	r8, r24
     7b8:	91 04       	cpc	r9, r1
     7ba:	31 f2       	breq	.-116    	; 0x748 <init_avr_Wlookup+0x62>
     7bc:	28 f2       	brcs	.-118    	; 0x748 <init_avr_Wlookup+0x62>
		W[i].re = TempW.re;                                                                                     //Generate twiddle factors
		W[i].im = TempW.im;

		TempW = cf_multiply(TempW, Wk);																			//Update temporary variable (W^(i+1))
	}
}
     7be:	60 96       	adiw	r28, 0x10	; 16
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	9f 90       	pop	r9
     7da:	8f 90       	pop	r8
     7dc:	7f 90       	pop	r7
     7de:	6f 90       	pop	r6
     7e0:	08 95       	ret

000007e2 <apply_avr_Window>:



void apply_avr_Window(complexfloat *FFT_Array, float *Window, uint16_t *Lookup_Reverse)
{
     7e2:	6f 92       	push	r6
     7e4:	7f 92       	push	r7
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	6c 01       	movw	r12, r24
     800:	5b 01       	movw	r10, r22
     802:	4a 01       	movw	r8, r20
	for(uint16_t i = 0; i < (N/2); i++)
     804:	61 2c       	mov	r6, r1
     806:	71 2c       	mov	r7, r1
     808:	2f c0       	rjmp	.+94     	; 0x868 <apply_avr_Window+0x86>
	{
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
     80a:	f3 01       	movw	r30, r6
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	e8 0d       	add	r30, r8
     812:	f9 1d       	adc	r31, r9
     814:	c0 81       	ld	r28, Z
     816:	d1 81       	ldd	r29, Z+1	; 0x01
     818:	cc 0f       	add	r28, r28
     81a:	dd 1f       	adc	r29, r29
     81c:	cc 0f       	add	r28, r28
     81e:	dd 1f       	adc	r29, r29
     820:	cc 0f       	add	r28, r28
     822:	dd 1f       	adc	r29, r29
     824:	f3 01       	movw	r30, r6
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	ea 0d       	add	r30, r10
     830:	fb 1d       	adc	r31, r11
     832:	e0 80       	ld	r14, Z
     834:	f1 80       	ldd	r15, Z+1	; 0x01
     836:	02 81       	ldd	r16, Z+2	; 0x02
     838:	13 81       	ldd	r17, Z+3	; 0x03
     83a:	cc 0d       	add	r28, r12
     83c:	dd 1d       	adc	r29, r13
     83e:	28 81       	ld	r18, Y
     840:	39 81       	ldd	r19, Y+1	; 0x01
     842:	4a 81       	ldd	r20, Y+2	; 0x02
     844:	5b 81       	ldd	r21, Y+3	; 0x03
     846:	6c 81       	ldd	r22, Y+4	; 0x04
     848:	7d 81       	ldd	r23, Y+5	; 0x05
     84a:	8e 81       	ldd	r24, Y+6	; 0x06
     84c:	9f 81       	ldd	r25, Y+7	; 0x07
     84e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_multiply_rf>
     852:	28 83       	st	Y, r18
     854:	39 83       	std	Y+1, r19	; 0x01
     856:	4a 83       	std	Y+2, r20	; 0x02
     858:	5b 83       	std	Y+3, r21	; 0x03
     85a:	6c 83       	std	Y+4, r22	; 0x04
     85c:	7d 83       	std	Y+5, r23	; 0x05
     85e:	8e 83       	std	Y+6, r24	; 0x06
     860:	9f 83       	std	Y+7, r25	; 0x07



void apply_avr_Window(complexfloat *FFT_Array, float *Window, uint16_t *Lookup_Reverse)
{
	for(uint16_t i = 0; i < (N/2); i++)
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	68 1a       	sub	r6, r24
     866:	78 0a       	sbc	r7, r24
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	68 16       	cp	r6, r24
     86c:	71 04       	cpc	r7, r1
     86e:	69 f2       	breq	.-102    	; 0x80a <apply_avr_Window+0x28>
     870:	60 f2       	brcs	.-104    	; 0x80a <apply_avr_Window+0x28>
     872:	61 2c       	mov	r6, r1
     874:	77 24       	eor	r7, r7
     876:	73 94       	inc	r7
     878:	35 c0       	rjmp	.+106    	; 0x8e4 <apply_avr_Window+0x102>
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
	}

	for(uint16_t i = (N/2); i > 0; i--)
	{
		FFT_Array[Lookup_Reverse[N-i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[N-i]], Window[i-1]);			//Apply window to second half of samples
     87a:	ee 27       	eor	r30, r30
     87c:	ff 27       	eor	r31, r31
     87e:	e6 19       	sub	r30, r6
     880:	f7 09       	sbc	r31, r7
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	e8 0d       	add	r30, r8
     888:	f9 1d       	adc	r31, r9
     88a:	fc 5f       	subi	r31, 0xFC	; 252
     88c:	c0 81       	ld	r28, Z
     88e:	d1 81       	ldd	r29, Z+1	; 0x01
     890:	cc 0f       	add	r28, r28
     892:	dd 1f       	adc	r29, r29
     894:	cc 0f       	add	r28, r28
     896:	dd 1f       	adc	r29, r29
     898:	cc 0f       	add	r28, r28
     89a:	dd 1f       	adc	r29, r29
     89c:	f3 01       	movw	r30, r6
     89e:	e1 50       	subi	r30, 0x01	; 1
     8a0:	f0 4c       	sbci	r31, 0xC0	; 192
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	ea 0d       	add	r30, r10
     8ac:	fb 1d       	adc	r31, r11
     8ae:	e0 80       	ld	r14, Z
     8b0:	f1 80       	ldd	r15, Z+1	; 0x01
     8b2:	02 81       	ldd	r16, Z+2	; 0x02
     8b4:	13 81       	ldd	r17, Z+3	; 0x03
     8b6:	cc 0d       	add	r28, r12
     8b8:	dd 1d       	adc	r29, r13
     8ba:	28 81       	ld	r18, Y
     8bc:	39 81       	ldd	r19, Y+1	; 0x01
     8be:	4a 81       	ldd	r20, Y+2	; 0x02
     8c0:	5b 81       	ldd	r21, Y+3	; 0x03
     8c2:	6c 81       	ldd	r22, Y+4	; 0x04
     8c4:	7d 81       	ldd	r23, Y+5	; 0x05
     8c6:	8e 81       	ldd	r24, Y+6	; 0x06
     8c8:	9f 81       	ldd	r25, Y+7	; 0x07
     8ca:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_multiply_rf>
     8ce:	28 83       	st	Y, r18
     8d0:	39 83       	std	Y+1, r19	; 0x01
     8d2:	4a 83       	std	Y+2, r20	; 0x02
     8d4:	5b 83       	std	Y+3, r21	; 0x03
     8d6:	6c 83       	std	Y+4, r22	; 0x04
     8d8:	7d 83       	std	Y+5, r23	; 0x05
     8da:	8e 83       	std	Y+6, r24	; 0x06
     8dc:	9f 83       	std	Y+7, r25	; 0x07
	for(uint16_t i = 0; i < (N/2); i++)
	{
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
	}

	for(uint16_t i = (N/2); i > 0; i--)
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	68 1a       	sub	r6, r24
     8e2:	71 08       	sbc	r7, r1
     8e4:	61 14       	cp	r6, r1
     8e6:	71 04       	cpc	r7, r1
     8e8:	41 f6       	brne	.-112    	; 0x87a <apply_avr_Window+0x98>
	{
		FFT_Array[Lookup_Reverse[N-i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[N-i]], Window[i-1]);			//Apply window to second half of samples
	}
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	7f 90       	pop	r7
     904:	6f 90       	pop	r6
     906:	08 95       	ret

00000908 <calc_avr_FFT>:



void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	62 97       	sbiw	r28, 0x12	; 18
     932:	cd bf       	out	0x3d, r28	; 61
     934:	de bf       	out	0x3e, r29	; 62
     936:	1c 01       	movw	r2, r24
     938:	6f 87       	std	Y+15, r22	; 0x0f
     93a:	78 8b       	std	Y+16, r23	; 0x10
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     93c:	19 8a       	std	Y+17, r1	; 0x11
     93e:	1a 8a       	std	Y+18, r1	; 0x12

void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step
     940:	22 e0       	ldi	r18, 0x02	; 2
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	29 87       	std	Y+9, r18	; 0x09
     946:	3a 87       	std	Y+10, r19	; 0x0a



void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	8d 87       	std	Y+13, r24	; 0x0d
     94e:	9e 87       	std	Y+14, r25	; 0x0e
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     950:	d4 c0       	rjmp	.+424    	; 0xafa <calc_avr_FFT+0x1f2>
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
		{
			for(uint16_t k = 0; k < ((N/PCalc)/2); k++)                                                         //Calculation in one parallel
			{
				Temp = cf_multiply(FFT_Array[(CNr*j)+(k+(CNr/2))], W[k*((N/2)/(CNr/2))]);						//Calculates multiplication in butterfly
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	69 84       	ldd	r6, Y+9	; 0x09
     958:	7a 84       	ldd	r7, Y+10	; 0x0a
     95a:	76 94       	lsr	r7
     95c:	67 94       	ror	r6
     95e:	b3 01       	movw	r22, r6
     960:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__udivmodhi4>
     964:	46 9e       	mul	r4, r22
     966:	d0 01       	movw	r26, r0
     968:	47 9e       	mul	r4, r23
     96a:	b0 0d       	add	r27, r0
     96c:	56 9e       	mul	r5, r22
     96e:	b0 0d       	add	r27, r0
     970:	11 24       	eor	r1, r1
     972:	aa 0f       	add	r26, r26
     974:	bb 1f       	adc	r27, r27
     976:	aa 0f       	add	r26, r26
     978:	bb 1f       	adc	r27, r27
     97a:	aa 0f       	add	r26, r26
     97c:	bb 1f       	adc	r27, r27
     97e:	ef 85       	ldd	r30, Y+15	; 0x0f
     980:	f8 89       	ldd	r31, Y+16	; 0x10
     982:	ae 0f       	add	r26, r30
     984:	bf 1f       	adc	r27, r31
     986:	29 85       	ldd	r18, Y+9	; 0x09
     988:	3a 85       	ldd	r19, Y+10	; 0x0a
     98a:	8b 85       	ldd	r24, Y+11	; 0x0b
     98c:	9c 85       	ldd	r25, Y+12	; 0x0c
     98e:	28 9f       	mul	r18, r24
     990:	40 01       	movw	r8, r0
     992:	29 9f       	mul	r18, r25
     994:	90 0c       	add	r9, r0
     996:	38 9f       	mul	r19, r24
     998:	90 0c       	add	r9, r0
     99a:	11 24       	eor	r1, r1
     99c:	f2 01       	movw	r30, r4
     99e:	e6 0d       	add	r30, r6
     9a0:	f7 1d       	adc	r31, r7
     9a2:	e8 0d       	add	r30, r8
     9a4:	f9 1d       	adc	r31, r9
     9a6:	ee 0f       	add	r30, r30
     9a8:	ff 1f       	adc	r31, r31
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e2 0d       	add	r30, r2
     9b4:	f3 1d       	adc	r31, r3
     9b6:	ac 90       	ld	r10, X
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	bc 90       	ld	r11, X
     9bc:	11 97       	sbiw	r26, 0x01	; 1
     9be:	12 96       	adiw	r26, 0x02	; 2
     9c0:	cc 90       	ld	r12, X
     9c2:	12 97       	sbiw	r26, 0x02	; 2
     9c4:	13 96       	adiw	r26, 0x03	; 3
     9c6:	dc 90       	ld	r13, X
     9c8:	13 97       	sbiw	r26, 0x03	; 3
     9ca:	14 96       	adiw	r26, 0x04	; 4
     9cc:	ec 90       	ld	r14, X
     9ce:	14 97       	sbiw	r26, 0x04	; 4
     9d0:	15 96       	adiw	r26, 0x05	; 5
     9d2:	fc 90       	ld	r15, X
     9d4:	15 97       	sbiw	r26, 0x05	; 5
     9d6:	16 96       	adiw	r26, 0x06	; 6
     9d8:	0c 91       	ld	r16, X
     9da:	16 97       	sbiw	r26, 0x06	; 6
     9dc:	17 96       	adiw	r26, 0x07	; 7
     9de:	1c 91       	ld	r17, X
     9e0:	20 81       	ld	r18, Z
     9e2:	31 81       	ldd	r19, Z+1	; 0x01
     9e4:	42 81       	ldd	r20, Z+2	; 0x02
     9e6:	53 81       	ldd	r21, Z+3	; 0x03
     9e8:	64 81       	ldd	r22, Z+4	; 0x04
     9ea:	75 81       	ldd	r23, Z+5	; 0x05
     9ec:	86 81       	ldd	r24, Z+6	; 0x06
     9ee:	97 81       	ldd	r25, Z+7	; 0x07
     9f0:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     9f4:	29 83       	std	Y+1, r18	; 0x01
     9f6:	3a 83       	std	Y+2, r19	; 0x02
     9f8:	4b 83       	std	Y+3, r20	; 0x03
     9fa:	5c 83       	std	Y+4, r21	; 0x04
     9fc:	6d 83       	std	Y+5, r22	; 0x05
     9fe:	7e 83       	std	Y+6, r23	; 0x06
     a00:	8f 83       	std	Y+7, r24	; 0x07
     a02:	98 87       	std	Y+8, r25	; 0x08
				FFT_Array[((j*CNr)+k)+(CNr/2)] = cf_minus(FFT_Array[(j*CNr)+k],Temp);							//Calculates and stores bottom of butterfly
     a04:	84 0c       	add	r8, r4
     a06:	95 1c       	adc	r9, r5
     a08:	68 0c       	add	r6, r8
     a0a:	79 1c       	adc	r7, r9
     a0c:	66 0c       	add	r6, r6
     a0e:	77 1c       	adc	r7, r7
     a10:	66 0c       	add	r6, r6
     a12:	77 1c       	adc	r7, r7
     a14:	66 0c       	add	r6, r6
     a16:	77 1c       	adc	r7, r7
     a18:	62 0c       	add	r6, r2
     a1a:	73 1c       	adc	r7, r3
     a1c:	88 0c       	add	r8, r8
     a1e:	99 1c       	adc	r9, r9
     a20:	88 0c       	add	r8, r8
     a22:	99 1c       	adc	r9, r9
     a24:	88 0c       	add	r8, r8
     a26:	99 1c       	adc	r9, r9
     a28:	82 0c       	add	r8, r2
     a2a:	93 1c       	adc	r9, r3
     a2c:	a2 2e       	mov	r10, r18
     a2e:	b3 2e       	mov	r11, r19
     a30:	c4 2e       	mov	r12, r20
     a32:	d5 2e       	mov	r13, r21
     a34:	e6 2e       	mov	r14, r22
     a36:	f7 2e       	mov	r15, r23
     a38:	08 2f       	mov	r16, r24
     a3a:	19 2f       	mov	r17, r25
     a3c:	f4 01       	movw	r30, r8
     a3e:	20 81       	ld	r18, Z
     a40:	31 81       	ldd	r19, Z+1	; 0x01
     a42:	42 81       	ldd	r20, Z+2	; 0x02
     a44:	53 81       	ldd	r21, Z+3	; 0x03
     a46:	64 81       	ldd	r22, Z+4	; 0x04
     a48:	75 81       	ldd	r23, Z+5	; 0x05
     a4a:	86 81       	ldd	r24, Z+6	; 0x06
     a4c:	97 81       	ldd	r25, Z+7	; 0x07
     a4e:	0e 94 c7 02 	call	0x58e	; 0x58e <cf_minus>
     a52:	f3 01       	movw	r30, r6
     a54:	20 83       	st	Z, r18
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	42 83       	std	Z+2, r20	; 0x02
     a5a:	53 83       	std	Z+3, r21	; 0x03
     a5c:	64 83       	std	Z+4, r22	; 0x04
     a5e:	75 83       	std	Z+5, r23	; 0x05
     a60:	86 83       	std	Z+6, r24	; 0x06
     a62:	97 83       	std	Z+7, r25	; 0x07
				FFT_Array[(j*CNr)+k] = cf_plus(FFT_Array[(j*CNr)+k],Temp);										//Calculates and stores top of butterfly
     a64:	a9 80       	ldd	r10, Y+1	; 0x01
     a66:	ba 80       	ldd	r11, Y+2	; 0x02
     a68:	cb 80       	ldd	r12, Y+3	; 0x03
     a6a:	dc 80       	ldd	r13, Y+4	; 0x04
     a6c:	ed 80       	ldd	r14, Y+5	; 0x05
     a6e:	fe 80       	ldd	r15, Y+6	; 0x06
     a70:	0f 81       	ldd	r16, Y+7	; 0x07
     a72:	18 85       	ldd	r17, Y+8	; 0x08
     a74:	f4 01       	movw	r30, r8
     a76:	20 81       	ld	r18, Z
     a78:	31 81       	ldd	r19, Z+1	; 0x01
     a7a:	42 81       	ldd	r20, Z+2	; 0x02
     a7c:	53 81       	ldd	r21, Z+3	; 0x03
     a7e:	64 81       	ldd	r22, Z+4	; 0x04
     a80:	75 81       	ldd	r23, Z+5	; 0x05
     a82:	86 81       	ldd	r24, Z+6	; 0x06
     a84:	97 81       	ldd	r25, Z+7	; 0x07
     a86:	0e 94 6d 02 	call	0x4da	; 0x4da <cf_plus>
     a8a:	f4 01       	movw	r30, r8
     a8c:	20 83       	st	Z, r18
     a8e:	31 83       	std	Z+1, r19	; 0x01
     a90:	42 83       	std	Z+2, r20	; 0x02
     a92:	53 83       	std	Z+3, r21	; 0x03
     a94:	64 83       	std	Z+4, r22	; 0x04
     a96:	75 83       	std	Z+5, r23	; 0x05
     a98:	86 83       	std	Z+6, r24	; 0x06
     a9a:	97 83       	std	Z+7, r25	; 0x07

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
		{
			for(uint16_t k = 0; k < ((N/PCalc)/2); k++)                                                         //Calculation in one parallel
     a9c:	ff ef       	ldi	r31, 0xFF	; 255
     a9e:	4f 1a       	sub	r4, r31
     aa0:	5f 0a       	sbc	r5, r31
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <calc_avr_FFT+0x1a0>
     aa4:	41 2c       	mov	r4, r1
     aa6:	51 2c       	mov	r5, r1
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	6d 85       	ldd	r22, Y+13	; 0x0d
     aae:	7e 85       	ldd	r23, Y+14	; 0x0e
     ab0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__udivmodhi4>
     ab4:	46 16       	cp	r4, r22
     ab6:	57 06       	cpc	r5, r23
     ab8:	08 f4       	brcc	.+2      	; 0xabc <calc_avr_FFT+0x1b4>
     aba:	4b cf       	rjmp	.-362    	; 0x952 <calc_avr_FFT+0x4a>
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
     abc:	2b 85       	ldd	r18, Y+11	; 0x0b
     abe:	3c 85       	ldd	r19, Y+12	; 0x0c
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	2b 87       	std	Y+11, r18	; 0x0b
     ac6:	3c 87       	std	Y+12, r19	; 0x0c
     ac8:	02 c0       	rjmp	.+4      	; 0xace <calc_avr_FFT+0x1c6>
     aca:	1b 86       	std	Y+11, r1	; 0x0b
     acc:	1c 86       	std	Y+12, r1	; 0x0c
     ace:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ad2:	eb 85       	ldd	r30, Y+11	; 0x0b
     ad4:	fc 85       	ldd	r31, Y+12	; 0x0c
     ad6:	e8 17       	cp	r30, r24
     ad8:	f9 07       	cpc	r31, r25
     ada:	20 f3       	brcs	.-56     	; 0xaa4 <calc_avr_FFT+0x19c>
				FFT_Array[((j*CNr)+k)+(CNr/2)] = cf_minus(FFT_Array[(j*CNr)+k],Temp);							//Calculates and stores bottom of butterfly
				FFT_Array[(j*CNr)+k] = cf_plus(FFT_Array[(j*CNr)+k],Temp);										//Calculates and stores top of butterfly
			}
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
     adc:	29 85       	ldd	r18, Y+9	; 0x09
     ade:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae0:	22 0f       	add	r18, r18
     ae2:	33 1f       	adc	r19, r19
     ae4:	29 87       	std	Y+9, r18	; 0x09
     ae6:	3a 87       	std	Y+10, r19	; 0x0a
		PCalc /= 2;                                                                                             //Set parallel computations to half
     ae8:	96 95       	lsr	r25
     aea:	87 95       	ror	r24
     aec:	8d 87       	std	Y+13, r24	; 0x0d
     aee:	9e 87       	std	Y+14, r25	; 0x0e
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     af0:	89 89       	ldd	r24, Y+17	; 0x11
     af2:	9a 89       	ldd	r25, Y+18	; 0x12
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	89 8b       	std	Y+17, r24	; 0x11
     af8:	9a 8b       	std	Y+18, r25	; 0x12
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     b02:	e9 89       	ldd	r30, Y+17	; 0x11
     b04:	fa 89       	ldd	r31, Y+18	; 0x12
     b06:	e8 17       	cp	r30, r24
     b08:	f9 07       	cpc	r31, r25
     b0a:	f8 f2       	brcs	.-66     	; 0xaca <calc_avr_FFT+0x1c2>
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
		PCalc /= 2;                                                                                             //Set parallel computations to half
	}
}
     b0c:	62 96       	adiw	r28, 0x12	; 18
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	af 90       	pop	r10
     b26:	9f 90       	pop	r9
     b28:	8f 90       	pop	r8
     b2a:	7f 90       	pop	r7
     b2c:	6f 90       	pop	r6
     b2e:	5f 90       	pop	r5
     b30:	4f 90       	pop	r4
     b32:	3f 90       	pop	r3
     b34:	2f 90       	pop	r2
     b36:	08 95       	ret

00000b38 <init_Window>:

void init_Window(float *Window)
{
     b38:	4f 92       	push	r4
     b3a:	5f 92       	push	r5
     b3c:	6f 92       	push	r6
     b3e:	7f 92       	push	r7
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	5c 01       	movw	r10, r24
	for(uint16_t i = 0; i < (N/2); i++)
     b56:	c0 e0       	ldi	r28, 0x00	; 0
     b58:	d0 e0       	ldi	r29, 0x00	; 0
     b5a:	6c c0       	rjmp	.+216    	; 0xc34 <init_Window+0xfc>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
     b5c:	8e 01       	movw	r16, r28
     b5e:	00 0f       	add	r16, r16
     b60:	11 1f       	adc	r17, r17
     b62:	00 0f       	add	r16, r16
     b64:	11 1f       	adc	r17, r17
     b66:	0a 0d       	add	r16, r10
     b68:	1b 1d       	adc	r17, r11
     b6a:	be 01       	movw	r22, r28
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
     b78:	2b ed       	ldi	r18, 0xDB	; 219
     b7a:	3f e0       	ldi	r19, 0x0F	; 15
     b7c:	49 ec       	ldi	r20, 0xC9	; 201
     b7e:	50 e4       	ldi	r21, 0x40	; 64
     b80:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	5b e3       	ldi	r21, 0x3B	; 59
     b8c:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     b90:	0e 94 2c 0a 	call	0x1458	; 0x1458 <cos>
     b94:	26 e2       	ldi	r18, 0x26	; 38
     b96:	31 e0       	ldi	r19, 0x01	; 1
     b98:	4a ef       	ldi	r20, 0xFA	; 250
     b9a:	5e e3       	ldi	r21, 0x3E	; 62
     b9c:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	64 e1       	ldi	r22, 0x14	; 20
     ba6:	7e ea       	ldi	r23, 0xAE	; 174
     ba8:	87 eb       	ldi	r24, 0xB7	; 183
     baa:	9e e3       	ldi	r25, 0x3E	; 62
     bac:	0e 94 ba 09 	call	0x1374	; 0x1374 <__subsf3>
     bb0:	2b 01       	movw	r4, r22
     bb2:	3c 01       	movw	r6, r24
     bb4:	2b ed       	ldi	r18, 0xDB	; 219
     bb6:	3f e0       	ldi	r19, 0x0F	; 15
     bb8:	49 e4       	ldi	r20, 0x49	; 73
     bba:	51 e4       	ldi	r21, 0x41	; 65
     bbc:	c7 01       	movw	r24, r14
     bbe:	b6 01       	movw	r22, r12
     bc0:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	5b e3       	ldi	r21, 0x3B	; 59
     bcc:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     bd0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <cos>
     bd4:	24 eb       	ldi	r18, 0xB4	; 180
     bd6:	3b ea       	ldi	r19, 0xAB	; 171
     bd8:	40 e1       	ldi	r20, 0x10	; 16
     bda:	5e e3       	ldi	r21, 0x3E	; 62
     bdc:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	c3 01       	movw	r24, r6
     be6:	b2 01       	movw	r22, r4
     be8:	0e 94 bb 09 	call	0x1376	; 0x1376 <__addsf3>
     bec:	2b 01       	movw	r4, r22
     bee:	3c 01       	movw	r6, r24
     bf0:	24 ee       	ldi	r18, 0xE4	; 228
     bf2:	3b ec       	ldi	r19, 0xCB	; 203
     bf4:	46 e9       	ldi	r20, 0x96	; 150
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	c7 01       	movw	r24, r14
     bfa:	b6 01       	movw	r22, r12
     bfc:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	5b e3       	ldi	r21, 0x3B	; 59
     c08:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     c0c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <cos>
     c10:	29 e7       	ldi	r18, 0x79	; 121
     c12:	3d e5       	ldi	r19, 0x5D	; 93
     c14:	4f e3       	ldi	r20, 0x3F	; 63
     c16:	5c e3       	ldi	r21, 0x3C	; 60
     c18:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     c1c:	9b 01       	movw	r18, r22
     c1e:	ac 01       	movw	r20, r24
     c20:	c3 01       	movw	r24, r6
     c22:	b2 01       	movw	r22, r4
     c24:	0e 94 ba 09 	call	0x1374	; 0x1374 <__subsf3>
     c28:	f8 01       	movw	r30, r16
     c2a:	60 83       	st	Z, r22
     c2c:	71 83       	std	Z+1, r23	; 0x01
     c2e:	82 83       	std	Z+2, r24	; 0x02
     c30:	93 83       	std	Z+3, r25	; 0x03
	}
}

void init_Window(float *Window)
{
	for(uint16_t i = 0; i < (N/2); i++)
     c32:	21 96       	adiw	r28, 0x01	; 1
     c34:	cf 3f       	cpi	r28, 0xFF	; 255
     c36:	d1 05       	cpc	r29, r1
     c38:	09 f0       	breq	.+2      	; 0xc3c <init_Window+0x104>
     c3a:	08 f4       	brcc	.+2      	; 0xc3e <init_Window+0x106>
     c3c:	8f cf       	rjmp	.-226    	; 0xb5c <init_Window+0x24>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
	}
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	7f 90       	pop	r7
     c54:	6f 90       	pop	r6
     c56:	5f 90       	pop	r5
     c58:	4f 90       	pop	r4
     c5a:	08 95       	ret

00000c5c <Compute_ABS_spectrum>:
	}
}


void Compute_ABS_spectrum(complexfloat *FFT_Array, float *DSP_Array)
{
     c5c:	2f 92       	push	r2
     c5e:	3f 92       	push	r3
     c60:	4f 92       	push	r4
     c62:	5f 92       	push	r5
     c64:	6f 92       	push	r6
     c66:	7f 92       	push	r7
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	6c 01       	movw	r12, r24
     c82:	7b 01       	movw	r14, r22
	uint16_t MinSample = N/2;																							//Sample of most negative frequency bin
	
	for(uint16_t i = MinSample; i < N; i++)
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	d1 e0       	ldi	r29, 0x01	; 1
     c88:	35 c0       	rjmp	.+106    	; 0xcf4 <Compute_ABS_spectrum+0x98>
	{
		DSP_Array[i-MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate negative frequency vector length
     c8a:	1e 01       	movw	r2, r28
     c8c:	3a 94       	dec	r3
     c8e:	22 0c       	add	r2, r2
     c90:	33 1c       	adc	r3, r3
     c92:	22 0c       	add	r2, r2
     c94:	33 1c       	adc	r3, r3
     c96:	2e 0c       	add	r2, r14
     c98:	3f 1c       	adc	r3, r15
     c9a:	8e 01       	movw	r16, r28
     c9c:	00 0f       	add	r16, r16
     c9e:	11 1f       	adc	r17, r17
     ca0:	00 0f       	add	r16, r16
     ca2:	11 1f       	adc	r17, r17
     ca4:	00 0f       	add	r16, r16
     ca6:	11 1f       	adc	r17, r17
     ca8:	0c 0d       	add	r16, r12
     caa:	1d 1d       	adc	r17, r13
     cac:	f8 01       	movw	r30, r16
     cae:	60 81       	ld	r22, Z
     cb0:	71 81       	ldd	r23, Z+1	; 0x01
     cb2:	82 81       	ldd	r24, Z+2	; 0x02
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     cbe:	4b 01       	movw	r8, r22
     cc0:	5c 01       	movw	r10, r24
     cc2:	f8 01       	movw	r30, r16
     cc4:	64 81       	ldd	r22, Z+4	; 0x04
     cc6:	75 81       	ldd	r23, Z+5	; 0x05
     cc8:	86 81       	ldd	r24, Z+6	; 0x06
     cca:	97 81       	ldd	r25, Z+7	; 0x07
     ccc:	9b 01       	movw	r18, r22
     cce:	ac 01       	movw	r20, r24
     cd0:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     cd4:	2b 01       	movw	r4, r22
     cd6:	3c 01       	movw	r6, r24
     cd8:	a3 01       	movw	r20, r6
     cda:	92 01       	movw	r18, r4
     cdc:	c5 01       	movw	r24, r10
     cde:	b4 01       	movw	r22, r8
     ce0:	0e 94 bb 09 	call	0x1376	; 0x1376 <__addsf3>
     ce4:	0e 94 14 0c 	call	0x1828	; 0x1828 <sqrt>
     ce8:	f1 01       	movw	r30, r2
     cea:	60 83       	st	Z, r22
     cec:	71 83       	std	Z+1, r23	; 0x01
     cee:	82 83       	std	Z+2, r24	; 0x02
     cf0:	93 83       	std	Z+3, r25	; 0x03

void Compute_ABS_spectrum(complexfloat *FFT_Array, float *DSP_Array)
{
	uint16_t MinSample = N/2;																							//Sample of most negative frequency bin
	
	for(uint16_t i = MinSample; i < N; i++)
     cf2:	21 96       	adiw	r28, 0x01	; 1
     cf4:	c1 15       	cp	r28, r1
     cf6:	f2 e0       	ldi	r31, 0x02	; 2
     cf8:	df 07       	cpc	r29, r31
     cfa:	38 f2       	brcs	.-114    	; 0xc8a <Compute_ABS_spectrum+0x2e>
     cfc:	c0 e0       	ldi	r28, 0x00	; 0
     cfe:	d0 e0       	ldi	r29, 0x00	; 0
     d00:	35 c0       	rjmp	.+106    	; 0xd6c <Compute_ABS_spectrum+0x110>
		DSP_Array[i-MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate negative frequency vector length
	}

	for(uint16_t i = 0; i < MinSample; i++)
	{
		DSP_Array[i+MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate positive frequency vector length 
     d02:	1e 01       	movw	r2, r28
     d04:	33 94       	inc	r3
     d06:	22 0c       	add	r2, r2
     d08:	33 1c       	adc	r3, r3
     d0a:	22 0c       	add	r2, r2
     d0c:	33 1c       	adc	r3, r3
     d0e:	2e 0c       	add	r2, r14
     d10:	3f 1c       	adc	r3, r15
     d12:	8e 01       	movw	r16, r28
     d14:	00 0f       	add	r16, r16
     d16:	11 1f       	adc	r17, r17
     d18:	00 0f       	add	r16, r16
     d1a:	11 1f       	adc	r17, r17
     d1c:	00 0f       	add	r16, r16
     d1e:	11 1f       	adc	r17, r17
     d20:	0c 0d       	add	r16, r12
     d22:	1d 1d       	adc	r17, r13
     d24:	f8 01       	movw	r30, r16
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     d36:	4b 01       	movw	r8, r22
     d38:	5c 01       	movw	r10, r24
     d3a:	f8 01       	movw	r30, r16
     d3c:	64 81       	ldd	r22, Z+4	; 0x04
     d3e:	75 81       	ldd	r23, Z+5	; 0x05
     d40:	86 81       	ldd	r24, Z+6	; 0x06
     d42:	97 81       	ldd	r25, Z+7	; 0x07
     d44:	9b 01       	movw	r18, r22
     d46:	ac 01       	movw	r20, r24
     d48:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     d4c:	2b 01       	movw	r4, r22
     d4e:	3c 01       	movw	r6, r24
     d50:	a3 01       	movw	r20, r6
     d52:	92 01       	movw	r18, r4
     d54:	c5 01       	movw	r24, r10
     d56:	b4 01       	movw	r22, r8
     d58:	0e 94 bb 09 	call	0x1376	; 0x1376 <__addsf3>
     d5c:	0e 94 14 0c 	call	0x1828	; 0x1828 <sqrt>
     d60:	f1 01       	movw	r30, r2
     d62:	60 83       	st	Z, r22
     d64:	71 83       	std	Z+1, r23	; 0x01
     d66:	82 83       	std	Z+2, r24	; 0x02
     d68:	93 83       	std	Z+3, r25	; 0x03
	for(uint16_t i = MinSample; i < N; i++)
	{
		DSP_Array[i-MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate negative frequency vector length
	}

	for(uint16_t i = 0; i < MinSample; i++)
     d6a:	21 96       	adiw	r28, 0x01	; 1
     d6c:	cf 3f       	cpi	r28, 0xFF	; 255
     d6e:	d1 05       	cpc	r29, r1
     d70:	41 f2       	breq	.-112    	; 0xd02 <Compute_ABS_spectrum+0xa6>
     d72:	38 f2       	brcs	.-114    	; 0xd02 <Compute_ABS_spectrum+0xa6>
     d74:	c0 e0       	ldi	r28, 0x00	; 0
     d76:	d0 e0       	ldi	r29, 0x00	; 0
     d78:	0e c0       	rjmp	.+28     	; 0xd96 <Compute_ABS_spectrum+0x13a>
		DSP_Array[i+MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate positive frequency vector length 
	}

 	for(uint16_t i = 0; i < N; i++)
 	{
 		writeF_UART(DSP_Array[i]);																						//Debug print spectrum
     d7a:	fe 01       	movw	r30, r28
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	ee 0d       	add	r30, r14
     d86:	ff 1d       	adc	r31, r15
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	0e 94 97 07 	call	0xf2e	; 0xf2e <writeF_UART>
	for(uint16_t i = 0; i < MinSample; i++)
	{
		DSP_Array[i+MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate positive frequency vector length 
	}

 	for(uint16_t i = 0; i < N; i++)
     d94:	21 96       	adiw	r28, 0x01	; 1
     d96:	c1 15       	cp	r28, r1
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	df 07       	cpc	r29, r31
     d9c:	70 f3       	brcs	.-36     	; 0xd7a <Compute_ABS_spectrum+0x11e>
 	{
 		writeF_UART(DSP_Array[i]);																						//Debug print spectrum
 	}
}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	7f 90       	pop	r7
     db8:	6f 90       	pop	r6
     dba:	5f 90       	pop	r5
     dbc:	4f 90       	pop	r4
     dbe:	3f 90       	pop	r3
     dc0:	2f 90       	pop	r2
     dc2:	08 95       	ret

00000dc4 <Get_speed>:

float Get_speed(float *DSP_Array)
{
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	8c 01       	movw	r16, r24
	int16_t Array_Index = 0;																							//Frequency bin
	float fd;																											//Doppler shift frequency
	float n_speed;																										//Normalized speed in kph																									//Temp storage
	float raw_speed;
	
	for(uint16_t i = 1; i < N; i++)
     dd2:	c1 e0       	ldi	r28, 0x01	; 1
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
 	}
}

float Get_speed(float *DSP_Array)
{
	int16_t Array_Index = 0;																							//Frequency bin
     dd6:	e1 2c       	mov	r14, r1
     dd8:	f1 2c       	mov	r15, r1
	float fd;																											//Doppler shift frequency
	float n_speed;																										//Normalized speed in kph																									//Temp storage
	float raw_speed;
	
	for(uint16_t i = 1; i < N; i++)
     dda:	1c c0       	rjmp	.+56     	; 0xe14 <Get_speed+0x50>
	{
		if(DSP_Array[i] > DSP_Array[Array_Index])																		//Find highest peak by comparison
     ddc:	fe 01       	movw	r30, r28
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	e0 0f       	add	r30, r16
     de8:	f1 1f       	adc	r31, r17
     dea:	60 81       	ld	r22, Z
     dec:	71 81       	ldd	r23, Z+1	; 0x01
     dee:	82 81       	ldd	r24, Z+2	; 0x02
     df0:	93 81       	ldd	r25, Z+3	; 0x03
     df2:	f7 01       	movw	r30, r14
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	e0 0f       	add	r30, r16
     dfe:	f1 1f       	adc	r31, r17
     e00:	20 81       	ld	r18, Z
     e02:	31 81       	ldd	r19, Z+1	; 0x01
     e04:	42 81       	ldd	r20, Z+2	; 0x02
     e06:	53 81       	ldd	r21, Z+3	; 0x03
     e08:	0e 94 94 0b 	call	0x1728	; 0x1728 <__gesf2>
     e0c:	18 16       	cp	r1, r24
     e0e:	0c f4       	brge	.+2      	; 0xe12 <Get_speed+0x4e>
		{
			Array_Index = i;																							//store highest peak in array index																					
     e10:	7e 01       	movw	r14, r28
	int16_t Array_Index = 0;																							//Frequency bin
	float fd;																											//Doppler shift frequency
	float n_speed;																										//Normalized speed in kph																									//Temp storage
	float raw_speed;
	
	for(uint16_t i = 1; i < N; i++)
     e12:	21 96       	adiw	r28, 0x01	; 1
     e14:	c1 15       	cp	r28, r1
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	d8 07       	cpc	r29, r24
     e1a:	00 f3       	brcs	.-64     	; 0xddc <Get_speed+0x18>
		{
			Array_Index = i;																							//store highest peak in array index																					
		}
	}
	
	if(DSP_Array[Array_Index] < MIN_AMP)
     e1c:	f7 01       	movw	r30, r14
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	e0 0f       	add	r30, r16
     e28:	f1 1f       	adc	r31, r17
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e4       	ldi	r19, 0x40	; 64
     e36:	4c e1       	ldi	r20, 0x1C	; 28
     e38:	55 e4       	ldi	r21, 0x45	; 69
     e3a:	0e 94 27 0a 	call	0x144e	; 0x144e <__cmpsf2>
     e3e:	88 23       	and	r24, r24
     e40:	1c f4       	brge	.+6      	; 0xe48 <Get_speed+0x84>
	{
		Array_Index = (N/2);																							//Peak is lower than the specified minimum peak value and sets peak index to default zero
     e42:	e1 2c       	mov	r14, r1
     e44:	ff 24       	eor	r15, r15
     e46:	f3 94       	inc	r15
	}
	
	writeF_UART(DSP_Array[Array_Index]);																				//Debug print magnitude of peak
     e48:	f7 01       	movw	r30, r14
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	e0 0f       	add	r30, r16
     e54:	f1 1f       	adc	r31, r17
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	0e 94 97 07 	call	0xf2e	; 0xf2e <writeF_UART>
	
	Array_Index -= (N/2);																								//creates +- frequency bin index from true 0 Hz
     e62:	b7 01       	movw	r22, r14
     e64:	7a 95       	dec	r23
	fd = ((float)Array_Index * (float)F_BIN);																			//Calculates the Doppler shift based on highest frequency bin peak
     e66:	07 2e       	mov	r0, r23
     e68:	00 0c       	add	r0, r0
     e6a:	88 0b       	sbc	r24, r24
     e6c:	99 0b       	sbc	r25, r25
     e6e:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e4       	ldi	r19, 0x40	; 64
     e76:	4c e1       	ldi	r20, 0x1C	; 28
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
	//n_speed = ((((((C*fd)/F0)-C)/(((fd/F0)+1)*cosf(A_rad))*3.6)*F_CAL));												//Calculates boat speed in kph
	
	raw_speed = (fd*(float)C)/((float)F0*2);																			//Calculates speed in m/s
     e7e:	25 e1       	ldi	r18, 0x15	; 21
     e80:	39 ee       	ldi	r19, 0xE9	; 233
     e82:	4e e8       	ldi	r20, 0x8E	; 142
     e84:	5d e4       	ldi	r21, 0x4D	; 77
     e86:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     e8a:	29 ec       	ldi	r18, 0xC9	; 201
     e8c:	3e eb       	ldi	r19, 0xBE	; 190
     e8e:	43 e3       	ldi	r20, 0x33	; 51
     e90:	51 e5       	ldi	r21, 0x51	; 81
     e92:	0e 94 31 0a 	call	0x1462	; 0x1462 <__divsf3>
	n_speed = raw_speed*3.6*F_CAL/cosf(A_rad);																			//Convert to kph, normalize to angle and multiply with calibration factor									
     e96:	26 e6       	ldi	r18, 0x66	; 102
     e98:	36 e6       	ldi	r19, 0x66	; 102
     e9a:	46 e6       	ldi	r20, 0x66	; 102
     e9c:	50 e4       	ldi	r21, 0x40	; 64
     e9e:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
	
	return n_speed;
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	08 95       	ret

00000eb0 <stop_timer>:
#include "handle.h"

void stop_timer(void)
{
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;																	//Turn timer off
     eb0:	e0 e0       	ldi	r30, 0x00	; 0
     eb2:	fa e0       	ldi	r31, 0x0A	; 10
     eb4:	10 82       	st	Z, r1
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_OVFINTLVL_OFF_gc;						//Turn interrupt off
     eb6:	86 81       	ldd	r24, Z+6	; 0x06
     eb8:	8c 7f       	andi	r24, 0xFC	; 252
     eba:	86 83       	std	Z+6, r24	; 0x06
	TCE0.CNT = 0;
     ebc:	10 a2       	std	Z+32, r1	; 0x20
     ebe:	11 a2       	std	Z+33, r1	; 0x21
     ec0:	08 95       	ret

00000ec2 <start_timer>:
}

void start_timer(void)
{
	TCE0.CNT = 0;
     ec2:	e0 e0       	ldi	r30, 0x00	; 0
     ec4:	fa e0       	ldi	r31, 0x0A	; 10
     ec6:	10 a2       	std	Z+32, r1	; 0x20
     ec8:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_OVFINTLVL_LO_gc;						//Turn on overflow interrupt
     eca:	86 81       	ldd	r24, Z+6	; 0x06
     ecc:	8c 7f       	andi	r24, 0xFC	; 252
     ece:	81 60       	ori	r24, 0x01	; 1
     ed0:	86 83       	std	Z+6, r24	; 0x06
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;																//turn on TC
     ed2:	86 e0       	ldi	r24, 0x06	; 6
     ed4:	80 83       	st	Z, r24
     ed6:	08 95       	ret

00000ed8 <write8_UART>:
} 

void write8_UART(uint8_t data)
{
	int test = 0;
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
	while(test==0)
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <write8_UART+0xe>
	{
		test = USARTE0.STATUS&(0x20);																//keep polling until the data register is ready to receive new data
     ede:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     ee2:	20 72       	andi	r18, 0x20	; 32
     ee4:	30 e0       	ldi	r19, 0x00	; 0
} 

void write8_UART(uint8_t data)
{
	int test = 0;
	while(test==0)
     ee6:	23 2b       	or	r18, r19
     ee8:	d1 f3       	breq	.-12     	; 0xede <write8_UART+0x6>
	{
		test = USARTE0.STATUS&(0x20);																//keep polling until the data register is ready to receive new data
	}
	
	USARTE0.DATA = data;																			//write the 8bits to MATLAB
     eea:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
	
	test = 0;
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
	while(test==0)
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <write8_UART+0x24>
	{
		test = USARTE0.STATUS&(0x20);																//keep polling until the data register is ready to receive new data
     ef4:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     ef8:	80 72       	andi	r24, 0x20	; 32
     efa:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	USARTE0.DATA = data;																			//write the 8bits to MATLAB
	
	test = 0;
	while(test==0)
     efc:	89 2b       	or	r24, r25
     efe:	d1 f3       	breq	.-12     	; 0xef4 <write8_UART+0x1c>
	{
		test = USARTE0.STATUS&(0x20);																//keep polling until the data register is ready to receive new data
	}
}
     f00:	08 95       	ret

00000f02 <read8_UART>:

uint8_t read8_UART(void)
{
	int test = 0;
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t garbage;
	uint8_t data;
	
	while(test==0)
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <read8_UART+0xe>
	{
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is high
     f08:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     f0c:	20 78       	andi	r18, 0x80	; 128
     f0e:	30 e0       	ldi	r19, 0x00	; 0
{
	int test = 0;
	uint8_t garbage;
	uint8_t data;
	
	while(test==0)
     f10:	21 15       	cp	r18, r1
     f12:	31 05       	cpc	r19, r1
     f14:	c9 f3       	breq	.-14     	; 0xf08 <read8_UART+0x6>
	{
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is high
	}
	
	data = USARTE0.DATA;																			//read the data from the data RX/TX register
     f16:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
	
	while(test!=0)
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <read8_UART+0x26>
	{
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is low
     f1c:	e0 ea       	ldi	r30, 0xA0	; 160
     f1e:	fa e0       	ldi	r31, 0x0A	; 10
     f20:	21 81       	ldd	r18, Z+1	; 0x01
     f22:	20 78       	andi	r18, 0x80	; 128
     f24:	30 e0       	ldi	r19, 0x00	; 0
		garbage = USARTE0.DATA;																		//read the data until register is automatically cleared
     f26:	90 81       	ld	r25, Z
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is high
	}
	
	data = USARTE0.DATA;																			//read the data from the data RX/TX register
	
	while(test!=0)
     f28:	23 2b       	or	r18, r19
     f2a:	c1 f7       	brne	.-16     	; 0xf1c <read8_UART+0x1a>
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is low
		garbage = USARTE0.DATA;																		//read the data until register is automatically cleared
	}
	
	return data;																					//returns 8bit received data
}
     f2c:	08 95       	ret

00000f2e <writeF_UART>:

void writeF_UART(float data)
{
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <writeF_UART+0x6>
     f34:	1f 92       	push	r1
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	69 83       	std	Y+1, r22	; 0x01
     f3c:	7a 83       	std	Y+2, r23	; 0x02
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t *sendarray = (uint8_t*)(&data);															//converts float to 4 separate bytes in send array
	write8_UART(sendarray[0]);																		//Sends separate bytes (LF)
     f42:	86 2f       	mov	r24, r22
     f44:	0e 94 6c 07 	call	0xed8	; 0xed8 <write8_UART>
	not_correct_delay();
	write8_UART(sendarray[1]);
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	0e 94 6c 07 	call	0xed8	; 0xed8 <write8_UART>
	not_correct_delay();
	write8_UART(sendarray[2]);
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	0e 94 6c 07 	call	0xed8	; 0xed8 <write8_UART>
	not_correct_delay();
	write8_UART(sendarray[3]);
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	0e 94 6c 07 	call	0xed8	; 0xed8 <write8_UART>
	not_correct_delay();
}
     f5a:	24 96       	adiw	r28, 0x04	; 4
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <read_ADC>:

void read_ADC(complexfloat *FFT_Array, uint16_t *Lookup_Reverse, uint16_t i, float R_Offset, float I_Offset)
{
     f66:	2f 92       	push	r2
     f68:	3f 92       	push	r3
     f6a:	4f 92       	push	r4
     f6c:	5f 92       	push	r5
     f6e:	6f 92       	push	r6
     f70:	7f 92       	push	r7
     f72:	8f 92       	push	r8
     f74:	9f 92       	push	r9
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	5c 01       	movw	r10, r24
     f8c:	1b 01       	movw	r2, r22
     f8e:	4a 01       	movw	r8, r20
     f90:	28 01       	movw	r4, r16
     f92:	39 01       	movw	r6, r18
	float ADC_R;
	
	uint8_t IR_F_A;
	uint8_t IR_F_B;
	
	ADCA.CTRLA = ADC_ENABLE_bm;																		//Enables ADCA
     f94:	a0 e0       	ldi	r26, 0x00	; 0
     f96:	b2 e0       	ldi	r27, 0x02	; 2
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	8c 93       	st	X, r24
	ADCB.CTRLA = ADC_ENABLE_bm;																		//Enables ADCB
     f9c:	e0 e4       	ldi	r30, 0x40	; 64
     f9e:	f2 e0       	ldi	r31, 0x02	; 2
     fa0:	80 83       	st	Z, r24
	
	ADCA.CTRLA |= (0x01 << 2);							 											//Start ADCA conversion CH0
     fa2:	8c 91       	ld	r24, X
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	8c 93       	st	X, r24
	ADCB.CTRLA |= (0x01 << 2);																		//Start ADCB conversion CH0
     fa8:	80 81       	ld	r24, Z
     faa:	84 60       	ori	r24, 0x04	; 4
     fac:	80 83       	st	Z, r24
	
	IR_F_A = (ADCA.INTFLAGS & (0x01));																//Debugging IR flags
     fae:	16 96       	adiw	r26, 0x06	; 6
     fb0:	8c 91       	ld	r24, X
     fb2:	81 70       	andi	r24, 0x01	; 1
	IR_F_B = (ADCB.INTFLAGS & (0x01));
     fb4:	96 81       	ldd	r25, Z+6	; 0x06
     fb6:	91 70       	andi	r25, 0x01	; 1

	while((IR_F_A != (0x1)) && (IR_F_B != (0x1)))													//Poll ADC IF
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <read_ADC+0x60>
	{
		IR_F_A = (ADCA.INTFLAGS & (0x01));															//Debugging variable for polling IR flags
     fba:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
     fbe:	81 70       	andi	r24, 0x01	; 1
		IR_F_B = (ADCB.INTFLAGS & (0x01));	
     fc0:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     fc4:	91 70       	andi	r25, 0x01	; 1
	ADCB.CTRLA |= (0x01 << 2);																		//Start ADCB conversion CH0
	
	IR_F_A = (ADCA.INTFLAGS & (0x01));																//Debugging IR flags
	IR_F_B = (ADCB.INTFLAGS & (0x01));

	while((IR_F_A != (0x1)) && (IR_F_B != (0x1)))													//Poll ADC IF
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	11 f0       	breq	.+4      	; 0xfce <read_ADC+0x68>
     fca:	91 30       	cpi	r25, 0x01	; 1
     fcc:	b1 f7       	brne	.-20     	; 0xfba <read_ADC+0x54>
	{
		IR_F_A = (ADCA.INTFLAGS & (0x01));															//Debugging variable for polling IR flags
		IR_F_B = (ADCB.INTFLAGS & (0x01));	
	}

	ADC_R = ((float)ADCA.CH0.RES) - R_Offset;														//Collect ADC value and store in Variable
     fce:	00 e0       	ldi	r16, 0x00	; 0
     fd0:	12 e0       	ldi	r17, 0x02	; 2
     fd2:	f8 01       	movw	r30, r16
     fd4:	64 a1       	ldd	r22, Z+36	; 0x24
     fd6:	75 a1       	ldd	r23, Z+37	; 0x25
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     fe0:	a3 01       	movw	r20, r6
     fe2:	92 01       	movw	r18, r4
     fe4:	0e 94 ba 09 	call	0x1374	; 0x1374 <__subsf3>
     fe8:	2b 01       	movw	r4, r22
     fea:	3c 01       	movw	r6, r24
	ADC_I = ((float)ADCB.CH0.RES) - I_Offset;
     fec:	c0 e4       	ldi	r28, 0x40	; 64
     fee:	d2 e0       	ldi	r29, 0x02	; 2
     ff0:	6c a1       	ldd	r22, Y+36	; 0x24
     ff2:	7d a1       	ldd	r23, Y+37	; 0x25
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     ffc:	a7 01       	movw	r20, r14
     ffe:	96 01       	movw	r18, r12
    1000:	0e 94 ba 09 	call	0x1374	; 0x1374 <__subsf3>

	FFT_Array[Lookup_Reverse[i]].re = (ADC_R);														//Save I[i] sample to BR location in FFT_Array
    1004:	88 0c       	add	r8, r8
    1006:	99 1c       	adc	r9, r9
    1008:	f1 01       	movw	r30, r2
    100a:	e8 0d       	add	r30, r8
    100c:	f9 1d       	adc	r31, r9
    100e:	a0 81       	ld	r26, Z
    1010:	b1 81       	ldd	r27, Z+1	; 0x01
    1012:	aa 0f       	add	r26, r26
    1014:	bb 1f       	adc	r27, r27
    1016:	aa 0f       	add	r26, r26
    1018:	bb 1f       	adc	r27, r27
    101a:	aa 0f       	add	r26, r26
    101c:	bb 1f       	adc	r27, r27
    101e:	aa 0d       	add	r26, r10
    1020:	bb 1d       	adc	r27, r11
    1022:	14 96       	adiw	r26, 0x04	; 4
    1024:	4d 92       	st	X+, r4
    1026:	5d 92       	st	X+, r5
    1028:	6d 92       	st	X+, r6
    102a:	7c 92       	st	X, r7
    102c:	17 97       	sbiw	r26, 0x07	; 7
	FFT_Array[Lookup_Reverse[i]].im = (ADC_I);														//Save Q[i] sample to BR location in FFT_Array
    102e:	20 81       	ld	r18, Z
    1030:	31 81       	ldd	r19, Z+1	; 0x01
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	f5 01       	movw	r30, r10
    1040:	e2 0f       	add	r30, r18
    1042:	f3 1f       	adc	r31, r19
    1044:	60 83       	st	Z, r22
    1046:	71 83       	std	Z+1, r23	; 0x01
    1048:	82 83       	std	Z+2, r24	; 0x02
    104a:	93 83       	std	Z+3, r25	; 0x03

	ADCA.INTFLAGS |= (0x01);																		//Reset interrupt flags ADCA
    104c:	f8 01       	movw	r30, r16
    104e:	86 81       	ldd	r24, Z+6	; 0x06
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	86 83       	std	Z+6, r24	; 0x06
	ADCB.INTFLAGS |= (0x01);																		//Reset interrupt flags ADCB
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	8e 83       	std	Y+6, r24	; 0x06
	
	ADCA.CTRLA &= (0xFE);																			//Disable ADCA
    105a:	80 81       	ld	r24, Z
    105c:	8e 7f       	andi	r24, 0xFE	; 254
    105e:	80 83       	st	Z, r24
	ADCB.CTRLA &= (0xFE);																			//Disable ADCB
    1060:	88 81       	ld	r24, Y
    1062:	8e 7f       	andi	r24, 0xFE	; 254
    1064:	88 83       	st	Y, r24
	
//	writeF_UART(ADC_R);																				//Testing: Debug print samples as float
//	writeF_UART(ADC_I);
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	7f 90       	pop	r7
    1080:	6f 90       	pop	r6
    1082:	5f 90       	pop	r5
    1084:	4f 90       	pop	r4
    1086:	3f 90       	pop	r3
    1088:	2f 90       	pop	r2
    108a:	08 95       	ret

0000108c <not_correct_delay>:

void not_correct_delay(void)
{
	uint32_t i = 0;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	dc 01       	movw	r26, r24
	while(i < 500000)
    1092:	03 c0       	rjmp	.+6      	; 0x109a <not_correct_delay+0xe>
	{
		i++;
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	a1 1d       	adc	r26, r1
    1098:	b1 1d       	adc	r27, r1
}

void not_correct_delay(void)
{
	uint32_t i = 0;
	while(i < 500000)
    109a:	80 32       	cpi	r24, 0x20	; 32
    109c:	21 ea       	ldi	r18, 0xA1	; 161
    109e:	92 07       	cpc	r25, r18
    10a0:	27 e0       	ldi	r18, 0x07	; 7
    10a2:	a2 07       	cpc	r26, r18
    10a4:	b1 05       	cpc	r27, r1
    10a6:	b0 f3       	brcs	.-20     	; 0x1094 <not_correct_delay+0x8>
	{
		i++;
	}
}
    10a8:	08 95       	ret

000010aa <disable_radar>:

void disable_radar(void)
{
	PORTA_OUTSET = PIN1_bm;																			//Disable radar module
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	DACB.CTRLA = (0x00);																			//Disable DAC to save power
    10b0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__TEXT_REGION_LENGTH__+0x7be320>
    10b4:	08 95       	ret

000010b6 <enable_radar>:
}

void enable_radar(void)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
	uint16_t rand_frequency;																		//Variable for storing random center frequency
	PORTA_OUTCLR = PIN1_bm;																			//Enable radar module
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
	DACB.CTRLA |= (0x05);																			//Enables channel 0 DAC
    10c0:	c0 e2       	ldi	r28, 0x20	; 32
    10c2:	d3 e0       	ldi	r29, 0x03	; 3
    10c4:	88 81       	ld	r24, Y
    10c6:	85 60       	ori	r24, 0x05	; 5
    10c8:	88 83       	st	Y, r24
	
	not_correct_delay();																			//Give time for radar oscillator to settle
	
	rand_frequency = rand();																		//Get random number 16bit number
    10ca:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <rand>
	DACB.CH0DATA = rand_frequency;																	//Set DAC output value to the random number
    10ce:	88 8f       	std	Y+24, r24	; 0x18
    10d0:	99 8f       	std	Y+25, r25	; 0x19
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <__vector_47>:
float I_Offset = 3495;															//Imag channel ADC offset



ISR(TCE0_OVF_vect)																//When TC overflows (@ 5kHz interval)
{
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	0b b6       	in	r0, 0x3b	; 59
    10e4:	0f 92       	push	r0
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
	read_ADC(FFT_Array, Reverse_Lookup, count, R_Offset, I_Offset);				//Gets IQ samples and decimates in time
    110a:	c0 90 04 20 	lds	r12, 0x2004	; 0x802004 <I_Offset>
    110e:	d0 90 05 20 	lds	r13, 0x2005	; 0x802005 <I_Offset+0x1>
    1112:	e0 90 06 20 	lds	r14, 0x2006	; 0x802006 <I_Offset+0x2>
    1116:	f0 90 07 20 	lds	r15, 0x2007	; 0x802007 <I_Offset+0x3>
    111a:	00 91 08 20 	lds	r16, 0x2008	; 0x802008 <R_Offset>
    111e:	10 91 09 20 	lds	r17, 0x2009	; 0x802009 <R_Offset+0x1>
    1122:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <R_Offset+0x2>
    1126:	30 91 0b 20 	lds	r19, 0x200B	; 0x80200b <R_Offset+0x3>
    112a:	40 91 0f 20 	lds	r20, 0x200F	; 0x80200f <count>
    112e:	50 91 10 20 	lds	r21, 0x2010	; 0x802010 <count+0x1>
    1132:	61 e1       	ldi	r22, 0x11	; 17
    1134:	74 e4       	ldi	r23, 0x44	; 68
    1136:	81 e1       	ldi	r24, 0x11	; 17
    1138:	94 e3       	ldi	r25, 0x34	; 52
    113a:	0e 94 b3 07 	call	0xf66	; 0xf66 <read_ADC>
	count++;																	//Add sample count by one
    113e:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <count>
    1142:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <count+0x1>
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	80 93 0f 20 	sts	0x200F, r24	; 0x80200f <count>
    114c:	90 93 10 20 	sts	0x2010, r25	; 0x802010 <count+0x1>
}
    1150:	ff 91       	pop	r31
    1152:	ef 91       	pop	r30
    1154:	bf 91       	pop	r27
    1156:	af 91       	pop	r26
    1158:	9f 91       	pop	r25
    115a:	8f 91       	pop	r24
    115c:	7f 91       	pop	r23
    115e:	6f 91       	pop	r22
    1160:	5f 91       	pop	r21
    1162:	4f 91       	pop	r20
    1164:	3f 91       	pop	r19
    1166:	2f 91       	pop	r18
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	0f 90       	pop	r0
    1176:	0b be       	out	0x3b, r0	; 59
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <main>:



int main(void)
{
	init_CLK();																	//Set F_CPU to 32MHz
    1182:	0e 94 51 09 	call	0x12a2	; 0x12a2 <init_CLK>
	init_TIMER();																//Set timer for sampling @ fixed frequency
    1186:	0e 94 63 09 	call	0x12c6	; 0x12c6 <init_TIMER>
	init_UART();																//Debug UART 115200Baud (PE2: RX, PE3 TX)
    118a:	0e 94 3a 09 	call	0x1274	; 0x1274 <init_UART>
	init_IO();																	//Setup of I/O pins
    118e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <init_IO>
	init_ADC();																	//Set registers for internal ADC
    1192:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <init_ADC>
	init_DAC();																	//Set registers for internal DAC
    1196:	0e 94 b4 09 	call	0x1368	; 0x1368 <init_DAC>
	
	sei();																		//Global interrupt mask
    119a:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;												//Set low level interrupts
    119c:	e0 ea       	ldi	r30, 0xA0	; 160
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	81 60       	ori	r24, 0x01	; 1
    11a4:	82 83       	std	Z+2, r24	; 0x02
	
	init_avr_Wlookup(W);														//Creates heap lookup table for twiddle factors
    11a6:	81 e1       	ldi	r24, 0x11	; 17
    11a8:	90 e2       	ldi	r25, 0x20	; 32
    11aa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <init_avr_Wlookup>
	init_BRLookup(Reverse_Lookup);												//Creates heap lookup table for bit reverse order (decimation order)
    11ae:	81 e1       	ldi	r24, 0x11	; 17
    11b0:	94 e4       	ldi	r25, 0x44	; 68
    11b2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <init_BRLookup>
	init_Window(Window);														//Creates heap lookup table for the Window function
    11b6:	81 e1       	ldi	r24, 0x11	; 17
    11b8:	98 e2       	ldi	r25, 0x28	; 40
    11ba:	0e 94 9c 05 	call	0xb38	; 0xb38 <init_Window>
	
	
	while(1)
	{

		if(ReadyFInstruction == 1)
    11be:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <ReadyFInstruction>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	21 f5       	brne	.+72     	; 0x120e <main+0x8c>
		{
			Instruction = read8_UART();
    11c6:	0e 94 81 07 	call	0xf02	; 0xf02 <read8_UART>
    11ca:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
			
			switch (Instruction)
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <main+0x56>
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	61 f0       	breq	.+24     	; 0x11ee <main+0x6c>
    11d6:	16 c0       	rjmp	.+44     	; 0x1204 <main+0x82>
			{
				case 1:															//Used to calibration command now doubles speed
					enable_radar();												//Gets radar ready to use (!module has startup time)
    11d8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <enable_radar>
					not_correct_delay();										//add slight delay
    11dc:	0e 94 46 08 	call	0x108c	; 0x108c <not_correct_delay>
					ReadyFInstruction = 0;										//Set status to busy
    11e0:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <ReadyFInstruction>
					Instruction = 0;											//Reset instruction
    11e4:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <__data_end>
					start_timer();												//Start taking samples
    11e8:	0e 94 61 07 	call	0xec2	; 0xec2 <start_timer>
					break;
    11ec:	10 c0       	rjmp	.+32     	; 0x120e <main+0x8c>
				
				case 2:															//Find speed
					enable_radar();												//Gets radar ready to use (!module has startup time)
    11ee:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <enable_radar>
					not_correct_delay();										//add slight delay
    11f2:	0e 94 46 08 	call	0x108c	; 0x108c <not_correct_delay>
					ReadyFInstruction = 0;										//Set status to busy
    11f6:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <ReadyFInstruction>
					Instruction = 0;											//Reset instruction
    11fa:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <__data_end>
					start_timer();												//start taking samples
    11fe:	0e 94 61 07 	call	0xec2	; 0xec2 <start_timer>
					break;
    1202:	05 c0       	rjmp	.+10     	; 0x120e <main+0x8c>
					
				default:
					ReadyFInstruction = 1;										//In case of error; take new Instruction
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <ReadyFInstruction>
					Instruction = 0;											//Reset Instruction	
    120a:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <__data_end>
					break;
			}
		}
		
		
		if(count == N)															//When the FFT array is full of samples perform calculations
    120e:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <count>
    1212:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <count+0x1>
    1216:	81 15       	cp	r24, r1
    1218:	92 40       	sbci	r25, 0x02	; 2
    121a:	89 f6       	brne	.-94     	; 0x11be <main+0x3c>
		{
				stop_timer();
    121c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <stop_timer>
				disable_radar();												//Save some power by disabling radar module and DAC													//Stop sampling
    1220:	0e 94 55 08 	call	0x10aa	; 0x10aa <disable_radar>
				apply_avr_Window(FFT_Array, Window, Reverse_Lookup);			//Apply Blackman-Harris window
    1224:	41 e1       	ldi	r20, 0x11	; 17
    1226:	54 e4       	ldi	r21, 0x44	; 68
    1228:	61 e1       	ldi	r22, 0x11	; 17
    122a:	78 e2       	ldi	r23, 0x28	; 40
    122c:	81 e1       	ldi	r24, 0x11	; 17
    122e:	94 e3       	ldi	r25, 0x34	; 52
    1230:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <apply_avr_Window>
				calc_avr_FFT(FFT_Array, W);										//Calculates Radix2-FFT in pace
    1234:	61 e1       	ldi	r22, 0x11	; 17
    1236:	70 e2       	ldi	r23, 0x20	; 32
    1238:	81 e1       	ldi	r24, 0x11	; 17
    123a:	94 e3       	ldi	r25, 0x34	; 52
    123c:	0e 94 84 04 	call	0x908	; 0x908 <calc_avr_FFT>
				Compute_ABS_spectrum(FFT_Array, DSP_Array);						//Calculates and prints spectrum
    1240:	61 e1       	ldi	r22, 0x11	; 17
    1242:	7c e2       	ldi	r23, 0x2C	; 44
    1244:	81 e1       	ldi	r24, 0x11	; 17
    1246:	94 e3       	ldi	r25, 0x34	; 52
    1248:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Compute_ABS_spectrum>
				speed = Get_speed(DSP_Array);									//Finds peak, calculates Doppler shift and returns speed							
    124c:	81 e1       	ldi	r24, 0x11	; 17
    124e:	9c e2       	ldi	r25, 0x2C	; 44
    1250:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Get_speed>
				writeF_UART(speed);												//Write speed to MATLAB in kph
    1254:	0e 94 97 07 	call	0xf2e	; 0xf2e <writeF_UART>
		
				count = 0;														//Reset count
    1258:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <count>
    125c:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <count+0x1>
				ReadyFInstruction = 1;											//Get ready for new instruction
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <ReadyFInstruction>
				writeF_UART(0.12345);											//Write checksum to MATLAB
    1266:	6b e5       	ldi	r22, 0x5B	; 91
    1268:	73 ed       	ldi	r23, 0xD3	; 211
    126a:	8c ef       	ldi	r24, 0xFC	; 252
    126c:	9d e3       	ldi	r25, 0x3D	; 61
    126e:	0e 94 97 07 	call	0xf2e	; 0xf2e <writeF_UART>
    1272:	a5 cf       	rjmp	.-182    	; 0x11be <main+0x3c>

00001274 <init_UART>:
#include "start.h"
#include "avr/io.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
    127a:	88 e0       	ldi	r24, 0x08	; 8
    127c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
    1280:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x0D<<4);										//Set BSCALE to -3 for baud 115200
    1284:	e0 ea       	ldi	r30, 0xA0	; 160
    1286:	fa e0       	ldi	r31, 0x0A	; 10
    1288:	87 81       	ldd	r24, Z+7	; 0x07
    128a:	80 6d       	ori	r24, 0xD0	; 208
    128c:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x83);										//Set BSEL to 131 for baud 115200
    128e:	86 81       	ldd	r24, Z+6	; 0x06
    1290:	83 68       	ori	r24, 0x83	; 131
    1292:	86 83       	std	Z+6, r24	; 0x06
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
    1294:	85 81       	ldd	r24, Z+5	; 0x05
    1296:	83 60       	ori	r24, 0x03	; 3
    1298:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
    129a:	84 81       	ldd	r24, Z+4	; 0x04
    129c:	88 61       	ori	r24, 0x18	; 24
    129e:	84 83       	std	Z+4, r24	; 0x04
    12a0:	08 95       	ret

000012a2 <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
    12a2:	e0 e5       	ldi	r30, 0x50	; 80
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	82 60       	ori	r24, 0x02	; 2
    12aa:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
    12ac:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
    12b0:	81 ff       	sbrs	r24, 1
    12b2:	fc cf       	rjmp	.-8      	; 0x12ac <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
    12b4:	88 ed       	ldi	r24, 0xD8	; 216
    12b6:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
    12b8:	e0 e4       	ldi	r30, 0x40	; 64
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
    12c0:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
    12c2:	11 82       	std	Z+1, r1	; 0x01
    12c4:	08 95       	ret

000012c6 <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
    12c6:	e0 e0       	ldi	r30, 0x00	; 0
    12c8:	fa e0       	ldi	r31, 0x0A	; 10
    12ca:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
    12cc:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PER = 0x19;													//Set overflow frequency to 5kHz = ((F_CPU/256)/(PER))
    12d2:	89 e1       	ldi	r24, 0x19	; 25
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	86 a3       	std	Z+38, r24	; 0x26
    12d8:	97 a3       	std	Z+39, r25	; 0x27
    12da:	08 95       	ret

000012dc <init_IO>:
}

void init_IO(void)
{
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
    12dc:	e1 e0       	ldi	r30, 0x01	; 1
    12de:	f6 e0       	ldi	r31, 0x06	; 6
    12e0:	80 e8       	ldi	r24, 0x80	; 128
    12e2:	80 83       	st	Z, r24
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
    12e4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
    12e8:	80 e1       	ldi	r24, 0x10	; 16
    12ea:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	
	PORTA_DIRSET = PIN1_bm;												//Radar /enable pin
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	80 83       	st	Z, r24
	PORTA_OUTCLR = PIN1_bm;												//Enable radar
    12f2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
    12f6:	08 95       	ret

000012f8 <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//Set PA0 as input for I channel
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7be602>
	PORTB_DIRCLR = PIN0_bm;												//Set PB0 as input for Q channel
    12fe:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x7be622>
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
    1302:	a0 e0       	ldi	r26, 0x00	; 0
    1304:	b2 e0       	ldi	r27, 0x02	; 2
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	14 96       	adiw	r26, 0x04	; 4
    130a:	8c 93       	st	X, r24
    130c:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
    130e:	e0 e4       	ldi	r30, 0x40	; 64
    1310:	f2 e0       	ldi	r31, 0x02	; 2
    1312:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
    1314:	12 96       	adiw	r26, 0x02	; 2
    1316:	8c 91       	ld	r24, X
    1318:	12 97       	sbiw	r26, 0x02	; 2
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	8c 93       	st	X, r24
    131e:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
    1324:	12 96       	adiw	r26, 0x02	; 2
    1326:	8c 91       	ld	r24, X
    1328:	12 97       	sbiw	r26, 0x02	; 2
    132a:	80 61       	ori	r24, 0x10	; 16
    132c:	12 96       	adiw	r26, 0x02	; 2
    132e:	8c 93       	st	X, r24
    1330:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	80 61       	ori	r24, 0x10	; 16
    1336:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 single ended input
    1338:	90 96       	adiw	r26, 0x20	; 32
    133a:	8c 91       	ld	r24, X
    133c:	90 97       	sbiw	r26, 0x20	; 32
    133e:	81 60       	ori	r24, 0x01	; 1
    1340:	90 96       	adiw	r26, 0x20	; 32
    1342:	8c 93       	st	X, r24
    1344:	90 97       	sbiw	r26, 0x20	; 32
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 single ended input
    1346:	80 a1       	ldd	r24, Z+32	; 0x20
    1348:	81 60       	ori	r24, 0x01	; 1
    134a:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
    134c:	91 96       	adiw	r26, 0x21	; 33
    134e:	8c 91       	ld	r24, X
    1350:	91 97       	sbiw	r26, 0x21	; 33
    1352:	87 60       	ori	r24, 0x07	; 7
    1354:	91 96       	adiw	r26, 0x21	; 33
    1356:	8c 93       	st	X, r24
    1358:	91 97       	sbiw	r26, 0x21	; 33
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
    135a:	81 a1       	ldd	r24, Z+33	; 0x21
    135c:	87 60       	ori	r24, 0x07	; 7
    135e:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCA CH0 to pin A0 as input for I channel
    1360:	91 96       	adiw	r26, 0x21	; 33
    1362:	1c 92       	st	X, r1
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCB CH0 to pin B0 as input for Q channel
    1364:	11 a2       	std	Z+33, r1	; 0x21
    1366:	08 95       	ret

00001368 <init_DAC>:
}

void init_DAC(void)
{
	DACB.CTRLC = DAC_REFSEL_AVCC_gc;									//set DAC reference to internal 1V
    1368:	e0 e2       	ldi	r30, 0x20	; 32
    136a:	f3 e0       	ldi	r31, 0x03	; 3
    136c:	88 e0       	ldi	r24, 0x08	; 8
    136e:	82 83       	std	Z+2, r24	; 0x02
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;									//set DAC output to channel 0
    1370:	11 82       	std	Z+1, r1	; 0x01
    1372:	08 95       	ret

00001374 <__subsf3>:
    1374:	50 58       	subi	r21, 0x80	; 128

00001376 <__addsf3>:
    1376:	bb 27       	eor	r27, r27
    1378:	aa 27       	eor	r26, r26
    137a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__addsf3x>
    137e:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_round>
    1382:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fp_pscA>
    1386:	38 f0       	brcs	.+14     	; 0x1396 <__addsf3+0x20>
    1388:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fp_pscB>
    138c:	20 f0       	brcs	.+8      	; 0x1396 <__addsf3+0x20>
    138e:	39 f4       	brne	.+14     	; 0x139e <__addsf3+0x28>
    1390:	9f 3f       	cpi	r25, 0xFF	; 255
    1392:	19 f4       	brne	.+6      	; 0x139a <__addsf3+0x24>
    1394:	26 f4       	brtc	.+8      	; 0x139e <__addsf3+0x28>
    1396:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__fp_nan>
    139a:	0e f4       	brtc	.+2      	; 0x139e <__addsf3+0x28>
    139c:	e0 95       	com	r30
    139e:	e7 fb       	bst	r30, 7
    13a0:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__fp_inf>

000013a4 <__addsf3x>:
    13a4:	e9 2f       	mov	r30, r25
    13a6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__fp_split3>
    13aa:	58 f3       	brcs	.-42     	; 0x1382 <__addsf3+0xc>
    13ac:	ba 17       	cp	r27, r26
    13ae:	62 07       	cpc	r22, r18
    13b0:	73 07       	cpc	r23, r19
    13b2:	84 07       	cpc	r24, r20
    13b4:	95 07       	cpc	r25, r21
    13b6:	20 f0       	brcs	.+8      	; 0x13c0 <__addsf3x+0x1c>
    13b8:	79 f4       	brne	.+30     	; 0x13d8 <__addsf3x+0x34>
    13ba:	a6 f5       	brtc	.+104    	; 0x1424 <__addsf3x+0x80>
    13bc:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__fp_zero>
    13c0:	0e f4       	brtc	.+2      	; 0x13c4 <__addsf3x+0x20>
    13c2:	e0 95       	com	r30
    13c4:	0b 2e       	mov	r0, r27
    13c6:	ba 2f       	mov	r27, r26
    13c8:	a0 2d       	mov	r26, r0
    13ca:	0b 01       	movw	r0, r22
    13cc:	b9 01       	movw	r22, r18
    13ce:	90 01       	movw	r18, r0
    13d0:	0c 01       	movw	r0, r24
    13d2:	ca 01       	movw	r24, r20
    13d4:	a0 01       	movw	r20, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	ff 27       	eor	r31, r31
    13da:	59 1b       	sub	r21, r25
    13dc:	99 f0       	breq	.+38     	; 0x1404 <__addsf3x+0x60>
    13de:	59 3f       	cpi	r21, 0xF9	; 249
    13e0:	50 f4       	brcc	.+20     	; 0x13f6 <__addsf3x+0x52>
    13e2:	50 3e       	cpi	r21, 0xE0	; 224
    13e4:	68 f1       	brcs	.+90     	; 0x1440 <__addsf3x+0x9c>
    13e6:	1a 16       	cp	r1, r26
    13e8:	f0 40       	sbci	r31, 0x00	; 0
    13ea:	a2 2f       	mov	r26, r18
    13ec:	23 2f       	mov	r18, r19
    13ee:	34 2f       	mov	r19, r20
    13f0:	44 27       	eor	r20, r20
    13f2:	58 5f       	subi	r21, 0xF8	; 248
    13f4:	f3 cf       	rjmp	.-26     	; 0x13dc <__addsf3x+0x38>
    13f6:	46 95       	lsr	r20
    13f8:	37 95       	ror	r19
    13fa:	27 95       	ror	r18
    13fc:	a7 95       	ror	r26
    13fe:	f0 40       	sbci	r31, 0x00	; 0
    1400:	53 95       	inc	r21
    1402:	c9 f7       	brne	.-14     	; 0x13f6 <__addsf3x+0x52>
    1404:	7e f4       	brtc	.+30     	; 0x1424 <__addsf3x+0x80>
    1406:	1f 16       	cp	r1, r31
    1408:	ba 0b       	sbc	r27, r26
    140a:	62 0b       	sbc	r22, r18
    140c:	73 0b       	sbc	r23, r19
    140e:	84 0b       	sbc	r24, r20
    1410:	ba f0       	brmi	.+46     	; 0x1440 <__addsf3x+0x9c>
    1412:	91 50       	subi	r25, 0x01	; 1
    1414:	a1 f0       	breq	.+40     	; 0x143e <__addsf3x+0x9a>
    1416:	ff 0f       	add	r31, r31
    1418:	bb 1f       	adc	r27, r27
    141a:	66 1f       	adc	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	c2 f7       	brpl	.-16     	; 0x1412 <__addsf3x+0x6e>
    1422:	0e c0       	rjmp	.+28     	; 0x1440 <__addsf3x+0x9c>
    1424:	ba 0f       	add	r27, r26
    1426:	62 1f       	adc	r22, r18
    1428:	73 1f       	adc	r23, r19
    142a:	84 1f       	adc	r24, r20
    142c:	48 f4       	brcc	.+18     	; 0x1440 <__addsf3x+0x9c>
    142e:	87 95       	ror	r24
    1430:	77 95       	ror	r23
    1432:	67 95       	ror	r22
    1434:	b7 95       	ror	r27
    1436:	f7 95       	ror	r31
    1438:	9e 3f       	cpi	r25, 0xFE	; 254
    143a:	08 f0       	brcs	.+2      	; 0x143e <__addsf3x+0x9a>
    143c:	b0 cf       	rjmp	.-160    	; 0x139e <__addsf3+0x28>
    143e:	93 95       	inc	r25
    1440:	88 0f       	add	r24, r24
    1442:	08 f0       	brcs	.+2      	; 0x1446 <__addsf3x+0xa2>
    1444:	99 27       	eor	r25, r25
    1446:	ee 0f       	add	r30, r30
    1448:	97 95       	ror	r25
    144a:	87 95       	ror	r24
    144c:	08 95       	ret

0000144e <__cmpsf2>:
    144e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__fp_cmp>
    1452:	08 f4       	brcc	.+2      	; 0x1456 <__cmpsf2+0x8>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	08 95       	ret

00001458 <cos>:
    1458:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_rempio2>
    145c:	e3 95       	inc	r30
    145e:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_sinus>

00001462 <__divsf3>:
    1462:	0e 94 45 0a 	call	0x148a	; 0x148a <__divsf3x>
    1466:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_round>
    146a:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fp_pscB>
    146e:	58 f0       	brcs	.+22     	; 0x1486 <__divsf3+0x24>
    1470:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fp_pscA>
    1474:	40 f0       	brcs	.+16     	; 0x1486 <__divsf3+0x24>
    1476:	29 f4       	brne	.+10     	; 0x1482 <__divsf3+0x20>
    1478:	5f 3f       	cpi	r21, 0xFF	; 255
    147a:	29 f0       	breq	.+10     	; 0x1486 <__divsf3+0x24>
    147c:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__fp_inf>
    1480:	51 11       	cpse	r21, r1
    1482:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_szero>
    1486:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__fp_nan>

0000148a <__divsf3x>:
    148a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__fp_split3>
    148e:	68 f3       	brcs	.-38     	; 0x146a <__divsf3+0x8>

00001490 <__divsf3_pse>:
    1490:	99 23       	and	r25, r25
    1492:	b1 f3       	breq	.-20     	; 0x1480 <__divsf3+0x1e>
    1494:	55 23       	and	r21, r21
    1496:	91 f3       	breq	.-28     	; 0x147c <__divsf3+0x1a>
    1498:	95 1b       	sub	r25, r21
    149a:	55 0b       	sbc	r21, r21
    149c:	bb 27       	eor	r27, r27
    149e:	aa 27       	eor	r26, r26
    14a0:	62 17       	cp	r22, r18
    14a2:	73 07       	cpc	r23, r19
    14a4:	84 07       	cpc	r24, r20
    14a6:	38 f0       	brcs	.+14     	; 0x14b6 <__divsf3_pse+0x26>
    14a8:	9f 5f       	subi	r25, 0xFF	; 255
    14aa:	5f 4f       	sbci	r21, 0xFF	; 255
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	44 1f       	adc	r20, r20
    14b2:	aa 1f       	adc	r26, r26
    14b4:	a9 f3       	breq	.-22     	; 0x14a0 <__divsf3_pse+0x10>
    14b6:	35 d0       	rcall	.+106    	; 0x1522 <__divsf3_pse+0x92>
    14b8:	0e 2e       	mov	r0, r30
    14ba:	3a f0       	brmi	.+14     	; 0x14ca <__divsf3_pse+0x3a>
    14bc:	e0 e8       	ldi	r30, 0x80	; 128
    14be:	32 d0       	rcall	.+100    	; 0x1524 <__divsf3_pse+0x94>
    14c0:	91 50       	subi	r25, 0x01	; 1
    14c2:	50 40       	sbci	r21, 0x00	; 0
    14c4:	e6 95       	lsr	r30
    14c6:	00 1c       	adc	r0, r0
    14c8:	ca f7       	brpl	.-14     	; 0x14bc <__divsf3_pse+0x2c>
    14ca:	2b d0       	rcall	.+86     	; 0x1522 <__divsf3_pse+0x92>
    14cc:	fe 2f       	mov	r31, r30
    14ce:	29 d0       	rcall	.+82     	; 0x1522 <__divsf3_pse+0x92>
    14d0:	66 0f       	add	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	88 1f       	adc	r24, r24
    14d6:	bb 1f       	adc	r27, r27
    14d8:	26 17       	cp	r18, r22
    14da:	37 07       	cpc	r19, r23
    14dc:	48 07       	cpc	r20, r24
    14de:	ab 07       	cpc	r26, r27
    14e0:	b0 e8       	ldi	r27, 0x80	; 128
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <__divsf3_pse+0x56>
    14e4:	bb 0b       	sbc	r27, r27
    14e6:	80 2d       	mov	r24, r0
    14e8:	bf 01       	movw	r22, r30
    14ea:	ff 27       	eor	r31, r31
    14ec:	93 58       	subi	r25, 0x83	; 131
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	3a f0       	brmi	.+14     	; 0x1500 <__divsf3_pse+0x70>
    14f2:	9e 3f       	cpi	r25, 0xFE	; 254
    14f4:	51 05       	cpc	r21, r1
    14f6:	78 f0       	brcs	.+30     	; 0x1516 <__divsf3_pse+0x86>
    14f8:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__fp_inf>
    14fc:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_szero>
    1500:	5f 3f       	cpi	r21, 0xFF	; 255
    1502:	e4 f3       	brlt	.-8      	; 0x14fc <__divsf3_pse+0x6c>
    1504:	98 3e       	cpi	r25, 0xE8	; 232
    1506:	d4 f3       	brlt	.-12     	; 0x14fc <__divsf3_pse+0x6c>
    1508:	86 95       	lsr	r24
    150a:	77 95       	ror	r23
    150c:	67 95       	ror	r22
    150e:	b7 95       	ror	r27
    1510:	f7 95       	ror	r31
    1512:	9f 5f       	subi	r25, 0xFF	; 255
    1514:	c9 f7       	brne	.-14     	; 0x1508 <__divsf3_pse+0x78>
    1516:	88 0f       	add	r24, r24
    1518:	91 1d       	adc	r25, r1
    151a:	96 95       	lsr	r25
    151c:	87 95       	ror	r24
    151e:	97 f9       	bld	r25, 7
    1520:	08 95       	ret
    1522:	e1 e0       	ldi	r30, 0x01	; 1
    1524:	66 0f       	add	r22, r22
    1526:	77 1f       	adc	r23, r23
    1528:	88 1f       	adc	r24, r24
    152a:	bb 1f       	adc	r27, r27
    152c:	62 17       	cp	r22, r18
    152e:	73 07       	cpc	r23, r19
    1530:	84 07       	cpc	r24, r20
    1532:	ba 07       	cpc	r27, r26
    1534:	20 f0       	brcs	.+8      	; 0x153e <__divsf3_pse+0xae>
    1536:	62 1b       	sub	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	ba 0b       	sbc	r27, r26
    153e:	ee 1f       	adc	r30, r30
    1540:	88 f7       	brcc	.-30     	; 0x1524 <__divsf3_pse+0x94>
    1542:	e0 95       	com	r30
    1544:	08 95       	ret

00001546 <__floatunsisf>:
    1546:	e8 94       	clt
    1548:	09 c0       	rjmp	.+18     	; 0x155c <__floatsisf+0x12>

0000154a <__floatsisf>:
    154a:	97 fb       	bst	r25, 7
    154c:	3e f4       	brtc	.+14     	; 0x155c <__floatsisf+0x12>
    154e:	90 95       	com	r25
    1550:	80 95       	com	r24
    1552:	70 95       	com	r23
    1554:	61 95       	neg	r22
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8f 4f       	sbci	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	99 23       	and	r25, r25
    155e:	a9 f0       	breq	.+42     	; 0x158a <__floatsisf+0x40>
    1560:	f9 2f       	mov	r31, r25
    1562:	96 e9       	ldi	r25, 0x96	; 150
    1564:	bb 27       	eor	r27, r27
    1566:	93 95       	inc	r25
    1568:	f6 95       	lsr	r31
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f1 11       	cpse	r31, r1
    1574:	f8 cf       	rjmp	.-16     	; 0x1566 <__floatsisf+0x1c>
    1576:	fa f4       	brpl	.+62     	; 0x15b6 <__floatsisf+0x6c>
    1578:	bb 0f       	add	r27, r27
    157a:	11 f4       	brne	.+4      	; 0x1580 <__floatsisf+0x36>
    157c:	60 ff       	sbrs	r22, 0
    157e:	1b c0       	rjmp	.+54     	; 0x15b6 <__floatsisf+0x6c>
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <__floatsisf+0x6c>
    158a:	88 23       	and	r24, r24
    158c:	11 f0       	breq	.+4      	; 0x1592 <__floatsisf+0x48>
    158e:	96 e9       	ldi	r25, 0x96	; 150
    1590:	11 c0       	rjmp	.+34     	; 0x15b4 <__floatsisf+0x6a>
    1592:	77 23       	and	r23, r23
    1594:	21 f0       	breq	.+8      	; 0x159e <__floatsisf+0x54>
    1596:	9e e8       	ldi	r25, 0x8E	; 142
    1598:	87 2f       	mov	r24, r23
    159a:	76 2f       	mov	r23, r22
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <__floatsisf+0x5e>
    159e:	66 23       	and	r22, r22
    15a0:	71 f0       	breq	.+28     	; 0x15be <__floatsisf+0x74>
    15a2:	96 e8       	ldi	r25, 0x86	; 134
    15a4:	86 2f       	mov	r24, r22
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	2a f0       	brmi	.+10     	; 0x15b6 <__floatsisf+0x6c>
    15ac:	9a 95       	dec	r25
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	da f7       	brpl	.-10     	; 0x15ac <__floatsisf+0x62>
    15b6:	88 0f       	add	r24, r24
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <__fp_cmp>:
    15c0:	99 0f       	add	r25, r25
    15c2:	00 08       	sbc	r0, r0
    15c4:	55 0f       	add	r21, r21
    15c6:	aa 0b       	sbc	r26, r26
    15c8:	e0 e8       	ldi	r30, 0x80	; 128
    15ca:	fe ef       	ldi	r31, 0xFE	; 254
    15cc:	16 16       	cp	r1, r22
    15ce:	17 06       	cpc	r1, r23
    15d0:	e8 07       	cpc	r30, r24
    15d2:	f9 07       	cpc	r31, r25
    15d4:	c0 f0       	brcs	.+48     	; 0x1606 <__fp_cmp+0x46>
    15d6:	12 16       	cp	r1, r18
    15d8:	13 06       	cpc	r1, r19
    15da:	e4 07       	cpc	r30, r20
    15dc:	f5 07       	cpc	r31, r21
    15de:	98 f0       	brcs	.+38     	; 0x1606 <__fp_cmp+0x46>
    15e0:	62 1b       	sub	r22, r18
    15e2:	73 0b       	sbc	r23, r19
    15e4:	84 0b       	sbc	r24, r20
    15e6:	95 0b       	sbc	r25, r21
    15e8:	39 f4       	brne	.+14     	; 0x15f8 <__fp_cmp+0x38>
    15ea:	0a 26       	eor	r0, r26
    15ec:	61 f0       	breq	.+24     	; 0x1606 <__fp_cmp+0x46>
    15ee:	23 2b       	or	r18, r19
    15f0:	24 2b       	or	r18, r20
    15f2:	25 2b       	or	r18, r21
    15f4:	21 f4       	brne	.+8      	; 0x15fe <__fp_cmp+0x3e>
    15f6:	08 95       	ret
    15f8:	0a 26       	eor	r0, r26
    15fa:	09 f4       	brne	.+2      	; 0x15fe <__fp_cmp+0x3e>
    15fc:	a1 40       	sbci	r26, 0x01	; 1
    15fe:	a6 95       	lsr	r26
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	81 1d       	adc	r24, r1
    1604:	81 1d       	adc	r24, r1
    1606:	08 95       	ret

00001608 <__fp_inf>:
    1608:	97 f9       	bld	r25, 7
    160a:	9f 67       	ori	r25, 0x7F	; 127
    160c:	80 e8       	ldi	r24, 0x80	; 128
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	08 95       	ret

00001614 <__fp_nan>:
    1614:	9f ef       	ldi	r25, 0xFF	; 255
    1616:	80 ec       	ldi	r24, 0xC0	; 192
    1618:	08 95       	ret

0000161a <__fp_pscA>:
    161a:	00 24       	eor	r0, r0
    161c:	0a 94       	dec	r0
    161e:	16 16       	cp	r1, r22
    1620:	17 06       	cpc	r1, r23
    1622:	18 06       	cpc	r1, r24
    1624:	09 06       	cpc	r0, r25
    1626:	08 95       	ret

00001628 <__fp_pscB>:
    1628:	00 24       	eor	r0, r0
    162a:	0a 94       	dec	r0
    162c:	12 16       	cp	r1, r18
    162e:	13 06       	cpc	r1, r19
    1630:	14 06       	cpc	r1, r20
    1632:	05 06       	cpc	r0, r21
    1634:	08 95       	ret
    1636:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__fp_nan>

0000163a <__fp_rempio2>:
    163a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__fp_splitA>
    163e:	d8 f3       	brcs	.-10     	; 0x1636 <__fp_pscB+0xe>
    1640:	e8 94       	clt
    1642:	e0 e0       	ldi	r30, 0x00	; 0
    1644:	bb 27       	eor	r27, r27
    1646:	9f 57       	subi	r25, 0x7F	; 127
    1648:	f0 f0       	brcs	.+60     	; 0x1686 <__fp_rempio2+0x4c>
    164a:	2a ed       	ldi	r18, 0xDA	; 218
    164c:	3f e0       	ldi	r19, 0x0F	; 15
    164e:	49 ec       	ldi	r20, 0xC9	; 201
    1650:	06 c0       	rjmp	.+12     	; 0x165e <__fp_rempio2+0x24>
    1652:	ee 0f       	add	r30, r30
    1654:	bb 0f       	add	r27, r27
    1656:	66 1f       	adc	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	28 f0       	brcs	.+10     	; 0x1668 <__fp_rempio2+0x2e>
    165e:	b2 3a       	cpi	r27, 0xA2	; 162
    1660:	62 07       	cpc	r22, r18
    1662:	73 07       	cpc	r23, r19
    1664:	84 07       	cpc	r24, r20
    1666:	28 f0       	brcs	.+10     	; 0x1672 <__fp_rempio2+0x38>
    1668:	b2 5a       	subi	r27, 0xA2	; 162
    166a:	62 0b       	sbc	r22, r18
    166c:	73 0b       	sbc	r23, r19
    166e:	84 0b       	sbc	r24, r20
    1670:	e3 95       	inc	r30
    1672:	9a 95       	dec	r25
    1674:	72 f7       	brpl	.-36     	; 0x1652 <__fp_rempio2+0x18>
    1676:	80 38       	cpi	r24, 0x80	; 128
    1678:	30 f4       	brcc	.+12     	; 0x1686 <__fp_rempio2+0x4c>
    167a:	9a 95       	dec	r25
    167c:	bb 0f       	add	r27, r27
    167e:	66 1f       	adc	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	d2 f7       	brpl	.-12     	; 0x167a <__fp_rempio2+0x40>
    1686:	90 48       	sbci	r25, 0x80	; 128
    1688:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__fp_mpack_finite>

0000168c <__fp_round>:
    168c:	09 2e       	mov	r0, r25
    168e:	03 94       	inc	r0
    1690:	00 0c       	add	r0, r0
    1692:	11 f4       	brne	.+4      	; 0x1698 <__fp_round+0xc>
    1694:	88 23       	and	r24, r24
    1696:	52 f0       	brmi	.+20     	; 0x16ac <__fp_round+0x20>
    1698:	bb 0f       	add	r27, r27
    169a:	40 f4       	brcc	.+16     	; 0x16ac <__fp_round+0x20>
    169c:	bf 2b       	or	r27, r31
    169e:	11 f4       	brne	.+4      	; 0x16a4 <__fp_round+0x18>
    16a0:	60 ff       	sbrs	r22, 0
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <__fp_round+0x20>
    16a4:	6f 5f       	subi	r22, 0xFF	; 255
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	8f 4f       	sbci	r24, 0xFF	; 255
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	08 95       	ret

000016ae <__fp_sinus>:
    16ae:	ef 93       	push	r30
    16b0:	e0 ff       	sbrs	r30, 0
    16b2:	07 c0       	rjmp	.+14     	; 0x16c2 <__fp_sinus+0x14>
    16b4:	a2 ea       	ldi	r26, 0xA2	; 162
    16b6:	2a ed       	ldi	r18, 0xDA	; 218
    16b8:	3f e0       	ldi	r19, 0x0F	; 15
    16ba:	49 ec       	ldi	r20, 0xC9	; 201
    16bc:	5f eb       	ldi	r21, 0xBF	; 191
    16be:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__addsf3x>
    16c2:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_round>
    16c6:	0f 90       	pop	r0
    16c8:	03 94       	inc	r0
    16ca:	01 fc       	sbrc	r0, 1
    16cc:	90 58       	subi	r25, 0x80	; 128
    16ce:	ec ef       	ldi	r30, 0xFC	; 252
    16d0:	f1 e0       	ldi	r31, 0x01	; 1
    16d2:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__fp_powsodd>

000016d6 <__fp_split3>:
    16d6:	57 fd       	sbrc	r21, 7
    16d8:	90 58       	subi	r25, 0x80	; 128
    16da:	44 0f       	add	r20, r20
    16dc:	55 1f       	adc	r21, r21
    16de:	59 f0       	breq	.+22     	; 0x16f6 <__fp_splitA+0x10>
    16e0:	5f 3f       	cpi	r21, 0xFF	; 255
    16e2:	71 f0       	breq	.+28     	; 0x1700 <__fp_splitA+0x1a>
    16e4:	47 95       	ror	r20

000016e6 <__fp_splitA>:
    16e6:	88 0f       	add	r24, r24
    16e8:	97 fb       	bst	r25, 7
    16ea:	99 1f       	adc	r25, r25
    16ec:	61 f0       	breq	.+24     	; 0x1706 <__fp_splitA+0x20>
    16ee:	9f 3f       	cpi	r25, 0xFF	; 255
    16f0:	79 f0       	breq	.+30     	; 0x1710 <__fp_splitA+0x2a>
    16f2:	87 95       	ror	r24
    16f4:	08 95       	ret
    16f6:	12 16       	cp	r1, r18
    16f8:	13 06       	cpc	r1, r19
    16fa:	14 06       	cpc	r1, r20
    16fc:	55 1f       	adc	r21, r21
    16fe:	f2 cf       	rjmp	.-28     	; 0x16e4 <__fp_split3+0xe>
    1700:	46 95       	lsr	r20
    1702:	f1 df       	rcall	.-30     	; 0x16e6 <__fp_splitA>
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <__fp_splitA+0x30>
    1706:	16 16       	cp	r1, r22
    1708:	17 06       	cpc	r1, r23
    170a:	18 06       	cpc	r1, r24
    170c:	99 1f       	adc	r25, r25
    170e:	f1 cf       	rjmp	.-30     	; 0x16f2 <__fp_splitA+0xc>
    1710:	86 95       	lsr	r24
    1712:	71 05       	cpc	r23, r1
    1714:	61 05       	cpc	r22, r1
    1716:	08 94       	sec
    1718:	08 95       	ret

0000171a <__fp_zero>:
    171a:	e8 94       	clt

0000171c <__fp_szero>:
    171c:	bb 27       	eor	r27, r27
    171e:	66 27       	eor	r22, r22
    1720:	77 27       	eor	r23, r23
    1722:	cb 01       	movw	r24, r22
    1724:	97 f9       	bld	r25, 7
    1726:	08 95       	ret

00001728 <__gesf2>:
    1728:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__fp_cmp>
    172c:	08 f4       	brcc	.+2      	; 0x1730 <__gesf2+0x8>
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	08 95       	ret

00001732 <__mulsf3>:
    1732:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__mulsf3x>
    1736:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_round>
    173a:	0e 94 0d 0b 	call	0x161a	; 0x161a <__fp_pscA>
    173e:	38 f0       	brcs	.+14     	; 0x174e <__mulsf3+0x1c>
    1740:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fp_pscB>
    1744:	20 f0       	brcs	.+8      	; 0x174e <__mulsf3+0x1c>
    1746:	95 23       	and	r25, r21
    1748:	11 f0       	breq	.+4      	; 0x174e <__mulsf3+0x1c>
    174a:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__fp_inf>
    174e:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__fp_nan>
    1752:	11 24       	eor	r1, r1
    1754:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_szero>

00001758 <__mulsf3x>:
    1758:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__fp_split3>
    175c:	70 f3       	brcs	.-36     	; 0x173a <__mulsf3+0x8>

0000175e <__mulsf3_pse>:
    175e:	95 9f       	mul	r25, r21
    1760:	c1 f3       	breq	.-16     	; 0x1752 <__mulsf3+0x20>
    1762:	95 0f       	add	r25, r21
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	55 1f       	adc	r21, r21
    1768:	62 9f       	mul	r22, r18
    176a:	f0 01       	movw	r30, r0
    176c:	72 9f       	mul	r23, r18
    176e:	bb 27       	eor	r27, r27
    1770:	f0 0d       	add	r31, r0
    1772:	b1 1d       	adc	r27, r1
    1774:	63 9f       	mul	r22, r19
    1776:	aa 27       	eor	r26, r26
    1778:	f0 0d       	add	r31, r0
    177a:	b1 1d       	adc	r27, r1
    177c:	aa 1f       	adc	r26, r26
    177e:	64 9f       	mul	r22, r20
    1780:	66 27       	eor	r22, r22
    1782:	b0 0d       	add	r27, r0
    1784:	a1 1d       	adc	r26, r1
    1786:	66 1f       	adc	r22, r22
    1788:	82 9f       	mul	r24, r18
    178a:	22 27       	eor	r18, r18
    178c:	b0 0d       	add	r27, r0
    178e:	a1 1d       	adc	r26, r1
    1790:	62 1f       	adc	r22, r18
    1792:	73 9f       	mul	r23, r19
    1794:	b0 0d       	add	r27, r0
    1796:	a1 1d       	adc	r26, r1
    1798:	62 1f       	adc	r22, r18
    179a:	83 9f       	mul	r24, r19
    179c:	a0 0d       	add	r26, r0
    179e:	61 1d       	adc	r22, r1
    17a0:	22 1f       	adc	r18, r18
    17a2:	74 9f       	mul	r23, r20
    17a4:	33 27       	eor	r19, r19
    17a6:	a0 0d       	add	r26, r0
    17a8:	61 1d       	adc	r22, r1
    17aa:	23 1f       	adc	r18, r19
    17ac:	84 9f       	mul	r24, r20
    17ae:	60 0d       	add	r22, r0
    17b0:	21 1d       	adc	r18, r1
    17b2:	82 2f       	mov	r24, r18
    17b4:	76 2f       	mov	r23, r22
    17b6:	6a 2f       	mov	r22, r26
    17b8:	11 24       	eor	r1, r1
    17ba:	9f 57       	subi	r25, 0x7F	; 127
    17bc:	50 40       	sbci	r21, 0x00	; 0
    17be:	9a f0       	brmi	.+38     	; 0x17e6 <__mulsf3_pse+0x88>
    17c0:	f1 f0       	breq	.+60     	; 0x17fe <__mulsf3_pse+0xa0>
    17c2:	88 23       	and	r24, r24
    17c4:	4a f0       	brmi	.+18     	; 0x17d8 <__mulsf3_pse+0x7a>
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	bb 1f       	adc	r27, r27
    17cc:	66 1f       	adc	r22, r22
    17ce:	77 1f       	adc	r23, r23
    17d0:	88 1f       	adc	r24, r24
    17d2:	91 50       	subi	r25, 0x01	; 1
    17d4:	50 40       	sbci	r21, 0x00	; 0
    17d6:	a9 f7       	brne	.-22     	; 0x17c2 <__mulsf3_pse+0x64>
    17d8:	9e 3f       	cpi	r25, 0xFE	; 254
    17da:	51 05       	cpc	r21, r1
    17dc:	80 f0       	brcs	.+32     	; 0x17fe <__mulsf3_pse+0xa0>
    17de:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__fp_inf>
    17e2:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_szero>
    17e6:	5f 3f       	cpi	r21, 0xFF	; 255
    17e8:	e4 f3       	brlt	.-8      	; 0x17e2 <__mulsf3_pse+0x84>
    17ea:	98 3e       	cpi	r25, 0xE8	; 232
    17ec:	d4 f3       	brlt	.-12     	; 0x17e2 <__mulsf3_pse+0x84>
    17ee:	86 95       	lsr	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	b7 95       	ror	r27
    17f6:	f7 95       	ror	r31
    17f8:	e7 95       	ror	r30
    17fa:	9f 5f       	subi	r25, 0xFF	; 255
    17fc:	c1 f7       	brne	.-16     	; 0x17ee <__mulsf3_pse+0x90>
    17fe:	fe 2b       	or	r31, r30
    1800:	88 0f       	add	r24, r24
    1802:	91 1d       	adc	r25, r1
    1804:	96 95       	lsr	r25
    1806:	87 95       	ror	r24
    1808:	97 f9       	bld	r25, 7
    180a:	08 95       	ret

0000180c <sin>:
    180c:	9f 93       	push	r25
    180e:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_rempio2>
    1812:	0f 90       	pop	r0
    1814:	07 fc       	sbrc	r0, 7
    1816:	ee 5f       	subi	r30, 0xFE	; 254
    1818:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_sinus>
    181c:	19 f4       	brne	.+6      	; 0x1824 <sin+0x18>
    181e:	16 f4       	brtc	.+4      	; 0x1824 <sin+0x18>
    1820:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__fp_nan>
    1824:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__fp_mpack>

00001828 <sqrt>:
    1828:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__fp_splitA>
    182c:	b8 f3       	brcs	.-18     	; 0x181c <sin+0x10>
    182e:	99 23       	and	r25, r25
    1830:	c9 f3       	breq	.-14     	; 0x1824 <sin+0x18>
    1832:	b6 f3       	brts	.-20     	; 0x1820 <sin+0x14>
    1834:	9f 57       	subi	r25, 0x7F	; 127
    1836:	55 0b       	sbc	r21, r21
    1838:	87 ff       	sbrs	r24, 7
    183a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fp_norm2>
    183e:	00 24       	eor	r0, r0
    1840:	a0 e6       	ldi	r26, 0x60	; 96
    1842:	40 ea       	ldi	r20, 0xA0	; 160
    1844:	90 01       	movw	r18, r0
    1846:	80 58       	subi	r24, 0x80	; 128
    1848:	56 95       	lsr	r21
    184a:	97 95       	ror	r25
    184c:	28 f4       	brcc	.+10     	; 0x1858 <sqrt+0x30>
    184e:	80 5c       	subi	r24, 0xC0	; 192
    1850:	66 0f       	add	r22, r22
    1852:	77 1f       	adc	r23, r23
    1854:	88 1f       	adc	r24, r24
    1856:	20 f0       	brcs	.+8      	; 0x1860 <sqrt+0x38>
    1858:	26 17       	cp	r18, r22
    185a:	37 07       	cpc	r19, r23
    185c:	48 07       	cpc	r20, r24
    185e:	30 f4       	brcc	.+12     	; 0x186c <sqrt+0x44>
    1860:	62 1b       	sub	r22, r18
    1862:	73 0b       	sbc	r23, r19
    1864:	84 0b       	sbc	r24, r20
    1866:	20 29       	or	r18, r0
    1868:	31 29       	or	r19, r1
    186a:	4a 2b       	or	r20, r26
    186c:	a6 95       	lsr	r26
    186e:	17 94       	ror	r1
    1870:	07 94       	ror	r0
    1872:	20 25       	eor	r18, r0
    1874:	31 25       	eor	r19, r1
    1876:	4a 27       	eor	r20, r26
    1878:	58 f7       	brcc	.-42     	; 0x1850 <sqrt+0x28>
    187a:	66 0f       	add	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	88 1f       	adc	r24, r24
    1880:	20 f0       	brcs	.+8      	; 0x188a <sqrt+0x62>
    1882:	26 17       	cp	r18, r22
    1884:	37 07       	cpc	r19, r23
    1886:	48 07       	cpc	r20, r24
    1888:	30 f4       	brcc	.+12     	; 0x1896 <sqrt+0x6e>
    188a:	62 0b       	sbc	r22, r18
    188c:	73 0b       	sbc	r23, r19
    188e:	84 0b       	sbc	r24, r20
    1890:	20 0d       	add	r18, r0
    1892:	31 1d       	adc	r19, r1
    1894:	41 1d       	adc	r20, r1
    1896:	a0 95       	com	r26
    1898:	81 f7       	brne	.-32     	; 0x187a <sqrt+0x52>
    189a:	b9 01       	movw	r22, r18
    189c:	84 2f       	mov	r24, r20
    189e:	91 58       	subi	r25, 0x81	; 129
    18a0:	88 0f       	add	r24, r24
    18a2:	96 95       	lsr	r25
    18a4:	87 95       	ror	r24
    18a6:	08 95       	ret

000018a8 <__fp_mpack>:
    18a8:	9f 3f       	cpi	r25, 0xFF	; 255
    18aa:	31 f0       	breq	.+12     	; 0x18b8 <__fp_mpack_finite+0xc>

000018ac <__fp_mpack_finite>:
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	20 f4       	brcc	.+8      	; 0x18b8 <__fp_mpack_finite+0xc>
    18b0:	87 95       	ror	r24
    18b2:	77 95       	ror	r23
    18b4:	67 95       	ror	r22
    18b6:	b7 95       	ror	r27
    18b8:	88 0f       	add	r24, r24
    18ba:	91 1d       	adc	r25, r1
    18bc:	96 95       	lsr	r25
    18be:	87 95       	ror	r24
    18c0:	97 f9       	bld	r25, 7
    18c2:	08 95       	ret

000018c4 <__fp_norm2>:
    18c4:	91 50       	subi	r25, 0x01	; 1
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	d2 f7       	brpl	.-12     	; 0x18c4 <__fp_norm2>
    18d0:	08 95       	ret

000018d2 <__fp_powsodd>:
    18d2:	9f 93       	push	r25
    18d4:	8f 93       	push	r24
    18d6:	7f 93       	push	r23
    18d8:	6f 93       	push	r22
    18da:	ff 93       	push	r31
    18dc:	ef 93       	push	r30
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
    18e6:	ef 91       	pop	r30
    18e8:	ff 91       	pop	r31
    18ea:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__fp_powser>
    18ee:	2f 91       	pop	r18
    18f0:	3f 91       	pop	r19
    18f2:	4f 91       	pop	r20
    18f4:	5f 91       	pop	r21
    18f6:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__mulsf3>

000018fa <__fp_powser>:
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	1f 93       	push	r17
    1900:	0f 93       	push	r16
    1902:	ff 92       	push	r15
    1904:	ef 92       	push	r14
    1906:	df 92       	push	r13
    1908:	7b 01       	movw	r14, r22
    190a:	8c 01       	movw	r16, r24
    190c:	68 94       	set
    190e:	06 c0       	rjmp	.+12     	; 0x191c <__fp_powser+0x22>
    1910:	da 2e       	mov	r13, r26
    1912:	ef 01       	movw	r28, r30
    1914:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__mulsf3x>
    1918:	fe 01       	movw	r30, r28
    191a:	e8 94       	clt
    191c:	a5 91       	lpm	r26, Z+
    191e:	25 91       	lpm	r18, Z+
    1920:	35 91       	lpm	r19, Z+
    1922:	45 91       	lpm	r20, Z+
    1924:	55 91       	lpm	r21, Z+
    1926:	a6 f3       	brts	.-24     	; 0x1910 <__fp_powser+0x16>
    1928:	ef 01       	movw	r28, r30
    192a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__addsf3x>
    192e:	fe 01       	movw	r30, r28
    1930:	97 01       	movw	r18, r14
    1932:	a8 01       	movw	r20, r16
    1934:	da 94       	dec	r13
    1936:	69 f7       	brne	.-38     	; 0x1912 <__fp_powser+0x18>
    1938:	df 90       	pop	r13
    193a:	ef 90       	pop	r14
    193c:	ff 90       	pop	r15
    193e:	0f 91       	pop	r16
    1940:	1f 91       	pop	r17
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <__udivmodhi4>:
    1948:	aa 1b       	sub	r26, r26
    194a:	bb 1b       	sub	r27, r27
    194c:	51 e1       	ldi	r21, 0x11	; 17
    194e:	07 c0       	rjmp	.+14     	; 0x195e <__udivmodhi4_ep>

00001950 <__udivmodhi4_loop>:
    1950:	aa 1f       	adc	r26, r26
    1952:	bb 1f       	adc	r27, r27
    1954:	a6 17       	cp	r26, r22
    1956:	b7 07       	cpc	r27, r23
    1958:	10 f0       	brcs	.+4      	; 0x195e <__udivmodhi4_ep>
    195a:	a6 1b       	sub	r26, r22
    195c:	b7 0b       	sbc	r27, r23

0000195e <__udivmodhi4_ep>:
    195e:	88 1f       	adc	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	5a 95       	dec	r21
    1964:	a9 f7       	brne	.-22     	; 0x1950 <__udivmodhi4_loop>
    1966:	80 95       	com	r24
    1968:	90 95       	com	r25
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	08 95       	ret

00001970 <do_rand>:
    1970:	8f 92       	push	r8
    1972:	9f 92       	push	r9
    1974:	af 92       	push	r10
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	ec 01       	movw	r28, r24
    1986:	68 81       	ld	r22, Y
    1988:	79 81       	ldd	r23, Y+1	; 0x01
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	61 15       	cp	r22, r1
    1990:	71 05       	cpc	r23, r1
    1992:	81 05       	cpc	r24, r1
    1994:	91 05       	cpc	r25, r1
    1996:	21 f4       	brne	.+8      	; 0x19a0 <do_rand+0x30>
    1998:	64 e2       	ldi	r22, 0x24	; 36
    199a:	79 ed       	ldi	r23, 0xD9	; 217
    199c:	8b e5       	ldi	r24, 0x5B	; 91
    199e:	97 e0       	ldi	r25, 0x07	; 7
    19a0:	2d e1       	ldi	r18, 0x1D	; 29
    19a2:	33 ef       	ldi	r19, 0xF3	; 243
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divmodsi4>
    19ac:	49 01       	movw	r8, r18
    19ae:	5a 01       	movw	r10, r20
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	a7 ea       	ldi	r26, 0xA7	; 167
    19b6:	b1 e4       	ldi	r27, 0x41	; 65
    19b8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__muluhisi3>
    19bc:	6b 01       	movw	r12, r22
    19be:	7c 01       	movw	r14, r24
    19c0:	ac ee       	ldi	r26, 0xEC	; 236
    19c2:	b4 ef       	ldi	r27, 0xF4	; 244
    19c4:	a5 01       	movw	r20, r10
    19c6:	94 01       	movw	r18, r8
    19c8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__mulohisi3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	8c 0d       	add	r24, r12
    19d2:	9d 1d       	adc	r25, r13
    19d4:	ae 1d       	adc	r26, r14
    19d6:	bf 1d       	adc	r27, r15
    19d8:	b7 ff       	sbrs	r27, 7
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <do_rand+0x72>
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	a1 09       	sbc	r26, r1
    19e0:	b0 48       	sbci	r27, 0x80	; 128
    19e2:	88 83       	st	Y, r24
    19e4:	99 83       	std	Y+1, r25	; 0x01
    19e6:	aa 83       	std	Y+2, r26	; 0x02
    19e8:	bb 83       	std	Y+3, r27	; 0x03
    19ea:	9f 77       	andi	r25, 0x7F	; 127
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	9f 90       	pop	r9
    19fe:	8f 90       	pop	r8
    1a00:	08 95       	ret

00001a02 <rand_r>:
    1a02:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <do_rand>

00001a06 <rand>:
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e2       	ldi	r25, 0x20	; 32
    1a0a:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <do_rand>

00001a0e <srand>:
    1a0e:	a0 e0       	ldi	r26, 0x00	; 0
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    1a16:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    1a1a:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    1a1e:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    1a22:	08 95       	ret

00001a24 <__divmodsi4>:
    1a24:	05 2e       	mov	r0, r21
    1a26:	97 fb       	bst	r25, 7
    1a28:	1e f4       	brtc	.+6      	; 0x1a30 <__divmodsi4+0xc>
    1a2a:	00 94       	com	r0
    1a2c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__negsi2>
    1a30:	57 fd       	sbrc	r21, 7
    1a32:	07 d0       	rcall	.+14     	; 0x1a42 <__divmodsi4_neg2>
    1a34:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__udivmodsi4>
    1a38:	07 fc       	sbrc	r0, 7
    1a3a:	03 d0       	rcall	.+6      	; 0x1a42 <__divmodsi4_neg2>
    1a3c:	4e f4       	brtc	.+18     	; 0x1a50 <__divmodsi4_exit>
    1a3e:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__negsi2>

00001a42 <__divmodsi4_neg2>:
    1a42:	50 95       	com	r21
    1a44:	40 95       	com	r20
    1a46:	30 95       	com	r19
    1a48:	21 95       	neg	r18
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255

00001a50 <__divmodsi4_exit>:
    1a50:	08 95       	ret

00001a52 <__negsi2>:
    1a52:	90 95       	com	r25
    1a54:	80 95       	com	r24
    1a56:	70 95       	com	r23
    1a58:	61 95       	neg	r22
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	08 95       	ret

00001a62 <__muluhisi3>:
    1a62:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__umulhisi3>
    1a66:	a5 9f       	mul	r26, r21
    1a68:	90 0d       	add	r25, r0
    1a6a:	b4 9f       	mul	r27, r20
    1a6c:	90 0d       	add	r25, r0
    1a6e:	a4 9f       	mul	r26, r20
    1a70:	80 0d       	add	r24, r0
    1a72:	91 1d       	adc	r25, r1
    1a74:	11 24       	eor	r1, r1
    1a76:	08 95       	ret

00001a78 <__mulshisi3>:
    1a78:	b7 ff       	sbrs	r27, 7
    1a7a:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__muluhisi3>

00001a7e <__mulohisi3>:
    1a7e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__muluhisi3>
    1a82:	82 1b       	sub	r24, r18
    1a84:	93 0b       	sbc	r25, r19
    1a86:	08 95       	ret

00001a88 <__udivmodsi4>:
    1a88:	a1 e2       	ldi	r26, 0x21	; 33
    1a8a:	1a 2e       	mov	r1, r26
    1a8c:	aa 1b       	sub	r26, r26
    1a8e:	bb 1b       	sub	r27, r27
    1a90:	fd 01       	movw	r30, r26
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <__udivmodsi4_ep>

00001a94 <__udivmodsi4_loop>:
    1a94:	aa 1f       	adc	r26, r26
    1a96:	bb 1f       	adc	r27, r27
    1a98:	ee 1f       	adc	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	a2 17       	cp	r26, r18
    1a9e:	b3 07       	cpc	r27, r19
    1aa0:	e4 07       	cpc	r30, r20
    1aa2:	f5 07       	cpc	r31, r21
    1aa4:	20 f0       	brcs	.+8      	; 0x1aae <__udivmodsi4_ep>
    1aa6:	a2 1b       	sub	r26, r18
    1aa8:	b3 0b       	sbc	r27, r19
    1aaa:	e4 0b       	sbc	r30, r20
    1aac:	f5 0b       	sbc	r31, r21

00001aae <__udivmodsi4_ep>:
    1aae:	66 1f       	adc	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	88 1f       	adc	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	1a 94       	dec	r1
    1ab8:	69 f7       	brne	.-38     	; 0x1a94 <__udivmodsi4_loop>
    1aba:	60 95       	com	r22
    1abc:	70 95       	com	r23
    1abe:	80 95       	com	r24
    1ac0:	90 95       	com	r25
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	bd 01       	movw	r22, r26
    1ac8:	cf 01       	movw	r24, r30
    1aca:	08 95       	ret

00001acc <__umulhisi3>:
    1acc:	a2 9f       	mul	r26, r18
    1ace:	b0 01       	movw	r22, r0
    1ad0:	b3 9f       	mul	r27, r19
    1ad2:	c0 01       	movw	r24, r0
    1ad4:	a3 9f       	mul	r26, r19
    1ad6:	70 0d       	add	r23, r0
    1ad8:	81 1d       	adc	r24, r1
    1ada:	11 24       	eor	r1, r1
    1adc:	91 1d       	adc	r25, r1
    1ade:	b2 9f       	mul	r27, r18
    1ae0:	70 0d       	add	r23, r0
    1ae2:	81 1d       	adc	r24, r1
    1ae4:	11 24       	eor	r1, r1
    1ae6:	91 1d       	adc	r25, r1
    1ae8:	08 95       	ret

00001aea <_exit>:
    1aea:	f8 94       	cli

00001aec <__stop_program>:
    1aec:	ff cf       	rjmp	.-2      	; 0x1aec <__stop_program>
