
Radar_ATXM256A3U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00802000  00001926  000019ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002803  0080200a  0080200a  000019c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005efd  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039b3  00000000  00000000  00007ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001118  00000000  00000000  0000b464  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000680  00000000  00000000  0000c57c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000338e  00000000  00000000  0000cbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001645  00000000  00000000  0000ff8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000115cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__ctors_end>
       4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      10:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      14:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      18:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      1c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      20:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      24:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      28:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      30:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      34:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      38:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      3c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      44:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      4c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      50:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      58:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      5c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      60:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      68:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      6c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      70:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      7c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      80:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      84:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      90:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      94:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      9c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      bc:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_47>
      c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      fc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     100:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     104:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     108:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     10c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     110:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     114:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     118:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     11c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     120:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     124:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     128:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     12c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     130:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     134:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     138:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     13c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     140:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     144:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     148:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     14c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     150:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     154:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     158:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     15c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     160:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     164:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     168:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     16c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     170:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     174:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     178:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     17c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     180:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     184:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     188:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     18c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     190:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     194:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     198:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     19c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1bc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <init_Window+0x2e>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df e5       	ldi	r29, 0x5F	; 95
     224:	de bf       	out	0x3e, r29	; 62
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0c bf       	out	0x3c, r16	; 60

0000022a <__do_copy_data>:
     22a:	10 e2       	ldi	r17, 0x20	; 32
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	e6 e2       	ldi	r30, 0x26	; 38
     232:	f9 e1       	ldi	r31, 0x19	; 25
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0b bf       	out	0x3b, r16	; 59
     238:	02 c0       	rjmp	.+4      	; 0x23e <__do_copy_data+0x14>
     23a:	07 90       	elpm	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	aa 30       	cpi	r26, 0x0A	; 10
     240:	b1 07       	cpc	r27, r17
     242:	d9 f7       	brne	.-10     	; 0x23a <__do_copy_data+0x10>

00000244 <__do_clear_bss>:
     244:	28 e4       	ldi	r18, 0x48	; 72
     246:	aa e0       	ldi	r26, 0x0A	; 10
     248:	b0 e2       	ldi	r27, 0x20	; 32
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	ad 30       	cpi	r26, 0x0D	; 13
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>
     254:	0e 94 a5 08 	call	0x114a	; 0x114a <main>
     258:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <_exit>

0000025c <__bad_interrupt>:
     25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000260 <avr_log2>:
     260:	ac 01       	movw	r20, r24
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	03 c0       	rjmp	.+6      	; 0x272 <avr_log2+0x12>
     26c:	22 0f       	add	r18, r18
     26e:	33 1f       	adc	r19, r19
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	24 17       	cp	r18, r20
     274:	35 07       	cpc	r19, r21
     276:	d0 f3       	brcs	.-12     	; 0x26c <avr_log2+0xc>
     278:	08 95       	ret

0000027a <cf_multiply>:
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	a8 97       	sbiw	r28, 0x28	; 40
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	29 8b       	std	Y+17, r18	; 0x11
     2a6:	3a 8b       	std	Y+18, r19	; 0x12
     2a8:	4b 8b       	std	Y+19, r20	; 0x13
     2aa:	5c 8b       	std	Y+20, r21	; 0x14
     2ac:	6d 8b       	std	Y+21, r22	; 0x15
     2ae:	7e 8b       	std	Y+22, r23	; 0x16
     2b0:	8f 8b       	std	Y+23, r24	; 0x17
     2b2:	98 8f       	std	Y+24, r25	; 0x18
     2b4:	a9 8e       	std	Y+25, r10	; 0x19
     2b6:	ba 8e       	std	Y+26, r11	; 0x1a
     2b8:	cb 8e       	std	Y+27, r12	; 0x1b
     2ba:	dc 8e       	std	Y+28, r13	; 0x1c
     2bc:	ed 8e       	std	Y+29, r14	; 0x1d
     2be:	fe 8e       	std	Y+30, r15	; 0x1e
     2c0:	0f 8f       	std	Y+31, r16	; 0x1f
     2c2:	18 a3       	std	Y+32, r17	; 0x20
     2c4:	c9 88       	ldd	r12, Y+17	; 0x11
     2c6:	da 88       	ldd	r13, Y+18	; 0x12
     2c8:	eb 88       	ldd	r14, Y+19	; 0x13
     2ca:	fc 88       	ldd	r15, Y+20	; 0x14
     2cc:	4d 8c       	ldd	r4, Y+29	; 0x1d
     2ce:	5e 8c       	ldd	r5, Y+30	; 0x1e
     2d0:	6f 8c       	ldd	r6, Y+31	; 0x1f
     2d2:	78 a0       	ldd	r7, Y+32	; 0x20
     2d4:	a3 01       	movw	r20, r6
     2d6:	92 01       	movw	r18, r4
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     2e0:	6d a3       	std	Y+37, r22	; 0x25
     2e2:	7e a3       	std	Y+38, r23	; 0x26
     2e4:	8f a3       	std	Y+39, r24	; 0x27
     2e6:	98 a7       	std	Y+40, r25	; 0x28
     2e8:	8d 89       	ldd	r24, Y+21	; 0x15
     2ea:	9e 89       	ldd	r25, Y+22	; 0x16
     2ec:	af 89       	ldd	r26, Y+23	; 0x17
     2ee:	b8 8d       	ldd	r27, Y+24	; 0x18
     2f0:	89 a3       	std	Y+33, r24	; 0x21
     2f2:	9a a3       	std	Y+34, r25	; 0x22
     2f4:	ab a3       	std	Y+35, r26	; 0x23
     2f6:	bc a3       	std	Y+36, r27	; 0x24
     2f8:	89 8c       	ldd	r8, Y+25	; 0x19
     2fa:	9a 8c       	ldd	r9, Y+26	; 0x1a
     2fc:	ab 8c       	ldd	r10, Y+27	; 0x1b
     2fe:	bc 8c       	ldd	r11, Y+28	; 0x1c
     300:	a5 01       	movw	r20, r10
     302:	94 01       	movw	r18, r8
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     30c:	9b 01       	movw	r18, r22
     30e:	ac 01       	movw	r20, r24
     310:	6d a1       	ldd	r22, Y+37	; 0x25
     312:	7e a1       	ldd	r23, Y+38	; 0x26
     314:	8f a1       	ldd	r24, Y+39	; 0x27
     316:	98 a5       	ldd	r25, Y+40	; 0x28
     318:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     31c:	69 87       	std	Y+9, r22	; 0x09
     31e:	7a 87       	std	Y+10, r23	; 0x0a
     320:	8b 87       	std	Y+11, r24	; 0x0b
     322:	9c 87       	std	Y+12, r25	; 0x0c
     324:	29 a1       	ldd	r18, Y+33	; 0x21
     326:	3a a1       	ldd	r19, Y+34	; 0x22
     328:	4b a1       	ldd	r20, Y+35	; 0x23
     32a:	5c a1       	ldd	r21, Y+36	; 0x24
     32c:	c3 01       	movw	r24, r6
     32e:	b2 01       	movw	r22, r4
     330:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	a5 01       	movw	r20, r10
     33a:	94 01       	movw	r18, r8
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	c3 01       	movw	r24, r6
     34a:	b2 01       	movw	r22, r4
     34c:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
     350:	6d 87       	std	Y+13, r22	; 0x0d
     352:	7e 87       	std	Y+14, r23	; 0x0e
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	98 8b       	std	Y+16, r25	; 0x10
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	fe 01       	movw	r30, r28
     35c:	39 96       	adiw	r30, 0x09	; 9
     35e:	de 01       	movw	r26, r28
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	01 90       	ld	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	8a 95       	dec	r24
     368:	e1 f7       	brne	.-8      	; 0x362 <cf_multiply+0xe8>
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3a 81       	ldd	r19, Y+2	; 0x02
     36e:	4b 81       	ldd	r20, Y+3	; 0x03
     370:	5c 81       	ldd	r21, Y+4	; 0x04
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	a8 96       	adiw	r28, 0x28	; 40
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	08 95       	ret

000003a2 <cf_multiply_rf>:
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	68 97       	sbiw	r28, 0x18	; 24
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	29 8b       	std	Y+17, r18	; 0x11
     3be:	3a 8b       	std	Y+18, r19	; 0x12
     3c0:	4b 8b       	std	Y+19, r20	; 0x13
     3c2:	5c 8b       	std	Y+20, r21	; 0x14
     3c4:	6d 8b       	std	Y+21, r22	; 0x15
     3c6:	7e 8b       	std	Y+22, r23	; 0x16
     3c8:	8f 8b       	std	Y+23, r24	; 0x17
     3ca:	98 8f       	std	Y+24, r25	; 0x18
     3cc:	67 01       	movw	r12, r14
     3ce:	78 01       	movw	r14, r16
     3d0:	69 89       	ldd	r22, Y+17	; 0x11
     3d2:	7a 89       	ldd	r23, Y+18	; 0x12
     3d4:	8b 89       	ldd	r24, Y+19	; 0x13
     3d6:	9c 89       	ldd	r25, Y+20	; 0x14
     3d8:	a7 01       	movw	r20, r14
     3da:	96 01       	movw	r18, r12
     3dc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     3e0:	69 87       	std	Y+9, r22	; 0x09
     3e2:	7a 87       	std	Y+10, r23	; 0x0a
     3e4:	8b 87       	std	Y+11, r24	; 0x0b
     3e6:	9c 87       	std	Y+12, r25	; 0x0c
     3e8:	2d 89       	ldd	r18, Y+21	; 0x15
     3ea:	3e 89       	ldd	r19, Y+22	; 0x16
     3ec:	4f 89       	ldd	r20, Y+23	; 0x17
     3ee:	58 8d       	ldd	r21, Y+24	; 0x18
     3f0:	c7 01       	movw	r24, r14
     3f2:	b6 01       	movw	r22, r12
     3f4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     3f8:	6d 87       	std	Y+13, r22	; 0x0d
     3fa:	7e 87       	std	Y+14, r23	; 0x0e
     3fc:	8f 87       	std	Y+15, r24	; 0x0f
     3fe:	98 8b       	std	Y+16, r25	; 0x10
     400:	88 e0       	ldi	r24, 0x08	; 8
     402:	fe 01       	movw	r30, r28
     404:	39 96       	adiw	r30, 0x09	; 9
     406:	de 01       	movw	r26, r28
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	01 90       	ld	r0, Z+
     40c:	0d 92       	st	X+, r0
     40e:	8a 95       	dec	r24
     410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	29 81       	ldd	r18, Y+1	; 0x01
     414:	3a 81       	ldd	r19, Y+2	; 0x02
     416:	4b 81       	ldd	r20, Y+3	; 0x03
     418:	5c 81       	ldd	r21, Y+4	; 0x04
     41a:	6d 81       	ldd	r22, Y+5	; 0x05
     41c:	7e 81       	ldd	r23, Y+6	; 0x06
     41e:	8f 81       	ldd	r24, Y+7	; 0x07
     420:	98 85       	ldd	r25, Y+8	; 0x08
     422:	68 96       	adiw	r28, 0x18	; 24
     424:	cd bf       	out	0x3d, r28	; 61
     426:	de bf       	out	0x3e, r29	; 62
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <cf_exp>:
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	60 97       	sbiw	r28, 0x10	; 16
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	de bf       	out	0x3e, r29	; 62
     450:	6b 01       	movw	r12, r22
     452:	7c 01       	movw	r14, r24
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	a9 01       	movw	r20, r18
     45a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__gesf2>
     45e:	18 16       	cp	r1, r24
     460:	8c f4       	brge	.+34     	; 0x484 <cf_exp+0x4a>
     462:	c7 01       	movw	r24, r14
     464:	b6 01       	movw	r22, r12
     466:	0e 94 05 0a 	call	0x140a	; 0x140a <cos>
     46a:	6d 87       	std	Y+13, r22	; 0x0d
     46c:	7e 87       	std	Y+14, r23	; 0x0e
     46e:	8f 87       	std	Y+15, r24	; 0x0f
     470:	98 8b       	std	Y+16, r25	; 0x10
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 df 0b 	call	0x17be	; 0x17be <sin>
     47a:	69 87       	std	Y+9, r22	; 0x09
     47c:	7a 87       	std	Y+10, r23	; 0x0a
     47e:	8b 87       	std	Y+11, r24	; 0x0b
     480:	9c 87       	std	Y+12, r25	; 0x0c
     482:	10 c0       	rjmp	.+32     	; 0x4a4 <cf_exp+0x6a>
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 05 0a 	call	0x140a	; 0x140a <cos>
     48c:	6d 87       	std	Y+13, r22	; 0x0d
     48e:	7e 87       	std	Y+14, r23	; 0x0e
     490:	8f 87       	std	Y+15, r24	; 0x0f
     492:	98 8b       	std	Y+16, r25	; 0x10
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	0e 94 df 0b 	call	0x17be	; 0x17be <sin>
     49c:	69 87       	std	Y+9, r22	; 0x09
     49e:	7a 87       	std	Y+10, r23	; 0x0a
     4a0:	8b 87       	std	Y+11, r24	; 0x0b
     4a2:	9c 87       	std	Y+12, r25	; 0x0c
     4a4:	88 e0       	ldi	r24, 0x08	; 8
     4a6:	fe 01       	movw	r30, r28
     4a8:	39 96       	adiw	r30, 0x09	; 9
     4aa:	de 01       	movw	r26, r28
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	01 90       	ld	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	8a 95       	dec	r24
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <cf_exp+0x74>
     4b6:	29 81       	ldd	r18, Y+1	; 0x01
     4b8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ba:	4b 81       	ldd	r20, Y+3	; 0x03
     4bc:	5c 81       	ldd	r21, Y+4	; 0x04
     4be:	6d 81       	ldd	r22, Y+5	; 0x05
     4c0:	7e 81       	ldd	r23, Y+6	; 0x06
     4c2:	8f 81       	ldd	r24, Y+7	; 0x07
     4c4:	98 85       	ldd	r25, Y+8	; 0x08
     4c6:	60 96       	adiw	r28, 0x10	; 16
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	08 95       	ret

000004da <cf_plus>:
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	a0 97       	sbiw	r28, 0x20	; 32
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	29 8b       	std	Y+17, r18	; 0x11
     4fa:	3a 8b       	std	Y+18, r19	; 0x12
     4fc:	4b 8b       	std	Y+19, r20	; 0x13
     4fe:	5c 8b       	std	Y+20, r21	; 0x14
     500:	6d 8b       	std	Y+21, r22	; 0x15
     502:	7e 8b       	std	Y+22, r23	; 0x16
     504:	8f 8b       	std	Y+23, r24	; 0x17
     506:	98 8f       	std	Y+24, r25	; 0x18
     508:	a9 8e       	std	Y+25, r10	; 0x19
     50a:	ba 8e       	std	Y+26, r11	; 0x1a
     50c:	cb 8e       	std	Y+27, r12	; 0x1b
     50e:	dc 8e       	std	Y+28, r13	; 0x1c
     510:	ed 8e       	std	Y+29, r14	; 0x1d
     512:	fe 8e       	std	Y+30, r15	; 0x1e
     514:	0f 8f       	std	Y+31, r16	; 0x1f
     516:	18 a3       	std	Y+32, r17	; 0x20
     518:	69 89       	ldd	r22, Y+17	; 0x11
     51a:	7a 89       	ldd	r23, Y+18	; 0x12
     51c:	8b 89       	ldd	r24, Y+19	; 0x13
     51e:	9c 89       	ldd	r25, Y+20	; 0x14
     520:	29 8d       	ldd	r18, Y+25	; 0x19
     522:	3a 8d       	ldd	r19, Y+26	; 0x1a
     524:	4b 8d       	ldd	r20, Y+27	; 0x1b
     526:	5c 8d       	ldd	r21, Y+28	; 0x1c
     528:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     52c:	69 87       	std	Y+9, r22	; 0x09
     52e:	7a 87       	std	Y+10, r23	; 0x0a
     530:	8b 87       	std	Y+11, r24	; 0x0b
     532:	9c 87       	std	Y+12, r25	; 0x0c
     534:	6d 89       	ldd	r22, Y+21	; 0x15
     536:	7e 89       	ldd	r23, Y+22	; 0x16
     538:	8f 89       	ldd	r24, Y+23	; 0x17
     53a:	98 8d       	ldd	r25, Y+24	; 0x18
     53c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     53e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     540:	4f 8d       	ldd	r20, Y+31	; 0x1f
     542:	58 a1       	ldd	r21, Y+32	; 0x20
     544:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     548:	6d 87       	std	Y+13, r22	; 0x0d
     54a:	7e 87       	std	Y+14, r23	; 0x0e
     54c:	8f 87       	std	Y+15, r24	; 0x0f
     54e:	98 8b       	std	Y+16, r25	; 0x10
     550:	88 e0       	ldi	r24, 0x08	; 8
     552:	fe 01       	movw	r30, r28
     554:	39 96       	adiw	r30, 0x09	; 9
     556:	de 01       	movw	r26, r28
     558:	11 96       	adiw	r26, 0x01	; 1
     55a:	01 90       	ld	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	8a 95       	dec	r24
     560:	e1 f7       	brne	.-8      	; 0x55a <cf_plus+0x80>
     562:	29 81       	ldd	r18, Y+1	; 0x01
     564:	3a 81       	ldd	r19, Y+2	; 0x02
     566:	4b 81       	ldd	r20, Y+3	; 0x03
     568:	5c 81       	ldd	r21, Y+4	; 0x04
     56a:	6d 81       	ldd	r22, Y+5	; 0x05
     56c:	7e 81       	ldd	r23, Y+6	; 0x06
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	a0 96       	adiw	r28, 0x20	; 32
     574:	cd bf       	out	0x3d, r28	; 61
     576:	de bf       	out	0x3e, r29	; 62
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	bf 90       	pop	r11
     58a:	af 90       	pop	r10
     58c:	08 95       	ret

0000058e <cf_minus>:
     58e:	af 92       	push	r10
     590:	bf 92       	push	r11
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	a0 97       	sbiw	r28, 0x20	; 32
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	29 8b       	std	Y+17, r18	; 0x11
     5ae:	3a 8b       	std	Y+18, r19	; 0x12
     5b0:	4b 8b       	std	Y+19, r20	; 0x13
     5b2:	5c 8b       	std	Y+20, r21	; 0x14
     5b4:	6d 8b       	std	Y+21, r22	; 0x15
     5b6:	7e 8b       	std	Y+22, r23	; 0x16
     5b8:	8f 8b       	std	Y+23, r24	; 0x17
     5ba:	98 8f       	std	Y+24, r25	; 0x18
     5bc:	a9 8e       	std	Y+25, r10	; 0x19
     5be:	ba 8e       	std	Y+26, r11	; 0x1a
     5c0:	cb 8e       	std	Y+27, r12	; 0x1b
     5c2:	dc 8e       	std	Y+28, r13	; 0x1c
     5c4:	ed 8e       	std	Y+29, r14	; 0x1d
     5c6:	fe 8e       	std	Y+30, r15	; 0x1e
     5c8:	0f 8f       	std	Y+31, r16	; 0x1f
     5ca:	18 a3       	std	Y+32, r17	; 0x20
     5cc:	69 89       	ldd	r22, Y+17	; 0x11
     5ce:	7a 89       	ldd	r23, Y+18	; 0x12
     5d0:	8b 89       	ldd	r24, Y+19	; 0x13
     5d2:	9c 89       	ldd	r25, Y+20	; 0x14
     5d4:	29 8d       	ldd	r18, Y+25	; 0x19
     5d6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5d8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     5da:	5c 8d       	ldd	r21, Y+28	; 0x1c
     5dc:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
     5e0:	69 87       	std	Y+9, r22	; 0x09
     5e2:	7a 87       	std	Y+10, r23	; 0x0a
     5e4:	8b 87       	std	Y+11, r24	; 0x0b
     5e6:	9c 87       	std	Y+12, r25	; 0x0c
     5e8:	6d 89       	ldd	r22, Y+21	; 0x15
     5ea:	7e 89       	ldd	r23, Y+22	; 0x16
     5ec:	8f 89       	ldd	r24, Y+23	; 0x17
     5ee:	98 8d       	ldd	r25, Y+24	; 0x18
     5f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     5f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     5f4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     5f6:	58 a1       	ldd	r21, Y+32	; 0x20
     5f8:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
     5fc:	6d 87       	std	Y+13, r22	; 0x0d
     5fe:	7e 87       	std	Y+14, r23	; 0x0e
     600:	8f 87       	std	Y+15, r24	; 0x0f
     602:	98 8b       	std	Y+16, r25	; 0x10
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	fe 01       	movw	r30, r28
     608:	39 96       	adiw	r30, 0x09	; 9
     60a:	de 01       	movw	r26, r28
     60c:	11 96       	adiw	r26, 0x01	; 1
     60e:	01 90       	ld	r0, Z+
     610:	0d 92       	st	X+, r0
     612:	8a 95       	dec	r24
     614:	e1 f7       	brne	.-8      	; 0x60e <cf_minus+0x80>
     616:	29 81       	ldd	r18, Y+1	; 0x01
     618:	3a 81       	ldd	r19, Y+2	; 0x02
     61a:	4b 81       	ldd	r20, Y+3	; 0x03
     61c:	5c 81       	ldd	r21, Y+4	; 0x04
     61e:	6d 81       	ldd	r22, Y+5	; 0x05
     620:	7e 81       	ldd	r23, Y+6	; 0x06
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	98 85       	ldd	r25, Y+8	; 0x08
     626:	a0 96       	adiw	r28, 0x20	; 32
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	bf 90       	pop	r11
     63e:	af 90       	pop	r10
     640:	08 95       	ret

00000642 <calc_BitReversal>:
#include "avr_fft.h"

uint16_t calc_BitReversal(uint16_t Value)
{
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
	uint16_t Nr;                                                                                                //Number of bits to be reversed
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     650:	fc 01       	movw	r30, r24
     652:	31 97       	sbiw	r30, 0x01	; 1

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     654:	bf 01       	movw	r22, r30
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0

uint16_t calc_BitReversal(uint16_t Value)
{
	uint16_t Nr;                                                                                                //Number of bits to be reversed
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     65e:	1c c0       	rjmp	.+56     	; 0x698 <calc_BitReversal+0x56>
	{
		Temp = (0x01<<i);                                                                                       //Creates bit mask to test bit i
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	04 2e       	mov	r0, r20
     666:	02 c0       	rjmp	.+4      	; 0x66c <calc_BitReversal+0x2a>
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	0a 94       	dec	r0
     66e:	e2 f7       	brpl	.-8      	; 0x668 <calc_BitReversal+0x26>
		RValue |= (((Value&Temp)>>i)<<j);                                                                       //Tests bit i and shifts to jth position (Bit reversal)
     670:	2c 23       	and	r18, r28
     672:	3d 23       	and	r19, r29
     674:	04 2e       	mov	r0, r20
     676:	02 c0       	rjmp	.+4      	; 0x67c <calc_BitReversal+0x3a>
     678:	36 95       	lsr	r19
     67a:	27 95       	ror	r18
     67c:	0a 94       	dec	r0
     67e:	e2 f7       	brpl	.-8      	; 0x678 <calc_BitReversal+0x36>
     680:	06 2e       	mov	r0, r22
     682:	02 c0       	rjmp	.+4      	; 0x688 <calc_BitReversal+0x46>
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <calc_BitReversal+0x42>
     68c:	82 2b       	or	r24, r18
     68e:	93 2b       	or	r25, r19
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     690:	4f 5f       	subi	r20, 0xFF	; 255
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	61 50       	subi	r22, 0x01	; 1
     696:	71 09       	sbc	r23, r1
     698:	e4 17       	cp	r30, r20
     69a:	f5 07       	cpc	r31, r21
     69c:	08 f7       	brcc	.-62     	; 0x660 <calc_BitReversal+0x1e>
		Temp = (0x01<<i);                                                                                       //Creates bit mask to test bit i
		RValue |= (((Value&Temp)>>i)<<j);                                                                       //Tests bit i and shifts to jth position (Bit reversal)
	}

	return RValue;                                                                                              //Returns the bit reversed Value
}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <init_BRLookup>:



void init_BRLookup(uint16_t *Lookup_Reverse)
{
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	7c 01       	movw	r14, r24
	for(uint16_t i = 0; i < N; i++)
     6b2:	c0 e0       	ldi	r28, 0x00	; 0
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
     6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <init_BRLookup+0x2c>
	{
		Lookup_Reverse[i] = calc_BitReversal(i);																//Calculates the bit reversal for the fft input order
     6b8:	8e 01       	movw	r16, r28
     6ba:	00 0f       	add	r16, r16
     6bc:	11 1f       	adc	r17, r17
     6be:	0e 0d       	add	r16, r14
     6c0:	1f 1d       	adc	r17, r15
     6c2:	ce 01       	movw	r24, r28
     6c4:	0e 94 21 03 	call	0x642	; 0x642 <calc_BitReversal>
     6c8:	f8 01       	movw	r30, r16
     6ca:	80 83       	st	Z, r24
     6cc:	91 83       	std	Z+1, r25	; 0x01



void init_BRLookup(uint16_t *Lookup_Reverse)
{
	for(uint16_t i = 0; i < N; i++)
     6ce:	21 96       	adiw	r28, 0x01	; 1
     6d0:	c1 15       	cp	r28, r1
     6d2:	f2 e0       	ldi	r31, 0x02	; 2
     6d4:	df 07       	cpc	r29, r31
     6d6:	80 f3       	brcs	.-32     	; 0x6b8 <init_BRLookup+0x14>
	{
		Lookup_Reverse[i] = calc_BitReversal(i);																//Calculates the bit reversal for the fft input order
	}
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <init_avr_Wlookup>:



void init_avr_Wlookup(complexfloat *W)
{
     6e6:	6f 92       	push	r6
     6e8:	7f 92       	push	r7
     6ea:	8f 92       	push	r8
     6ec:	9f 92       	push	r9
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	60 97       	sbiw	r28, 0x10	; 16
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	3c 01       	movw	r6, r24
	complexfloat TempW;                                                                                         //Create temporary variable
	TempW.re = 1, TempW.im = 0;                                                                                 //Set to value W^0
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a0 e8       	ldi	r26, 0x80	; 128
     714:	bf e3       	ldi	r27, 0x3F	; 63
     716:	8d 83       	std	Y+5, r24	; 0x05
     718:	9e 83       	std	Y+6, r25	; 0x06
     71a:	af 83       	std	Y+7, r26	; 0x07
     71c:	b8 87       	std	Y+8, r27	; 0x08
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	1a 82       	std	Y+2, r1	; 0x02
     722:	1b 82       	std	Y+3, r1	; 0x03
     724:	1c 82       	std	Y+4, r1	; 0x04
	complexfloat Wk = cf_exp((-2*M_PI)/N);																		//Value Wn^1
     726:	6b ed       	ldi	r22, 0xDB	; 219
     728:	7f e0       	ldi	r23, 0x0F	; 15
     72a:	89 e4       	ldi	r24, 0x49	; 73
     72c:	9c eb       	ldi	r25, 0xBC	; 188
     72e:	0e 94 1d 02 	call	0x43a	; 0x43a <cf_exp>
     732:	29 87       	std	Y+9, r18	; 0x09
     734:	3a 87       	std	Y+10, r19	; 0x0a
     736:	4b 87       	std	Y+11, r20	; 0x0b
     738:	5c 87       	std	Y+12, r21	; 0x0c
     73a:	6d 87       	std	Y+13, r22	; 0x0d
     73c:	7e 87       	std	Y+14, r23	; 0x0e
     73e:	8f 87       	std	Y+15, r24	; 0x0f
     740:	98 8b       	std	Y+16, r25	; 0x10

	for(uint16_t i = 0; i < (N/2); i++)
     742:	81 2c       	mov	r8, r1
     744:	91 2c       	mov	r9, r1
     746:	36 c0       	rjmp	.+108    	; 0x7b4 <init_avr_Wlookup+0xce>
	{
		W[i].re = TempW.re;                                                                                     //Generate twiddle factors
     748:	f4 01       	movw	r30, r8
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	ee 0f       	add	r30, r30
     750:	ff 1f       	adc	r31, r31
     752:	ee 0f       	add	r30, r30
     754:	ff 1f       	adc	r31, r31
     756:	e6 0d       	add	r30, r6
     758:	f7 1d       	adc	r31, r7
     75a:	8d 81       	ldd	r24, Y+5	; 0x05
     75c:	9e 81       	ldd	r25, Y+6	; 0x06
     75e:	af 81       	ldd	r26, Y+7	; 0x07
     760:	b8 85       	ldd	r27, Y+8	; 0x08
     762:	84 83       	std	Z+4, r24	; 0x04
     764:	95 83       	std	Z+5, r25	; 0x05
     766:	a6 83       	std	Z+6, r26	; 0x06
     768:	b7 83       	std	Z+7, r27	; 0x07
		W[i].im = TempW.im;
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	ab 81       	ldd	r26, Y+3	; 0x03
     770:	bc 81       	ldd	r27, Y+4	; 0x04
     772:	80 83       	st	Z, r24
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	a2 83       	std	Z+2, r26	; 0x02
     778:	b3 83       	std	Z+3, r27	; 0x03

		TempW = cf_multiply(TempW, Wk);																			//Update temporary variable (W^(i+1))
     77a:	a9 84       	ldd	r10, Y+9	; 0x09
     77c:	ba 84       	ldd	r11, Y+10	; 0x0a
     77e:	cb 84       	ldd	r12, Y+11	; 0x0b
     780:	dc 84       	ldd	r13, Y+12	; 0x0c
     782:	ed 84       	ldd	r14, Y+13	; 0x0d
     784:	fe 84       	ldd	r15, Y+14	; 0x0e
     786:	0f 85       	ldd	r16, Y+15	; 0x0f
     788:	18 89       	ldd	r17, Y+16	; 0x10
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	3a 81       	ldd	r19, Y+2	; 0x02
     78e:	4b 81       	ldd	r20, Y+3	; 0x03
     790:	5c 81       	ldd	r21, Y+4	; 0x04
     792:	6d 81       	ldd	r22, Y+5	; 0x05
     794:	7e 81       	ldd	r23, Y+6	; 0x06
     796:	8f 81       	ldd	r24, Y+7	; 0x07
     798:	98 85       	ldd	r25, Y+8	; 0x08
     79a:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     79e:	29 83       	std	Y+1, r18	; 0x01
     7a0:	3a 83       	std	Y+2, r19	; 0x02
     7a2:	4b 83       	std	Y+3, r20	; 0x03
     7a4:	5c 83       	std	Y+4, r21	; 0x04
     7a6:	6d 83       	std	Y+5, r22	; 0x05
     7a8:	7e 83       	std	Y+6, r23	; 0x06
     7aa:	8f 83       	std	Y+7, r24	; 0x07
     7ac:	98 87       	std	Y+8, r25	; 0x08
{
	complexfloat TempW;                                                                                         //Create temporary variable
	TempW.re = 1, TempW.im = 0;                                                                                 //Set to value W^0
	complexfloat Wk = cf_exp((-2*M_PI)/N);																		//Value Wn^1

	for(uint16_t i = 0; i < (N/2); i++)
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	88 1a       	sub	r8, r24
     7b2:	98 0a       	sbc	r9, r24
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	88 16       	cp	r8, r24
     7b8:	91 04       	cpc	r9, r1
     7ba:	31 f2       	breq	.-116    	; 0x748 <init_avr_Wlookup+0x62>
     7bc:	28 f2       	brcs	.-118    	; 0x748 <init_avr_Wlookup+0x62>
		W[i].re = TempW.re;                                                                                     //Generate twiddle factors
		W[i].im = TempW.im;

		TempW = cf_multiply(TempW, Wk);																			//Update temporary variable (W^(i+1))
	}
}
     7be:	60 96       	adiw	r28, 0x10	; 16
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	9f 90       	pop	r9
     7da:	8f 90       	pop	r8
     7dc:	7f 90       	pop	r7
     7de:	6f 90       	pop	r6
     7e0:	08 95       	ret

000007e2 <apply_avr_Window>:



void apply_avr_Window(complexfloat *FFT_Array, float *Window, uint16_t *Lookup_Reverse)
{
     7e2:	6f 92       	push	r6
     7e4:	7f 92       	push	r7
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	6c 01       	movw	r12, r24
     800:	5b 01       	movw	r10, r22
     802:	4a 01       	movw	r8, r20
	for(uint16_t i = 0; i < (N/2); i++)
     804:	61 2c       	mov	r6, r1
     806:	71 2c       	mov	r7, r1
     808:	2f c0       	rjmp	.+94     	; 0x868 <apply_avr_Window+0x86>
	{
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
     80a:	f3 01       	movw	r30, r6
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	e8 0d       	add	r30, r8
     812:	f9 1d       	adc	r31, r9
     814:	c0 81       	ld	r28, Z
     816:	d1 81       	ldd	r29, Z+1	; 0x01
     818:	cc 0f       	add	r28, r28
     81a:	dd 1f       	adc	r29, r29
     81c:	cc 0f       	add	r28, r28
     81e:	dd 1f       	adc	r29, r29
     820:	cc 0f       	add	r28, r28
     822:	dd 1f       	adc	r29, r29
     824:	f3 01       	movw	r30, r6
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	ea 0d       	add	r30, r10
     830:	fb 1d       	adc	r31, r11
     832:	e0 80       	ld	r14, Z
     834:	f1 80       	ldd	r15, Z+1	; 0x01
     836:	02 81       	ldd	r16, Z+2	; 0x02
     838:	13 81       	ldd	r17, Z+3	; 0x03
     83a:	cc 0d       	add	r28, r12
     83c:	dd 1d       	adc	r29, r13
     83e:	28 81       	ld	r18, Y
     840:	39 81       	ldd	r19, Y+1	; 0x01
     842:	4a 81       	ldd	r20, Y+2	; 0x02
     844:	5b 81       	ldd	r21, Y+3	; 0x03
     846:	6c 81       	ldd	r22, Y+4	; 0x04
     848:	7d 81       	ldd	r23, Y+5	; 0x05
     84a:	8e 81       	ldd	r24, Y+6	; 0x06
     84c:	9f 81       	ldd	r25, Y+7	; 0x07
     84e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_multiply_rf>
     852:	28 83       	st	Y, r18
     854:	39 83       	std	Y+1, r19	; 0x01
     856:	4a 83       	std	Y+2, r20	; 0x02
     858:	5b 83       	std	Y+3, r21	; 0x03
     85a:	6c 83       	std	Y+4, r22	; 0x04
     85c:	7d 83       	std	Y+5, r23	; 0x05
     85e:	8e 83       	std	Y+6, r24	; 0x06
     860:	9f 83       	std	Y+7, r25	; 0x07



void apply_avr_Window(complexfloat *FFT_Array, float *Window, uint16_t *Lookup_Reverse)
{
	for(uint16_t i = 0; i < (N/2); i++)
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	68 1a       	sub	r6, r24
     866:	78 0a       	sbc	r7, r24
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	68 16       	cp	r6, r24
     86c:	71 04       	cpc	r7, r1
     86e:	69 f2       	breq	.-102    	; 0x80a <apply_avr_Window+0x28>
     870:	60 f2       	brcs	.-104    	; 0x80a <apply_avr_Window+0x28>
     872:	61 2c       	mov	r6, r1
     874:	77 24       	eor	r7, r7
     876:	73 94       	inc	r7
     878:	35 c0       	rjmp	.+106    	; 0x8e4 <apply_avr_Window+0x102>
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
	}

	for(uint16_t i = (N/2); i > 0; i--)
	{
		FFT_Array[Lookup_Reverse[N-i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[N-i]], Window[i-1]);			//Apply window to second half of samples
     87a:	ee 27       	eor	r30, r30
     87c:	ff 27       	eor	r31, r31
     87e:	e6 19       	sub	r30, r6
     880:	f7 09       	sbc	r31, r7
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	e8 0d       	add	r30, r8
     888:	f9 1d       	adc	r31, r9
     88a:	fc 5f       	subi	r31, 0xFC	; 252
     88c:	c0 81       	ld	r28, Z
     88e:	d1 81       	ldd	r29, Z+1	; 0x01
     890:	cc 0f       	add	r28, r28
     892:	dd 1f       	adc	r29, r29
     894:	cc 0f       	add	r28, r28
     896:	dd 1f       	adc	r29, r29
     898:	cc 0f       	add	r28, r28
     89a:	dd 1f       	adc	r29, r29
     89c:	f3 01       	movw	r30, r6
     89e:	e1 50       	subi	r30, 0x01	; 1
     8a0:	f0 4c       	sbci	r31, 0xC0	; 192
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	ea 0d       	add	r30, r10
     8ac:	fb 1d       	adc	r31, r11
     8ae:	e0 80       	ld	r14, Z
     8b0:	f1 80       	ldd	r15, Z+1	; 0x01
     8b2:	02 81       	ldd	r16, Z+2	; 0x02
     8b4:	13 81       	ldd	r17, Z+3	; 0x03
     8b6:	cc 0d       	add	r28, r12
     8b8:	dd 1d       	adc	r29, r13
     8ba:	28 81       	ld	r18, Y
     8bc:	39 81       	ldd	r19, Y+1	; 0x01
     8be:	4a 81       	ldd	r20, Y+2	; 0x02
     8c0:	5b 81       	ldd	r21, Y+3	; 0x03
     8c2:	6c 81       	ldd	r22, Y+4	; 0x04
     8c4:	7d 81       	ldd	r23, Y+5	; 0x05
     8c6:	8e 81       	ldd	r24, Y+6	; 0x06
     8c8:	9f 81       	ldd	r25, Y+7	; 0x07
     8ca:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_multiply_rf>
     8ce:	28 83       	st	Y, r18
     8d0:	39 83       	std	Y+1, r19	; 0x01
     8d2:	4a 83       	std	Y+2, r20	; 0x02
     8d4:	5b 83       	std	Y+3, r21	; 0x03
     8d6:	6c 83       	std	Y+4, r22	; 0x04
     8d8:	7d 83       	std	Y+5, r23	; 0x05
     8da:	8e 83       	std	Y+6, r24	; 0x06
     8dc:	9f 83       	std	Y+7, r25	; 0x07
	for(uint16_t i = 0; i < (N/2); i++)
	{
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
	}

	for(uint16_t i = (N/2); i > 0; i--)
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	68 1a       	sub	r6, r24
     8e2:	71 08       	sbc	r7, r1
     8e4:	61 14       	cp	r6, r1
     8e6:	71 04       	cpc	r7, r1
     8e8:	41 f6       	brne	.-112    	; 0x87a <apply_avr_Window+0x98>
	{
		FFT_Array[Lookup_Reverse[N-i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[N-i]], Window[i-1]);			//Apply window to second half of samples
	}
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	7f 90       	pop	r7
     904:	6f 90       	pop	r6
     906:	08 95       	ret

00000908 <calc_avr_FFT>:



void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	62 97       	sbiw	r28, 0x12	; 18
     932:	cd bf       	out	0x3d, r28	; 61
     934:	de bf       	out	0x3e, r29	; 62
     936:	1c 01       	movw	r2, r24
     938:	6f 87       	std	Y+15, r22	; 0x0f
     93a:	78 8b       	std	Y+16, r23	; 0x10
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     93c:	19 8a       	std	Y+17, r1	; 0x11
     93e:	1a 8a       	std	Y+18, r1	; 0x12

void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step
     940:	22 e0       	ldi	r18, 0x02	; 2
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	29 87       	std	Y+9, r18	; 0x09
     946:	3a 87       	std	Y+10, r19	; 0x0a



void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	8d 87       	std	Y+13, r24	; 0x0d
     94e:	9e 87       	std	Y+14, r25	; 0x0e
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     950:	d4 c0       	rjmp	.+424    	; 0xafa <calc_avr_FFT+0x1f2>
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
		{
			for(uint16_t k = 0; k < ((N/PCalc)/2); k++)                                                         //Calculation in one parallel
			{
				Temp = cf_multiply(FFT_Array[(CNr*j)+(k+(CNr/2))], W[k*((N/2)/(CNr/2))]);						//Calculates multiplication in butterfly
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	69 84       	ldd	r6, Y+9	; 0x09
     958:	7a 84       	ldd	r7, Y+10	; 0x0a
     95a:	76 94       	lsr	r7
     95c:	67 94       	ror	r6
     95e:	b3 01       	movw	r22, r6
     960:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__udivmodhi4>
     964:	46 9e       	mul	r4, r22
     966:	d0 01       	movw	r26, r0
     968:	47 9e       	mul	r4, r23
     96a:	b0 0d       	add	r27, r0
     96c:	56 9e       	mul	r5, r22
     96e:	b0 0d       	add	r27, r0
     970:	11 24       	eor	r1, r1
     972:	aa 0f       	add	r26, r26
     974:	bb 1f       	adc	r27, r27
     976:	aa 0f       	add	r26, r26
     978:	bb 1f       	adc	r27, r27
     97a:	aa 0f       	add	r26, r26
     97c:	bb 1f       	adc	r27, r27
     97e:	ef 85       	ldd	r30, Y+15	; 0x0f
     980:	f8 89       	ldd	r31, Y+16	; 0x10
     982:	ae 0f       	add	r26, r30
     984:	bf 1f       	adc	r27, r31
     986:	29 85       	ldd	r18, Y+9	; 0x09
     988:	3a 85       	ldd	r19, Y+10	; 0x0a
     98a:	8b 85       	ldd	r24, Y+11	; 0x0b
     98c:	9c 85       	ldd	r25, Y+12	; 0x0c
     98e:	28 9f       	mul	r18, r24
     990:	40 01       	movw	r8, r0
     992:	29 9f       	mul	r18, r25
     994:	90 0c       	add	r9, r0
     996:	38 9f       	mul	r19, r24
     998:	90 0c       	add	r9, r0
     99a:	11 24       	eor	r1, r1
     99c:	f2 01       	movw	r30, r4
     99e:	e6 0d       	add	r30, r6
     9a0:	f7 1d       	adc	r31, r7
     9a2:	e8 0d       	add	r30, r8
     9a4:	f9 1d       	adc	r31, r9
     9a6:	ee 0f       	add	r30, r30
     9a8:	ff 1f       	adc	r31, r31
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e2 0d       	add	r30, r2
     9b4:	f3 1d       	adc	r31, r3
     9b6:	ac 90       	ld	r10, X
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	bc 90       	ld	r11, X
     9bc:	11 97       	sbiw	r26, 0x01	; 1
     9be:	12 96       	adiw	r26, 0x02	; 2
     9c0:	cc 90       	ld	r12, X
     9c2:	12 97       	sbiw	r26, 0x02	; 2
     9c4:	13 96       	adiw	r26, 0x03	; 3
     9c6:	dc 90       	ld	r13, X
     9c8:	13 97       	sbiw	r26, 0x03	; 3
     9ca:	14 96       	adiw	r26, 0x04	; 4
     9cc:	ec 90       	ld	r14, X
     9ce:	14 97       	sbiw	r26, 0x04	; 4
     9d0:	15 96       	adiw	r26, 0x05	; 5
     9d2:	fc 90       	ld	r15, X
     9d4:	15 97       	sbiw	r26, 0x05	; 5
     9d6:	16 96       	adiw	r26, 0x06	; 6
     9d8:	0c 91       	ld	r16, X
     9da:	16 97       	sbiw	r26, 0x06	; 6
     9dc:	17 96       	adiw	r26, 0x07	; 7
     9de:	1c 91       	ld	r17, X
     9e0:	20 81       	ld	r18, Z
     9e2:	31 81       	ldd	r19, Z+1	; 0x01
     9e4:	42 81       	ldd	r20, Z+2	; 0x02
     9e6:	53 81       	ldd	r21, Z+3	; 0x03
     9e8:	64 81       	ldd	r22, Z+4	; 0x04
     9ea:	75 81       	ldd	r23, Z+5	; 0x05
     9ec:	86 81       	ldd	r24, Z+6	; 0x06
     9ee:	97 81       	ldd	r25, Z+7	; 0x07
     9f0:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     9f4:	29 83       	std	Y+1, r18	; 0x01
     9f6:	3a 83       	std	Y+2, r19	; 0x02
     9f8:	4b 83       	std	Y+3, r20	; 0x03
     9fa:	5c 83       	std	Y+4, r21	; 0x04
     9fc:	6d 83       	std	Y+5, r22	; 0x05
     9fe:	7e 83       	std	Y+6, r23	; 0x06
     a00:	8f 83       	std	Y+7, r24	; 0x07
     a02:	98 87       	std	Y+8, r25	; 0x08
				FFT_Array[((j*CNr)+k)+(CNr/2)] = cf_minus(FFT_Array[(j*CNr)+k],Temp);							//Calculates and stores bottom of butterfly
     a04:	84 0c       	add	r8, r4
     a06:	95 1c       	adc	r9, r5
     a08:	68 0c       	add	r6, r8
     a0a:	79 1c       	adc	r7, r9
     a0c:	66 0c       	add	r6, r6
     a0e:	77 1c       	adc	r7, r7
     a10:	66 0c       	add	r6, r6
     a12:	77 1c       	adc	r7, r7
     a14:	66 0c       	add	r6, r6
     a16:	77 1c       	adc	r7, r7
     a18:	62 0c       	add	r6, r2
     a1a:	73 1c       	adc	r7, r3
     a1c:	88 0c       	add	r8, r8
     a1e:	99 1c       	adc	r9, r9
     a20:	88 0c       	add	r8, r8
     a22:	99 1c       	adc	r9, r9
     a24:	88 0c       	add	r8, r8
     a26:	99 1c       	adc	r9, r9
     a28:	82 0c       	add	r8, r2
     a2a:	93 1c       	adc	r9, r3
     a2c:	a2 2e       	mov	r10, r18
     a2e:	b3 2e       	mov	r11, r19
     a30:	c4 2e       	mov	r12, r20
     a32:	d5 2e       	mov	r13, r21
     a34:	e6 2e       	mov	r14, r22
     a36:	f7 2e       	mov	r15, r23
     a38:	08 2f       	mov	r16, r24
     a3a:	19 2f       	mov	r17, r25
     a3c:	f4 01       	movw	r30, r8
     a3e:	20 81       	ld	r18, Z
     a40:	31 81       	ldd	r19, Z+1	; 0x01
     a42:	42 81       	ldd	r20, Z+2	; 0x02
     a44:	53 81       	ldd	r21, Z+3	; 0x03
     a46:	64 81       	ldd	r22, Z+4	; 0x04
     a48:	75 81       	ldd	r23, Z+5	; 0x05
     a4a:	86 81       	ldd	r24, Z+6	; 0x06
     a4c:	97 81       	ldd	r25, Z+7	; 0x07
     a4e:	0e 94 c7 02 	call	0x58e	; 0x58e <cf_minus>
     a52:	f3 01       	movw	r30, r6
     a54:	20 83       	st	Z, r18
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	42 83       	std	Z+2, r20	; 0x02
     a5a:	53 83       	std	Z+3, r21	; 0x03
     a5c:	64 83       	std	Z+4, r22	; 0x04
     a5e:	75 83       	std	Z+5, r23	; 0x05
     a60:	86 83       	std	Z+6, r24	; 0x06
     a62:	97 83       	std	Z+7, r25	; 0x07
				FFT_Array[(j*CNr)+k] = cf_plus(FFT_Array[(j*CNr)+k],Temp);										//Calculates and stores top of butterfly
     a64:	a9 80       	ldd	r10, Y+1	; 0x01
     a66:	ba 80       	ldd	r11, Y+2	; 0x02
     a68:	cb 80       	ldd	r12, Y+3	; 0x03
     a6a:	dc 80       	ldd	r13, Y+4	; 0x04
     a6c:	ed 80       	ldd	r14, Y+5	; 0x05
     a6e:	fe 80       	ldd	r15, Y+6	; 0x06
     a70:	0f 81       	ldd	r16, Y+7	; 0x07
     a72:	18 85       	ldd	r17, Y+8	; 0x08
     a74:	f4 01       	movw	r30, r8
     a76:	20 81       	ld	r18, Z
     a78:	31 81       	ldd	r19, Z+1	; 0x01
     a7a:	42 81       	ldd	r20, Z+2	; 0x02
     a7c:	53 81       	ldd	r21, Z+3	; 0x03
     a7e:	64 81       	ldd	r22, Z+4	; 0x04
     a80:	75 81       	ldd	r23, Z+5	; 0x05
     a82:	86 81       	ldd	r24, Z+6	; 0x06
     a84:	97 81       	ldd	r25, Z+7	; 0x07
     a86:	0e 94 6d 02 	call	0x4da	; 0x4da <cf_plus>
     a8a:	f4 01       	movw	r30, r8
     a8c:	20 83       	st	Z, r18
     a8e:	31 83       	std	Z+1, r19	; 0x01
     a90:	42 83       	std	Z+2, r20	; 0x02
     a92:	53 83       	std	Z+3, r21	; 0x03
     a94:	64 83       	std	Z+4, r22	; 0x04
     a96:	75 83       	std	Z+5, r23	; 0x05
     a98:	86 83       	std	Z+6, r24	; 0x06
     a9a:	97 83       	std	Z+7, r25	; 0x07

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
		{
			for(uint16_t k = 0; k < ((N/PCalc)/2); k++)                                                         //Calculation in one parallel
     a9c:	ff ef       	ldi	r31, 0xFF	; 255
     a9e:	4f 1a       	sub	r4, r31
     aa0:	5f 0a       	sbc	r5, r31
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <calc_avr_FFT+0x1a0>
     aa4:	41 2c       	mov	r4, r1
     aa6:	51 2c       	mov	r5, r1
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	6d 85       	ldd	r22, Y+13	; 0x0d
     aae:	7e 85       	ldd	r23, Y+14	; 0x0e
     ab0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__udivmodhi4>
     ab4:	46 16       	cp	r4, r22
     ab6:	57 06       	cpc	r5, r23
     ab8:	08 f4       	brcc	.+2      	; 0xabc <calc_avr_FFT+0x1b4>
     aba:	4b cf       	rjmp	.-362    	; 0x952 <calc_avr_FFT+0x4a>
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
     abc:	2b 85       	ldd	r18, Y+11	; 0x0b
     abe:	3c 85       	ldd	r19, Y+12	; 0x0c
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	2b 87       	std	Y+11, r18	; 0x0b
     ac6:	3c 87       	std	Y+12, r19	; 0x0c
     ac8:	02 c0       	rjmp	.+4      	; 0xace <calc_avr_FFT+0x1c6>
     aca:	1b 86       	std	Y+11, r1	; 0x0b
     acc:	1c 86       	std	Y+12, r1	; 0x0c
     ace:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ad2:	eb 85       	ldd	r30, Y+11	; 0x0b
     ad4:	fc 85       	ldd	r31, Y+12	; 0x0c
     ad6:	e8 17       	cp	r30, r24
     ad8:	f9 07       	cpc	r31, r25
     ada:	20 f3       	brcs	.-56     	; 0xaa4 <calc_avr_FFT+0x19c>
				FFT_Array[((j*CNr)+k)+(CNr/2)] = cf_minus(FFT_Array[(j*CNr)+k],Temp);							//Calculates and stores bottom of butterfly
				FFT_Array[(j*CNr)+k] = cf_plus(FFT_Array[(j*CNr)+k],Temp);										//Calculates and stores top of butterfly
			}
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
     adc:	29 85       	ldd	r18, Y+9	; 0x09
     ade:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae0:	22 0f       	add	r18, r18
     ae2:	33 1f       	adc	r19, r19
     ae4:	29 87       	std	Y+9, r18	; 0x09
     ae6:	3a 87       	std	Y+10, r19	; 0x0a
		PCalc /= 2;                                                                                             //Set parallel computations to half
     ae8:	96 95       	lsr	r25
     aea:	87 95       	ror	r24
     aec:	8d 87       	std	Y+13, r24	; 0x0d
     aee:	9e 87       	std	Y+14, r25	; 0x0e
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     af0:	89 89       	ldd	r24, Y+17	; 0x11
     af2:	9a 89       	ldd	r25, Y+18	; 0x12
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	89 8b       	std	Y+17, r24	; 0x11
     af8:	9a 8b       	std	Y+18, r25	; 0x12
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     b02:	e9 89       	ldd	r30, Y+17	; 0x11
     b04:	fa 89       	ldd	r31, Y+18	; 0x12
     b06:	e8 17       	cp	r30, r24
     b08:	f9 07       	cpc	r31, r25
     b0a:	f8 f2       	brcs	.-66     	; 0xaca <calc_avr_FFT+0x1c2>
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
		PCalc /= 2;                                                                                             //Set parallel computations to half
	}
}
     b0c:	62 96       	adiw	r28, 0x12	; 18
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	af 90       	pop	r10
     b26:	9f 90       	pop	r9
     b28:	8f 90       	pop	r8
     b2a:	7f 90       	pop	r7
     b2c:	6f 90       	pop	r6
     b2e:	5f 90       	pop	r5
     b30:	4f 90       	pop	r4
     b32:	3f 90       	pop	r3
     b34:	2f 90       	pop	r2
     b36:	08 95       	ret

00000b38 <init_Window>:

void init_Window(float *Window)
{
     b38:	4f 92       	push	r4
     b3a:	5f 92       	push	r5
     b3c:	6f 92       	push	r6
     b3e:	7f 92       	push	r7
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	5c 01       	movw	r10, r24
	for(uint16_t i = 0; i < (N/2); i++)
     b56:	c0 e0       	ldi	r28, 0x00	; 0
     b58:	d0 e0       	ldi	r29, 0x00	; 0
     b5a:	6c c0       	rjmp	.+216    	; 0xc34 <init_Window+0xfc>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
     b5c:	8e 01       	movw	r16, r28
     b5e:	00 0f       	add	r16, r16
     b60:	11 1f       	adc	r17, r17
     b62:	00 0f       	add	r16, r16
     b64:	11 1f       	adc	r17, r17
     b66:	0a 0d       	add	r16, r10
     b68:	1b 1d       	adc	r17, r11
     b6a:	be 01       	movw	r22, r28
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__floatunsisf>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
     b78:	2b ed       	ldi	r18, 0xDB	; 219
     b7a:	3f e0       	ldi	r19, 0x0F	; 15
     b7c:	49 ec       	ldi	r20, 0xC9	; 201
     b7e:	50 e4       	ldi	r21, 0x40	; 64
     b80:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	5b e3       	ldi	r21, 0x3B	; 59
     b8c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     b90:	0e 94 05 0a 	call	0x140a	; 0x140a <cos>
     b94:	26 e2       	ldi	r18, 0x26	; 38
     b96:	31 e0       	ldi	r19, 0x01	; 1
     b98:	4a ef       	ldi	r20, 0xFA	; 250
     b9a:	5e e3       	ldi	r21, 0x3E	; 62
     b9c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	64 e1       	ldi	r22, 0x14	; 20
     ba6:	7e ea       	ldi	r23, 0xAE	; 174
     ba8:	87 eb       	ldi	r24, 0xB7	; 183
     baa:	9e e3       	ldi	r25, 0x3E	; 62
     bac:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
     bb0:	2b 01       	movw	r4, r22
     bb2:	3c 01       	movw	r6, r24
     bb4:	2b ed       	ldi	r18, 0xDB	; 219
     bb6:	3f e0       	ldi	r19, 0x0F	; 15
     bb8:	49 e4       	ldi	r20, 0x49	; 73
     bba:	51 e4       	ldi	r21, 0x41	; 65
     bbc:	c7 01       	movw	r24, r14
     bbe:	b6 01       	movw	r22, r12
     bc0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	5b e3       	ldi	r21, 0x3B	; 59
     bcc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     bd0:	0e 94 05 0a 	call	0x140a	; 0x140a <cos>
     bd4:	24 eb       	ldi	r18, 0xB4	; 180
     bd6:	3b ea       	ldi	r19, 0xAB	; 171
     bd8:	40 e1       	ldi	r20, 0x10	; 16
     bda:	5e e3       	ldi	r21, 0x3E	; 62
     bdc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	c3 01       	movw	r24, r6
     be6:	b2 01       	movw	r22, r4
     be8:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     bec:	2b 01       	movw	r4, r22
     bee:	3c 01       	movw	r6, r24
     bf0:	24 ee       	ldi	r18, 0xE4	; 228
     bf2:	3b ec       	ldi	r19, 0xCB	; 203
     bf4:	46 e9       	ldi	r20, 0x96	; 150
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	c7 01       	movw	r24, r14
     bfa:	b6 01       	movw	r22, r12
     bfc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	5b e3       	ldi	r21, 0x3B	; 59
     c08:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     c0c:	0e 94 05 0a 	call	0x140a	; 0x140a <cos>
     c10:	29 e7       	ldi	r18, 0x79	; 121
     c12:	3d e5       	ldi	r19, 0x5D	; 93
     c14:	4f e3       	ldi	r20, 0x3F	; 63
     c16:	5c e3       	ldi	r21, 0x3C	; 60
     c18:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     c1c:	9b 01       	movw	r18, r22
     c1e:	ac 01       	movw	r20, r24
     c20:	c3 01       	movw	r24, r6
     c22:	b2 01       	movw	r22, r4
     c24:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
     c28:	f8 01       	movw	r30, r16
     c2a:	60 83       	st	Z, r22
     c2c:	71 83       	std	Z+1, r23	; 0x01
     c2e:	82 83       	std	Z+2, r24	; 0x02
     c30:	93 83       	std	Z+3, r25	; 0x03
	}
}

void init_Window(float *Window)
{
	for(uint16_t i = 0; i < (N/2); i++)
     c32:	21 96       	adiw	r28, 0x01	; 1
     c34:	cf 3f       	cpi	r28, 0xFF	; 255
     c36:	d1 05       	cpc	r29, r1
     c38:	09 f0       	breq	.+2      	; 0xc3c <init_Window+0x104>
     c3a:	08 f4       	brcc	.+2      	; 0xc3e <init_Window+0x106>
     c3c:	8f cf       	rjmp	.-226    	; 0xb5c <init_Window+0x24>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
	}
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	7f 90       	pop	r7
     c54:	6f 90       	pop	r6
     c56:	5f 90       	pop	r5
     c58:	4f 90       	pop	r4
     c5a:	08 95       	ret

00000c5c <Compute_ABS_spectrum>:
	}
}


void Compute_ABS_spectrum(complexfloat *FFT_Array, float *DSP_Array)
{
     c5c:	2f 92       	push	r2
     c5e:	3f 92       	push	r3
     c60:	4f 92       	push	r4
     c62:	5f 92       	push	r5
     c64:	6f 92       	push	r6
     c66:	7f 92       	push	r7
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	7c 01       	movw	r14, r24
     c82:	6b 01       	movw	r12, r22
	uint16_t MinSample = N/2;																							//Sample of most negative frequency bin
	
	for(uint16_t i = MinSample; i < N; i++)
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	d1 e0       	ldi	r29, 0x01	; 1
     c88:	35 c0       	rjmp	.+106    	; 0xcf4 <Compute_ABS_spectrum+0x98>
	{
		DSP_Array[i-MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate negative frequency vector length
     c8a:	1e 01       	movw	r2, r28
     c8c:	3a 94       	dec	r3
     c8e:	22 0c       	add	r2, r2
     c90:	33 1c       	adc	r3, r3
     c92:	22 0c       	add	r2, r2
     c94:	33 1c       	adc	r3, r3
     c96:	2c 0c       	add	r2, r12
     c98:	3d 1c       	adc	r3, r13
     c9a:	8e 01       	movw	r16, r28
     c9c:	00 0f       	add	r16, r16
     c9e:	11 1f       	adc	r17, r17
     ca0:	00 0f       	add	r16, r16
     ca2:	11 1f       	adc	r17, r17
     ca4:	00 0f       	add	r16, r16
     ca6:	11 1f       	adc	r17, r17
     ca8:	0e 0d       	add	r16, r14
     caa:	1f 1d       	adc	r17, r15
     cac:	f8 01       	movw	r30, r16
     cae:	60 81       	ld	r22, Z
     cb0:	71 81       	ldd	r23, Z+1	; 0x01
     cb2:	82 81       	ldd	r24, Z+2	; 0x02
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     cbe:	4b 01       	movw	r8, r22
     cc0:	5c 01       	movw	r10, r24
     cc2:	f8 01       	movw	r30, r16
     cc4:	64 81       	ldd	r22, Z+4	; 0x04
     cc6:	75 81       	ldd	r23, Z+5	; 0x05
     cc8:	86 81       	ldd	r24, Z+6	; 0x06
     cca:	97 81       	ldd	r25, Z+7	; 0x07
     ccc:	9b 01       	movw	r18, r22
     cce:	ac 01       	movw	r20, r24
     cd0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     cd4:	2b 01       	movw	r4, r22
     cd6:	3c 01       	movw	r6, r24
     cd8:	a3 01       	movw	r20, r6
     cda:	92 01       	movw	r18, r4
     cdc:	c5 01       	movw	r24, r10
     cde:	b4 01       	movw	r22, r8
     ce0:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     ce4:	0e 94 ed 0b 	call	0x17da	; 0x17da <sqrt>
     ce8:	f1 01       	movw	r30, r2
     cea:	60 83       	st	Z, r22
     cec:	71 83       	std	Z+1, r23	; 0x01
     cee:	82 83       	std	Z+2, r24	; 0x02
     cf0:	93 83       	std	Z+3, r25	; 0x03

void Compute_ABS_spectrum(complexfloat *FFT_Array, float *DSP_Array)
{
	uint16_t MinSample = N/2;																							//Sample of most negative frequency bin
	
	for(uint16_t i = MinSample; i < N; i++)
     cf2:	21 96       	adiw	r28, 0x01	; 1
     cf4:	c1 15       	cp	r28, r1
     cf6:	f2 e0       	ldi	r31, 0x02	; 2
     cf8:	df 07       	cpc	r29, r31
     cfa:	38 f2       	brcs	.-114    	; 0xc8a <Compute_ABS_spectrum+0x2e>
     cfc:	c0 e0       	ldi	r28, 0x00	; 0
     cfe:	d0 e0       	ldi	r29, 0x00	; 0
     d00:	35 c0       	rjmp	.+106    	; 0xd6c <Compute_ABS_spectrum+0x110>
		DSP_Array[i-MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate negative frequency vector length
	}

	for(uint16_t i = 0; i < MinSample; i++)
	{
		DSP_Array[i+MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate positive frequency vector length 
     d02:	1e 01       	movw	r2, r28
     d04:	33 94       	inc	r3
     d06:	22 0c       	add	r2, r2
     d08:	33 1c       	adc	r3, r3
     d0a:	22 0c       	add	r2, r2
     d0c:	33 1c       	adc	r3, r3
     d0e:	2c 0c       	add	r2, r12
     d10:	3d 1c       	adc	r3, r13
     d12:	8e 01       	movw	r16, r28
     d14:	00 0f       	add	r16, r16
     d16:	11 1f       	adc	r17, r17
     d18:	00 0f       	add	r16, r16
     d1a:	11 1f       	adc	r17, r17
     d1c:	00 0f       	add	r16, r16
     d1e:	11 1f       	adc	r17, r17
     d20:	0e 0d       	add	r16, r14
     d22:	1f 1d       	adc	r17, r15
     d24:	f8 01       	movw	r30, r16
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     d36:	4b 01       	movw	r8, r22
     d38:	5c 01       	movw	r10, r24
     d3a:	f8 01       	movw	r30, r16
     d3c:	64 81       	ldd	r22, Z+4	; 0x04
     d3e:	75 81       	ldd	r23, Z+5	; 0x05
     d40:	86 81       	ldd	r24, Z+6	; 0x06
     d42:	97 81       	ldd	r25, Z+7	; 0x07
     d44:	9b 01       	movw	r18, r22
     d46:	ac 01       	movw	r20, r24
     d48:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     d4c:	2b 01       	movw	r4, r22
     d4e:	3c 01       	movw	r6, r24
     d50:	a3 01       	movw	r20, r6
     d52:	92 01       	movw	r18, r4
     d54:	c5 01       	movw	r24, r10
     d56:	b4 01       	movw	r22, r8
     d58:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     d5c:	0e 94 ed 0b 	call	0x17da	; 0x17da <sqrt>
     d60:	f1 01       	movw	r30, r2
     d62:	60 83       	st	Z, r22
     d64:	71 83       	std	Z+1, r23	; 0x01
     d66:	82 83       	std	Z+2, r24	; 0x02
     d68:	93 83       	std	Z+3, r25	; 0x03
	for(uint16_t i = MinSample; i < N; i++)
	{
		DSP_Array[i-MinSample] = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate negative frequency vector length
	}

	for(uint16_t i = 0; i < MinSample; i++)
     d6a:	21 96       	adiw	r28, 0x01	; 1
     d6c:	cf 3f       	cpi	r28, 0xFF	; 255
     d6e:	d1 05       	cpc	r29, r1
     d70:	41 f2       	breq	.-112    	; 0xd02 <Compute_ABS_spectrum+0xa6>
     d72:	38 f2       	brcs	.-114    	; 0xd02 <Compute_ABS_spectrum+0xa6>

// 	for(uint16_t i = 0; i < N; i++)
// 	{
// 		writeF_UART(DSP_Array[i]);																						//Debug print spectrum
// 	}
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	cf 90       	pop	r12
     d84:	bf 90       	pop	r11
     d86:	af 90       	pop	r10
     d88:	9f 90       	pop	r9
     d8a:	8f 90       	pop	r8
     d8c:	7f 90       	pop	r7
     d8e:	6f 90       	pop	r6
     d90:	5f 90       	pop	r5
     d92:	4f 90       	pop	r4
     d94:	3f 90       	pop	r3
     d96:	2f 90       	pop	r2
     d98:	08 95       	ret

00000d9a <Get_speed>:

float Get_speed(float *DSP_Array)
{
     d9a:	8f 92       	push	r8
     d9c:	9f 92       	push	r9
     d9e:	af 92       	push	r10
     da0:	bf 92       	push	r11
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	8c 01       	movw	r16, r24
	int16_t Array_Index = 0;																							//Frequency bin
	float fd;																											//Doppler shift frequency
	float n_speed;																										//Normalized speed in kph
	
	for(uint16_t i = 1; i < N; i++)
     db4:	c1 e0       	ldi	r28, 0x01	; 1
     db6:	d0 e0       	ldi	r29, 0x00	; 0
// 	}
}

float Get_speed(float *DSP_Array)
{
	int16_t Array_Index = 0;																							//Frequency bin
     db8:	e1 2c       	mov	r14, r1
     dba:	f1 2c       	mov	r15, r1
	float fd;																											//Doppler shift frequency
	float n_speed;																										//Normalized speed in kph
	
	for(uint16_t i = 1; i < N; i++)
     dbc:	1c c0       	rjmp	.+56     	; 0xdf6 <Get_speed+0x5c>
	{
		if(DSP_Array[i] > DSP_Array[Array_Index])																		//Find highest peak by comparison
     dbe:	fe 01       	movw	r30, r28
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	e0 0f       	add	r30, r16
     dca:	f1 1f       	adc	r31, r17
     dcc:	60 81       	ld	r22, Z
     dce:	71 81       	ldd	r23, Z+1	; 0x01
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	93 81       	ldd	r25, Z+3	; 0x03
     dd4:	f7 01       	movw	r30, r14
     dd6:	ee 0f       	add	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	e0 0f       	add	r30, r16
     de0:	f1 1f       	adc	r31, r17
     de2:	20 81       	ld	r18, Z
     de4:	31 81       	ldd	r19, Z+1	; 0x01
     de6:	42 81       	ldd	r20, Z+2	; 0x02
     de8:	53 81       	ldd	r21, Z+3	; 0x03
     dea:	0e 94 6d 0b 	call	0x16da	; 0x16da <__gesf2>
     dee:	18 16       	cp	r1, r24
     df0:	0c f4       	brge	.+2      	; 0xdf4 <Get_speed+0x5a>
		{
			Array_Index = i;																							//store highest peak in array index																					
     df2:	7e 01       	movw	r14, r28
{
	int16_t Array_Index = 0;																							//Frequency bin
	float fd;																											//Doppler shift frequency
	float n_speed;																										//Normalized speed in kph
	
	for(uint16_t i = 1; i < N; i++)
     df4:	21 96       	adiw	r28, 0x01	; 1
     df6:	c1 15       	cp	r28, r1
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	d8 07       	cpc	r29, r24
     dfc:	00 f3       	brcs	.-64     	; 0xdbe <Get_speed+0x24>
		{
			Array_Index = i;																							//store highest peak in array index																					
		}
	}
	
	if(DSP_Array[Array_Index] < MIN_AMP)
     dfe:	f7 01       	movw	r30, r14
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	e0 0f       	add	r30, r16
     e0a:	f1 1f       	adc	r31, r17
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e4       	ldi	r19, 0x40	; 64
     e18:	4c e1       	ldi	r20, 0x1C	; 28
     e1a:	55 e4       	ldi	r21, 0x45	; 69
     e1c:	0e 94 00 0a 	call	0x1400	; 0x1400 <__cmpsf2>
     e20:	88 23       	and	r24, r24
     e22:	1c f4       	brge	.+6      	; 0xe2a <Get_speed+0x90>
	{
		Array_Index = (N/2);																							//Peak is lower than the specified minimum peak value and sets peak index to default zero
     e24:	e1 2c       	mov	r14, r1
     e26:	ff 24       	eor	r15, r15
     e28:	f3 94       	inc	r15
	}
	
	Array_Index -= (N/2);																								//creates +- frequency bin index from true 0 Hz
     e2a:	fa 94       	dec	r15
	fd = Array_Index * F_BIN;																							//Calculates the Doppler shift based on highest frequency bin peak
     e2c:	b7 01       	movw	r22, r14
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	6e 0d       	add	r22, r14
     e3c:	7f 1d       	adc	r23, r15
     e3e:	07 2e       	mov	r0, r23
     e40:	00 0c       	add	r0, r0
     e42:	88 0b       	sbc	r24, r24
     e44:	99 0b       	sbc	r25, r25
     e46:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__floatsisf>
     e4a:	6b 01       	movw	r12, r22
     e4c:	7c 01       	movw	r14, r24
	
	n_speed = (((((C*fd)/F0)-C)/(((fd/F0)+1)*cosf(A_rad))*3.6)*F_CAL);													//Calculates boat speed in kph
     e4e:	25 e1       	ldi	r18, 0x15	; 21
     e50:	39 ee       	ldi	r19, 0xE9	; 233
     e52:	4e e8       	ldi	r20, 0x8E	; 142
     e54:	5d e4       	ldi	r21, 0x4D	; 77
     e56:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     e5a:	29 ec       	ldi	r18, 0xC9	; 201
     e5c:	3e eb       	ldi	r19, 0xBE	; 190
     e5e:	43 eb       	ldi	r20, 0xB3	; 179
     e60:	50 e5       	ldi	r21, 0x50	; 80
     e62:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     e66:	25 e1       	ldi	r18, 0x15	; 21
     e68:	39 ee       	ldi	r19, 0xE9	; 233
     e6a:	4e e8       	ldi	r20, 0x8E	; 142
     e6c:	5d e4       	ldi	r21, 0x4D	; 77
     e6e:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
     e72:	4b 01       	movw	r8, r22
     e74:	5c 01       	movw	r10, r24
     e76:	29 ec       	ldi	r18, 0xC9	; 201
     e78:	3e eb       	ldi	r19, 0xBE	; 190
     e7a:	43 eb       	ldi	r20, 0xB3	; 179
     e7c:	50 e5       	ldi	r21, 0x50	; 80
     e7e:	c7 01       	movw	r24, r14
     e80:	b6 01       	movw	r22, r12
     e82:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e8       	ldi	r20, 0x80	; 128
     e8c:	5f e3       	ldi	r21, 0x3F	; 63
     e8e:	0e 94 94 09 	call	0x1328	; 0x1328 <__addsf3>
     e92:	9b 01       	movw	r18, r22
     e94:	ac 01       	movw	r20, r24
     e96:	c5 01       	movw	r24, r10
     e98:	b4 01       	movw	r22, r8
     e9a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     e9e:	26 e6       	ldi	r18, 0x66	; 102
     ea0:	36 e6       	ldi	r19, 0x66	; 102
     ea2:	46 e6       	ldi	r20, 0x66	; 102
     ea4:	50 e4       	ldi	r21, 0x40	; 64
     ea6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
	
	return n_speed;
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	08 95       	ret

00000ec4 <stop_timer>:
     ec4:	e0 e0       	ldi	r30, 0x00	; 0
     ec6:	fa e0       	ldi	r31, 0x0A	; 10
     ec8:	10 82       	st	Z, r1
     eca:	86 81       	ldd	r24, Z+6	; 0x06
     ecc:	8c 7f       	andi	r24, 0xFC	; 252
     ece:	86 83       	std	Z+6, r24	; 0x06
     ed0:	10 a2       	std	Z+32, r1	; 0x20
     ed2:	11 a2       	std	Z+33, r1	; 0x21
     ed4:	08 95       	ret

00000ed6 <start_timer>:
     ed6:	e0 e0       	ldi	r30, 0x00	; 0
     ed8:	fa e0       	ldi	r31, 0x0A	; 10
     eda:	10 a2       	std	Z+32, r1	; 0x20
     edc:	11 a2       	std	Z+33, r1	; 0x21
     ede:	86 81       	ldd	r24, Z+6	; 0x06
     ee0:	8c 7f       	andi	r24, 0xFC	; 252
     ee2:	81 60       	ori	r24, 0x01	; 1
     ee4:	86 83       	std	Z+6, r24	; 0x06
     ee6:	86 e0       	ldi	r24, 0x06	; 6
     ee8:	80 83       	st	Z, r24
     eea:	08 95       	ret

00000eec <write8_UART>:
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <write8_UART+0xe>
     ef2:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     ef6:	20 72       	andi	r18, 0x20	; 32
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	23 2b       	or	r18, r19
     efc:	d1 f3       	breq	.-12     	; 0xef2 <write8_UART+0x6>
     efe:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <write8_UART+0x24>
     f08:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     f0c:	80 72       	andi	r24, 0x20	; 32
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	89 2b       	or	r24, r25
     f12:	d1 f3       	breq	.-12     	; 0xf08 <write8_UART+0x1c>
     f14:	08 95       	ret

00000f16 <read8_UART>:
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <read8_UART+0xe>
     f1c:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     f20:	20 78       	andi	r18, 0x80	; 128
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	21 15       	cp	r18, r1
     f26:	31 05       	cpc	r19, r1
     f28:	c9 f3       	breq	.-14     	; 0xf1c <read8_UART+0x6>
     f2a:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <read8_UART+0x26>
     f30:	e0 ea       	ldi	r30, 0xA0	; 160
     f32:	fa e0       	ldi	r31, 0x0A	; 10
     f34:	21 81       	ldd	r18, Z+1	; 0x01
     f36:	20 78       	andi	r18, 0x80	; 128
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	23 2b       	or	r18, r19
     f3e:	c1 f7       	brne	.-16     	; 0xf30 <read8_UART+0x1a>
     f40:	08 95       	ret

00000f42 <writeF_UART>:
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	00 d0       	rcall	.+0      	; 0xf48 <writeF_UART+0x6>
     f48:	1f 92       	push	r1
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	69 83       	std	Y+1, r22	; 0x01
     f50:	7a 83       	std	Y+2, r23	; 0x02
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	86 2f       	mov	r24, r22
     f58:	0e 94 76 07 	call	0xeec	; 0xeec <write8_UART>
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	0e 94 76 07 	call	0xeec	; 0xeec <write8_UART>
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	0e 94 76 07 	call	0xeec	; 0xeec <write8_UART>
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	0e 94 76 07 	call	0xeec	; 0xeec <write8_UART>
     f6e:	24 96       	adiw	r28, 0x04	; 4
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <read_ADC>:
     f7a:	2f 92       	push	r2
     f7c:	3f 92       	push	r3
     f7e:	4f 92       	push	r4
     f80:	5f 92       	push	r5
     f82:	6f 92       	push	r6
     f84:	7f 92       	push	r7
     f86:	8f 92       	push	r8
     f88:	9f 92       	push	r9
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	5c 01       	movw	r10, r24
     fa0:	1b 01       	movw	r2, r22
     fa2:	4a 01       	movw	r8, r20
     fa4:	28 01       	movw	r4, r16
     fa6:	39 01       	movw	r6, r18
     fa8:	a0 e0       	ldi	r26, 0x00	; 0
     faa:	b2 e0       	ldi	r27, 0x02	; 2
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	8c 93       	st	X, r24
     fb0:	e0 e4       	ldi	r30, 0x40	; 64
     fb2:	f2 e0       	ldi	r31, 0x02	; 2
     fb4:	80 83       	st	Z, r24
     fb6:	8c 91       	ld	r24, X
     fb8:	84 60       	ori	r24, 0x04	; 4
     fba:	8c 93       	st	X, r24
     fbc:	80 81       	ld	r24, Z
     fbe:	84 60       	ori	r24, 0x04	; 4
     fc0:	80 83       	st	Z, r24
     fc2:	16 96       	adiw	r26, 0x06	; 6
     fc4:	8c 91       	ld	r24, X
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	96 81       	ldd	r25, Z+6	; 0x06
     fca:	91 70       	andi	r25, 0x01	; 1
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <read_ADC+0x60>
     fce:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
     fd2:	81 70       	andi	r24, 0x01	; 1
     fd4:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     fd8:	91 70       	andi	r25, 0x01	; 1
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <read_ADC+0x68>
     fde:	91 30       	cpi	r25, 0x01	; 1
     fe0:	b1 f7       	brne	.-20     	; 0xfce <read_ADC+0x54>
     fe2:	00 e0       	ldi	r16, 0x00	; 0
     fe4:	12 e0       	ldi	r17, 0x02	; 2
     fe6:	f8 01       	movw	r30, r16
     fe8:	64 a1       	ldd	r22, Z+36	; 0x24
     fea:	75 a1       	ldd	r23, Z+37	; 0x25
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__floatunsisf>
     ff4:	a3 01       	movw	r20, r6
     ff6:	92 01       	movw	r18, r4
     ff8:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
     ffc:	2b 01       	movw	r4, r22
     ffe:	3c 01       	movw	r6, r24
    1000:	c0 e4       	ldi	r28, 0x40	; 64
    1002:	d2 e0       	ldi	r29, 0x02	; 2
    1004:	6c a1       	ldd	r22, Y+36	; 0x24
    1006:	7d a1       	ldd	r23, Y+37	; 0x25
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__floatunsisf>
    1010:	a7 01       	movw	r20, r14
    1012:	96 01       	movw	r18, r12
    1014:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
    1018:	88 0c       	add	r8, r8
    101a:	99 1c       	adc	r9, r9
    101c:	f1 01       	movw	r30, r2
    101e:	e8 0d       	add	r30, r8
    1020:	f9 1d       	adc	r31, r9
    1022:	a0 81       	ld	r26, Z
    1024:	b1 81       	ldd	r27, Z+1	; 0x01
    1026:	aa 0f       	add	r26, r26
    1028:	bb 1f       	adc	r27, r27
    102a:	aa 0f       	add	r26, r26
    102c:	bb 1f       	adc	r27, r27
    102e:	aa 0f       	add	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	aa 0d       	add	r26, r10
    1034:	bb 1d       	adc	r27, r11
    1036:	14 96       	adiw	r26, 0x04	; 4
    1038:	4d 92       	st	X+, r4
    103a:	5d 92       	st	X+, r5
    103c:	6d 92       	st	X+, r6
    103e:	7c 92       	st	X, r7
    1040:	17 97       	sbiw	r26, 0x07	; 7
    1042:	20 81       	ld	r18, Z
    1044:	31 81       	ldd	r19, Z+1	; 0x01
    1046:	22 0f       	add	r18, r18
    1048:	33 1f       	adc	r19, r19
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	f5 01       	movw	r30, r10
    1054:	e2 0f       	add	r30, r18
    1056:	f3 1f       	adc	r31, r19
    1058:	60 83       	st	Z, r22
    105a:	71 83       	std	Z+1, r23	; 0x01
    105c:	82 83       	std	Z+2, r24	; 0x02
    105e:	93 83       	std	Z+3, r25	; 0x03
    1060:	f8 01       	movw	r30, r16
    1062:	86 81       	ldd	r24, Z+6	; 0x06
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	86 83       	std	Z+6, r24	; 0x06
    1068:	8e 81       	ldd	r24, Y+6	; 0x06
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	8e 83       	std	Y+6, r24	; 0x06
    106e:	80 81       	ld	r24, Z
    1070:	8e 7f       	andi	r24, 0xFE	; 254
    1072:	80 83       	st	Z, r24
    1074:	88 81       	ld	r24, Y
    1076:	8e 7f       	andi	r24, 0xFE	; 254
    1078:	88 83       	st	Y, r24
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	df 90       	pop	r13
    1088:	cf 90       	pop	r12
    108a:	bf 90       	pop	r11
    108c:	af 90       	pop	r10
    108e:	9f 90       	pop	r9
    1090:	8f 90       	pop	r8
    1092:	7f 90       	pop	r7
    1094:	6f 90       	pop	r6
    1096:	5f 90       	pop	r5
    1098:	4f 90       	pop	r4
    109a:	3f 90       	pop	r3
    109c:	2f 90       	pop	r2
    109e:	08 95       	ret

000010a0 <__vector_47>:
float I_Offset = 3495;															//Imag channel ADC offset



ISR(TCE0_OVF_vect)																//When TC overflows (@ 5kHz interval)
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	0b b6       	in	r0, 0x3b	; 59
    10ac:	0f 92       	push	r0
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	2f 93       	push	r18
    10bc:	3f 93       	push	r19
    10be:	4f 93       	push	r20
    10c0:	5f 93       	push	r21
    10c2:	6f 93       	push	r22
    10c4:	7f 93       	push	r23
    10c6:	8f 93       	push	r24
    10c8:	9f 93       	push	r25
    10ca:	af 93       	push	r26
    10cc:	bf 93       	push	r27
    10ce:	ef 93       	push	r30
    10d0:	ff 93       	push	r31
	read_ADC(FFT_Array, Reverse_Lookup, count, R_Offset, I_Offset);				//Gets IQ samples and decimates in time
    10d2:	c0 90 00 20 	lds	r12, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    10d6:	d0 90 01 20 	lds	r13, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    10da:	e0 90 02 20 	lds	r14, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    10de:	f0 90 03 20 	lds	r15, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    10e2:	00 91 04 20 	lds	r16, 0x2004	; 0x802004 <R_Offset>
    10e6:	10 91 05 20 	lds	r17, 0x2005	; 0x802005 <R_Offset+0x1>
    10ea:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <R_Offset+0x2>
    10ee:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <R_Offset+0x3>
    10f2:	40 91 0b 20 	lds	r20, 0x200B	; 0x80200b <count>
    10f6:	50 91 0c 20 	lds	r21, 0x200C	; 0x80200c <count+0x1>
    10fa:	6d e0       	ldi	r22, 0x0D	; 13
    10fc:	74 e4       	ldi	r23, 0x44	; 68
    10fe:	8d e0       	ldi	r24, 0x0D	; 13
    1100:	94 e3       	ldi	r25, 0x34	; 52
    1102:	0e 94 bd 07 	call	0xf7a	; 0xf7a <read_ADC>
	count++;																	//Add sample count by one
    1106:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <count>
    110a:	90 91 0c 20 	lds	r25, 0x200C	; 0x80200c <count+0x1>
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <count>
    1114:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <count+0x1>
}
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	0f 90       	pop	r0
    113e:	0b be       	out	0x3b, r0	; 59
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <main>:



int main(void)
{
	init_CLK();																	//Set F_CPU to 32MHz
    114a:	0e 94 29 09 	call	0x1252	; 0x1252 <init_CLK>
	init_TIMER();																//Set timer for sampling @ fixed frequency
    114e:	0e 94 3b 09 	call	0x1276	; 0x1276 <init_TIMER>
	init_UART();																//Debug UART 115200Baud (PE2: RX, PE3 TX)
    1152:	0e 94 12 09 	call	0x1224	; 0x1224 <init_UART>
	init_IO();																	//Setup of I/O pins
    1156:	0e 94 46 09 	call	0x128c	; 0x128c <init_IO>
	init_ADC();																	//Set registers for internal ADC
    115a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <init_ADC>
	init_DAC();																	//Set registers for internal DAC
    115e:	0e 94 8c 09 	call	0x1318	; 0x1318 <init_DAC>
	
	sei();																		//Global interrupt mask
    1162:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;												//Set low level interrupts
    1164:	e0 ea       	ldi	r30, 0xA0	; 160
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	81 60       	ori	r24, 0x01	; 1
    116c:	82 83       	std	Z+2, r24	; 0x02
	
	init_avr_Wlookup(W);														//Creates heap lookup table for twiddle factors
    116e:	8d e0       	ldi	r24, 0x0D	; 13
    1170:	90 e2       	ldi	r25, 0x20	; 32
    1172:	0e 94 73 03 	call	0x6e6	; 0x6e6 <init_avr_Wlookup>
	init_BRLookup(Reverse_Lookup);												//Creates heap lookup table for bit reverse order (decimation order)
    1176:	8d e0       	ldi	r24, 0x0D	; 13
    1178:	94 e4       	ldi	r25, 0x44	; 68
    117a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <init_BRLookup>
	init_Window(Window);														//Creates heap lookup table for the Window function
    117e:	8d e0       	ldi	r24, 0x0D	; 13
    1180:	98 e2       	ldi	r25, 0x28	; 40
    1182:	0e 94 9c 05 	call	0xb38	; 0xb38 <init_Window>
	
	
	while(1)
	{

		if(ReadyFInstruction == 1)
    1186:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <ReadyFInstruction>
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	d1 f4       	brne	.+52     	; 0x11c2 <main+0x78>
		{
			Instruction = read8_UART();
    118e:	0e 94 8b 07 	call	0xf16	; 0xf16 <read8_UART>
			
			switch (Instruction)
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	19 f0       	breq	.+6      	; 0x119c <main+0x52>
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	41 f0       	breq	.+16     	; 0x11aa <main+0x60>
    119a:	0e c0       	rjmp	.+28     	; 0x11b8 <main+0x6e>
			{
				case 1:															//Used to calibration command now doubles speed
					ReadyFInstruction = 0;										//Set status to busy
    119c:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <ReadyFInstruction>
					Instruction = 0;											//Reset instruction
    11a0:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end>
					start_timer();												//Start taking samples
    11a4:	0e 94 6b 07 	call	0xed6	; 0xed6 <start_timer>
					break;
    11a8:	0c c0       	rjmp	.+24     	; 0x11c2 <main+0x78>
				
				case 2:															//Find speed
					ReadyFInstruction = 0;										//Set status to busy
    11aa:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <ReadyFInstruction>
					Instruction = 0;											//Reset instruction
    11ae:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end>
					start_timer();												//start taking samples
    11b2:	0e 94 6b 07 	call	0xed6	; 0xed6 <start_timer>
					break;
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <main+0x78>
					
				default:
					ReadyFInstruction = 1;										//In case of error; take new Instruction
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <ReadyFInstruction>
					Instruction = 0;											//Reset Instruction	
    11be:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end>
					break;
			}
		}
		
		
		if(count == N)															//When the FFT array is full of samples perform calculations
    11c2:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <count>
    11c6:	90 91 0c 20 	lds	r25, 0x200C	; 0x80200c <count+0x1>
    11ca:	81 15       	cp	r24, r1
    11cc:	92 40       	sbci	r25, 0x02	; 2
    11ce:	d9 f6       	brne	.-74     	; 0x1186 <main+0x3c>
		{
				stop_timer();													//Stop sampling
    11d0:	0e 94 62 07 	call	0xec4	; 0xec4 <stop_timer>
				apply_avr_Window(FFT_Array, Window, Reverse_Lookup);			//Apply Blackman-Harris window
    11d4:	4d e0       	ldi	r20, 0x0D	; 13
    11d6:	54 e4       	ldi	r21, 0x44	; 68
    11d8:	6d e0       	ldi	r22, 0x0D	; 13
    11da:	78 e2       	ldi	r23, 0x28	; 40
    11dc:	8d e0       	ldi	r24, 0x0D	; 13
    11de:	94 e3       	ldi	r25, 0x34	; 52
    11e0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <apply_avr_Window>
				calc_avr_FFT(FFT_Array, W);										//Calculates Radix2-FFT in pace
    11e4:	6d e0       	ldi	r22, 0x0D	; 13
    11e6:	70 e2       	ldi	r23, 0x20	; 32
    11e8:	8d e0       	ldi	r24, 0x0D	; 13
    11ea:	94 e3       	ldi	r25, 0x34	; 52
    11ec:	0e 94 84 04 	call	0x908	; 0x908 <calc_avr_FFT>
				Compute_ABS_spectrum(FFT_Array, DSP_Array);						//Calculates and prints spectrum
    11f0:	6d e0       	ldi	r22, 0x0D	; 13
    11f2:	7c e2       	ldi	r23, 0x2C	; 44
    11f4:	8d e0       	ldi	r24, 0x0D	; 13
    11f6:	94 e3       	ldi	r25, 0x34	; 52
    11f8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Compute_ABS_spectrum>
				speed = Get_speed(DSP_Array);									//Finds peak, calculates Doppler shift and returns speed							
    11fc:	8d e0       	ldi	r24, 0x0D	; 13
    11fe:	9c e2       	ldi	r25, 0x2C	; 44
    1200:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Get_speed>
				writeF_UART(speed);												//Write speed to MATLAB in kph
    1204:	0e 94 a1 07 	call	0xf42	; 0xf42 <writeF_UART>
		
				count = 0;														//Reset count
    1208:	10 92 0b 20 	sts	0x200B, r1	; 0x80200b <count>
    120c:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <count+0x1>
				ReadyFInstruction = 1;											//Get ready for new instruction
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <ReadyFInstruction>
				writeF_UART(0.12345);											//Write checksum to MATLAB
    1216:	6b e5       	ldi	r22, 0x5B	; 91
    1218:	73 ed       	ldi	r23, 0xD3	; 211
    121a:	8c ef       	ldi	r24, 0xFC	; 252
    121c:	9d e3       	ldi	r25, 0x3D	; 61
    121e:	0e 94 a1 07 	call	0xf42	; 0xf42 <writeF_UART>
    1222:	b1 cf       	rjmp	.-158    	; 0x1186 <main+0x3c>

00001224 <init_UART>:
    1224:	84 e0       	ldi	r24, 0x04	; 4
    1226:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
    122a:	88 e0       	ldi	r24, 0x08	; 8
    122c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
    1230:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
    1234:	e0 ea       	ldi	r30, 0xA0	; 160
    1236:	fa e0       	ldi	r31, 0x0A	; 10
    1238:	87 81       	ldd	r24, Z+7	; 0x07
    123a:	80 6d       	ori	r24, 0xD0	; 208
    123c:	87 83       	std	Z+7, r24	; 0x07
    123e:	86 81       	ldd	r24, Z+6	; 0x06
    1240:	83 68       	ori	r24, 0x83	; 131
    1242:	86 83       	std	Z+6, r24	; 0x06
    1244:	85 81       	ldd	r24, Z+5	; 0x05
    1246:	83 60       	ori	r24, 0x03	; 3
    1248:	85 83       	std	Z+5, r24	; 0x05
    124a:	84 81       	ldd	r24, Z+4	; 0x04
    124c:	88 61       	ori	r24, 0x18	; 24
    124e:	84 83       	std	Z+4, r24	; 0x04
    1250:	08 95       	ret

00001252 <init_CLK>:
    1252:	e0 e5       	ldi	r30, 0x50	; 80
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	82 60       	ori	r24, 0x02	; 2
    125a:	80 83       	st	Z, r24
    125c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
    1260:	81 ff       	sbrs	r24, 1
    1262:	fc cf       	rjmp	.-8      	; 0x125c <init_CLK+0xa>
    1264:	88 ed       	ldi	r24, 0xD8	; 216
    1266:	84 bf       	out	0x34, r24	; 52
    1268:	e0 e4       	ldi	r30, 0x40	; 64
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 83       	st	Z, r24
    1270:	11 82       	std	Z+1, r1	; 0x01
    1272:	11 82       	std	Z+1, r1	; 0x01
    1274:	08 95       	ret

00001276 <init_TIMER>:
    1276:	e0 e0       	ldi	r30, 0x00	; 0
    1278:	fa e0       	ldi	r31, 0x0A	; 10
    127a:	11 82       	std	Z+1, r1	; 0x01
    127c:	10 82       	st	Z, r1
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	86 83       	std	Z+6, r24	; 0x06
    1282:	89 e1       	ldi	r24, 0x19	; 25
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	86 a3       	std	Z+38, r24	; 0x26
    1288:	97 a3       	std	Z+39, r25	; 0x27
    128a:	08 95       	ret

0000128c <init_IO>:
    128c:	e1 e0       	ldi	r30, 0x01	; 1
    128e:	f6 e0       	ldi	r31, 0x06	; 6
    1290:	80 e8       	ldi	r24, 0x80	; 128
    1292:	80 83       	st	Z, r24
    1294:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
    1298:	80 e1       	ldi	r24, 0x10	; 16
    129a:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	80 83       	st	Z, r24
    12a2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
    12a6:	08 95       	ret

000012a8 <init_ADC>:
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7be602>
    12ae:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x7be622>
    12b2:	a0 e0       	ldi	r26, 0x00	; 0
    12b4:	b2 e0       	ldi	r27, 0x02	; 2
    12b6:	83 e0       	ldi	r24, 0x03	; 3
    12b8:	14 96       	adiw	r26, 0x04	; 4
    12ba:	8c 93       	st	X, r24
    12bc:	14 97       	sbiw	r26, 0x04	; 4
    12be:	e0 e4       	ldi	r30, 0x40	; 64
    12c0:	f2 e0       	ldi	r31, 0x02	; 2
    12c2:	84 83       	std	Z+4, r24	; 0x04
    12c4:	12 96       	adiw	r26, 0x02	; 2
    12c6:	8c 91       	ld	r24, X
    12c8:	12 97       	sbiw	r26, 0x02	; 2
    12ca:	12 96       	adiw	r26, 0x02	; 2
    12cc:	8c 93       	st	X, r24
    12ce:	12 97       	sbiw	r26, 0x02	; 2
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	82 83       	std	Z+2, r24	; 0x02
    12d4:	12 96       	adiw	r26, 0x02	; 2
    12d6:	8c 91       	ld	r24, X
    12d8:	12 97       	sbiw	r26, 0x02	; 2
    12da:	80 61       	ori	r24, 0x10	; 16
    12dc:	12 96       	adiw	r26, 0x02	; 2
    12de:	8c 93       	st	X, r24
    12e0:	12 97       	sbiw	r26, 0x02	; 2
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	80 61       	ori	r24, 0x10	; 16
    12e6:	82 83       	std	Z+2, r24	; 0x02
    12e8:	90 96       	adiw	r26, 0x20	; 32
    12ea:	8c 91       	ld	r24, X
    12ec:	90 97       	sbiw	r26, 0x20	; 32
    12ee:	81 60       	ori	r24, 0x01	; 1
    12f0:	90 96       	adiw	r26, 0x20	; 32
    12f2:	8c 93       	st	X, r24
    12f4:	90 97       	sbiw	r26, 0x20	; 32
    12f6:	80 a1       	ldd	r24, Z+32	; 0x20
    12f8:	81 60       	ori	r24, 0x01	; 1
    12fa:	80 a3       	std	Z+32, r24	; 0x20
    12fc:	91 96       	adiw	r26, 0x21	; 33
    12fe:	8c 91       	ld	r24, X
    1300:	91 97       	sbiw	r26, 0x21	; 33
    1302:	87 60       	ori	r24, 0x07	; 7
    1304:	91 96       	adiw	r26, 0x21	; 33
    1306:	8c 93       	st	X, r24
    1308:	91 97       	sbiw	r26, 0x21	; 33
    130a:	81 a1       	ldd	r24, Z+33	; 0x21
    130c:	87 60       	ori	r24, 0x07	; 7
    130e:	81 a3       	std	Z+33, r24	; 0x21
    1310:	91 96       	adiw	r26, 0x21	; 33
    1312:	1c 92       	st	X, r1
    1314:	11 a2       	std	Z+33, r1	; 0x21
    1316:	08 95       	ret

00001318 <init_DAC>:
    1318:	e0 e2       	ldi	r30, 0x20	; 32
    131a:	f3 e0       	ldi	r31, 0x03	; 3
    131c:	12 82       	std	Z+2, r1	; 0x02
    131e:	11 82       	std	Z+1, r1	; 0x01
    1320:	85 e0       	ldi	r24, 0x05	; 5
    1322:	80 83       	st	Z, r24
    1324:	08 95       	ret

00001326 <__subsf3>:
    1326:	50 58       	subi	r21, 0x80	; 128

00001328 <__addsf3>:
    1328:	bb 27       	eor	r27, r27
    132a:	aa 27       	eor	r26, r26
    132c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__addsf3x>
    1330:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_round>
    1334:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fp_pscA>
    1338:	38 f0       	brcs	.+14     	; 0x1348 <__addsf3+0x20>
    133a:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_pscB>
    133e:	20 f0       	brcs	.+8      	; 0x1348 <__addsf3+0x20>
    1340:	39 f4       	brne	.+14     	; 0x1350 <__addsf3+0x28>
    1342:	9f 3f       	cpi	r25, 0xFF	; 255
    1344:	19 f4       	brne	.+6      	; 0x134c <__addsf3+0x24>
    1346:	26 f4       	brtc	.+8      	; 0x1350 <__addsf3+0x28>
    1348:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__fp_nan>
    134c:	0e f4       	brtc	.+2      	; 0x1350 <__addsf3+0x28>
    134e:	e0 95       	com	r30
    1350:	e7 fb       	bst	r30, 7
    1352:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__fp_inf>

00001356 <__addsf3x>:
    1356:	e9 2f       	mov	r30, r25
    1358:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_split3>
    135c:	58 f3       	brcs	.-42     	; 0x1334 <__addsf3+0xc>
    135e:	ba 17       	cp	r27, r26
    1360:	62 07       	cpc	r22, r18
    1362:	73 07       	cpc	r23, r19
    1364:	84 07       	cpc	r24, r20
    1366:	95 07       	cpc	r25, r21
    1368:	20 f0       	brcs	.+8      	; 0x1372 <__addsf3x+0x1c>
    136a:	79 f4       	brne	.+30     	; 0x138a <__addsf3x+0x34>
    136c:	a6 f5       	brtc	.+104    	; 0x13d6 <__addsf3x+0x80>
    136e:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__fp_zero>
    1372:	0e f4       	brtc	.+2      	; 0x1376 <__addsf3x+0x20>
    1374:	e0 95       	com	r30
    1376:	0b 2e       	mov	r0, r27
    1378:	ba 2f       	mov	r27, r26
    137a:	a0 2d       	mov	r26, r0
    137c:	0b 01       	movw	r0, r22
    137e:	b9 01       	movw	r22, r18
    1380:	90 01       	movw	r18, r0
    1382:	0c 01       	movw	r0, r24
    1384:	ca 01       	movw	r24, r20
    1386:	a0 01       	movw	r20, r0
    1388:	11 24       	eor	r1, r1
    138a:	ff 27       	eor	r31, r31
    138c:	59 1b       	sub	r21, r25
    138e:	99 f0       	breq	.+38     	; 0x13b6 <__addsf3x+0x60>
    1390:	59 3f       	cpi	r21, 0xF9	; 249
    1392:	50 f4       	brcc	.+20     	; 0x13a8 <__addsf3x+0x52>
    1394:	50 3e       	cpi	r21, 0xE0	; 224
    1396:	68 f1       	brcs	.+90     	; 0x13f2 <__addsf3x+0x9c>
    1398:	1a 16       	cp	r1, r26
    139a:	f0 40       	sbci	r31, 0x00	; 0
    139c:	a2 2f       	mov	r26, r18
    139e:	23 2f       	mov	r18, r19
    13a0:	34 2f       	mov	r19, r20
    13a2:	44 27       	eor	r20, r20
    13a4:	58 5f       	subi	r21, 0xF8	; 248
    13a6:	f3 cf       	rjmp	.-26     	; 0x138e <__addsf3x+0x38>
    13a8:	46 95       	lsr	r20
    13aa:	37 95       	ror	r19
    13ac:	27 95       	ror	r18
    13ae:	a7 95       	ror	r26
    13b0:	f0 40       	sbci	r31, 0x00	; 0
    13b2:	53 95       	inc	r21
    13b4:	c9 f7       	brne	.-14     	; 0x13a8 <__addsf3x+0x52>
    13b6:	7e f4       	brtc	.+30     	; 0x13d6 <__addsf3x+0x80>
    13b8:	1f 16       	cp	r1, r31
    13ba:	ba 0b       	sbc	r27, r26
    13bc:	62 0b       	sbc	r22, r18
    13be:	73 0b       	sbc	r23, r19
    13c0:	84 0b       	sbc	r24, r20
    13c2:	ba f0       	brmi	.+46     	; 0x13f2 <__addsf3x+0x9c>
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	a1 f0       	breq	.+40     	; 0x13f0 <__addsf3x+0x9a>
    13c8:	ff 0f       	add	r31, r31
    13ca:	bb 1f       	adc	r27, r27
    13cc:	66 1f       	adc	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	c2 f7       	brpl	.-16     	; 0x13c4 <__addsf3x+0x6e>
    13d4:	0e c0       	rjmp	.+28     	; 0x13f2 <__addsf3x+0x9c>
    13d6:	ba 0f       	add	r27, r26
    13d8:	62 1f       	adc	r22, r18
    13da:	73 1f       	adc	r23, r19
    13dc:	84 1f       	adc	r24, r20
    13de:	48 f4       	brcc	.+18     	; 0x13f2 <__addsf3x+0x9c>
    13e0:	87 95       	ror	r24
    13e2:	77 95       	ror	r23
    13e4:	67 95       	ror	r22
    13e6:	b7 95       	ror	r27
    13e8:	f7 95       	ror	r31
    13ea:	9e 3f       	cpi	r25, 0xFE	; 254
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <__addsf3x+0x9a>
    13ee:	b0 cf       	rjmp	.-160    	; 0x1350 <__addsf3+0x28>
    13f0:	93 95       	inc	r25
    13f2:	88 0f       	add	r24, r24
    13f4:	08 f0       	brcs	.+2      	; 0x13f8 <__addsf3x+0xa2>
    13f6:	99 27       	eor	r25, r25
    13f8:	ee 0f       	add	r30, r30
    13fa:	97 95       	ror	r25
    13fc:	87 95       	ror	r24
    13fe:	08 95       	ret

00001400 <__cmpsf2>:
    1400:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fp_cmp>
    1404:	08 f4       	brcc	.+2      	; 0x1408 <__cmpsf2+0x8>
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	08 95       	ret

0000140a <cos>:
    140a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_rempio2>
    140e:	e3 95       	inc	r30
    1410:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_sinus>

00001414 <__divsf3>:
    1414:	0e 94 1e 0a 	call	0x143c	; 0x143c <__divsf3x>
    1418:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_round>
    141c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_pscB>
    1420:	58 f0       	brcs	.+22     	; 0x1438 <__divsf3+0x24>
    1422:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fp_pscA>
    1426:	40 f0       	brcs	.+16     	; 0x1438 <__divsf3+0x24>
    1428:	29 f4       	brne	.+10     	; 0x1434 <__divsf3+0x20>
    142a:	5f 3f       	cpi	r21, 0xFF	; 255
    142c:	29 f0       	breq	.+10     	; 0x1438 <__divsf3+0x24>
    142e:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__fp_inf>
    1432:	51 11       	cpse	r21, r1
    1434:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__fp_szero>
    1438:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__fp_nan>

0000143c <__divsf3x>:
    143c:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_split3>
    1440:	68 f3       	brcs	.-38     	; 0x141c <__divsf3+0x8>

00001442 <__divsf3_pse>:
    1442:	99 23       	and	r25, r25
    1444:	b1 f3       	breq	.-20     	; 0x1432 <__divsf3+0x1e>
    1446:	55 23       	and	r21, r21
    1448:	91 f3       	breq	.-28     	; 0x142e <__divsf3+0x1a>
    144a:	95 1b       	sub	r25, r21
    144c:	55 0b       	sbc	r21, r21
    144e:	bb 27       	eor	r27, r27
    1450:	aa 27       	eor	r26, r26
    1452:	62 17       	cp	r22, r18
    1454:	73 07       	cpc	r23, r19
    1456:	84 07       	cpc	r24, r20
    1458:	38 f0       	brcs	.+14     	; 0x1468 <__divsf3_pse+0x26>
    145a:	9f 5f       	subi	r25, 0xFF	; 255
    145c:	5f 4f       	sbci	r21, 0xFF	; 255
    145e:	22 0f       	add	r18, r18
    1460:	33 1f       	adc	r19, r19
    1462:	44 1f       	adc	r20, r20
    1464:	aa 1f       	adc	r26, r26
    1466:	a9 f3       	breq	.-22     	; 0x1452 <__divsf3_pse+0x10>
    1468:	35 d0       	rcall	.+106    	; 0x14d4 <__divsf3_pse+0x92>
    146a:	0e 2e       	mov	r0, r30
    146c:	3a f0       	brmi	.+14     	; 0x147c <__divsf3_pse+0x3a>
    146e:	e0 e8       	ldi	r30, 0x80	; 128
    1470:	32 d0       	rcall	.+100    	; 0x14d6 <__divsf3_pse+0x94>
    1472:	91 50       	subi	r25, 0x01	; 1
    1474:	50 40       	sbci	r21, 0x00	; 0
    1476:	e6 95       	lsr	r30
    1478:	00 1c       	adc	r0, r0
    147a:	ca f7       	brpl	.-14     	; 0x146e <__divsf3_pse+0x2c>
    147c:	2b d0       	rcall	.+86     	; 0x14d4 <__divsf3_pse+0x92>
    147e:	fe 2f       	mov	r31, r30
    1480:	29 d0       	rcall	.+82     	; 0x14d4 <__divsf3_pse+0x92>
    1482:	66 0f       	add	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	bb 1f       	adc	r27, r27
    148a:	26 17       	cp	r18, r22
    148c:	37 07       	cpc	r19, r23
    148e:	48 07       	cpc	r20, r24
    1490:	ab 07       	cpc	r26, r27
    1492:	b0 e8       	ldi	r27, 0x80	; 128
    1494:	09 f0       	breq	.+2      	; 0x1498 <__divsf3_pse+0x56>
    1496:	bb 0b       	sbc	r27, r27
    1498:	80 2d       	mov	r24, r0
    149a:	bf 01       	movw	r22, r30
    149c:	ff 27       	eor	r31, r31
    149e:	93 58       	subi	r25, 0x83	; 131
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	3a f0       	brmi	.+14     	; 0x14b2 <__divsf3_pse+0x70>
    14a4:	9e 3f       	cpi	r25, 0xFE	; 254
    14a6:	51 05       	cpc	r21, r1
    14a8:	78 f0       	brcs	.+30     	; 0x14c8 <__divsf3_pse+0x86>
    14aa:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__fp_inf>
    14ae:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__fp_szero>
    14b2:	5f 3f       	cpi	r21, 0xFF	; 255
    14b4:	e4 f3       	brlt	.-8      	; 0x14ae <__divsf3_pse+0x6c>
    14b6:	98 3e       	cpi	r25, 0xE8	; 232
    14b8:	d4 f3       	brlt	.-12     	; 0x14ae <__divsf3_pse+0x6c>
    14ba:	86 95       	lsr	r24
    14bc:	77 95       	ror	r23
    14be:	67 95       	ror	r22
    14c0:	b7 95       	ror	r27
    14c2:	f7 95       	ror	r31
    14c4:	9f 5f       	subi	r25, 0xFF	; 255
    14c6:	c9 f7       	brne	.-14     	; 0x14ba <__divsf3_pse+0x78>
    14c8:	88 0f       	add	r24, r24
    14ca:	91 1d       	adc	r25, r1
    14cc:	96 95       	lsr	r25
    14ce:	87 95       	ror	r24
    14d0:	97 f9       	bld	r25, 7
    14d2:	08 95       	ret
    14d4:	e1 e0       	ldi	r30, 0x01	; 1
    14d6:	66 0f       	add	r22, r22
    14d8:	77 1f       	adc	r23, r23
    14da:	88 1f       	adc	r24, r24
    14dc:	bb 1f       	adc	r27, r27
    14de:	62 17       	cp	r22, r18
    14e0:	73 07       	cpc	r23, r19
    14e2:	84 07       	cpc	r24, r20
    14e4:	ba 07       	cpc	r27, r26
    14e6:	20 f0       	brcs	.+8      	; 0x14f0 <__divsf3_pse+0xae>
    14e8:	62 1b       	sub	r22, r18
    14ea:	73 0b       	sbc	r23, r19
    14ec:	84 0b       	sbc	r24, r20
    14ee:	ba 0b       	sbc	r27, r26
    14f0:	ee 1f       	adc	r30, r30
    14f2:	88 f7       	brcc	.-30     	; 0x14d6 <__divsf3_pse+0x94>
    14f4:	e0 95       	com	r30
    14f6:	08 95       	ret

000014f8 <__floatunsisf>:
    14f8:	e8 94       	clt
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <__floatsisf+0x12>

000014fc <__floatsisf>:
    14fc:	97 fb       	bst	r25, 7
    14fe:	3e f4       	brtc	.+14     	; 0x150e <__floatsisf+0x12>
    1500:	90 95       	com	r25
    1502:	80 95       	com	r24
    1504:	70 95       	com	r23
    1506:	61 95       	neg	r22
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	8f 4f       	sbci	r24, 0xFF	; 255
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	99 23       	and	r25, r25
    1510:	a9 f0       	breq	.+42     	; 0x153c <__floatsisf+0x40>
    1512:	f9 2f       	mov	r31, r25
    1514:	96 e9       	ldi	r25, 0x96	; 150
    1516:	bb 27       	eor	r27, r27
    1518:	93 95       	inc	r25
    151a:	f6 95       	lsr	r31
    151c:	87 95       	ror	r24
    151e:	77 95       	ror	r23
    1520:	67 95       	ror	r22
    1522:	b7 95       	ror	r27
    1524:	f1 11       	cpse	r31, r1
    1526:	f8 cf       	rjmp	.-16     	; 0x1518 <__floatsisf+0x1c>
    1528:	fa f4       	brpl	.+62     	; 0x1568 <__floatsisf+0x6c>
    152a:	bb 0f       	add	r27, r27
    152c:	11 f4       	brne	.+4      	; 0x1532 <__floatsisf+0x36>
    152e:	60 ff       	sbrs	r22, 0
    1530:	1b c0       	rjmp	.+54     	; 0x1568 <__floatsisf+0x6c>
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	8f 4f       	sbci	r24, 0xFF	; 255
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	16 c0       	rjmp	.+44     	; 0x1568 <__floatsisf+0x6c>
    153c:	88 23       	and	r24, r24
    153e:	11 f0       	breq	.+4      	; 0x1544 <__floatsisf+0x48>
    1540:	96 e9       	ldi	r25, 0x96	; 150
    1542:	11 c0       	rjmp	.+34     	; 0x1566 <__floatsisf+0x6a>
    1544:	77 23       	and	r23, r23
    1546:	21 f0       	breq	.+8      	; 0x1550 <__floatsisf+0x54>
    1548:	9e e8       	ldi	r25, 0x8E	; 142
    154a:	87 2f       	mov	r24, r23
    154c:	76 2f       	mov	r23, r22
    154e:	05 c0       	rjmp	.+10     	; 0x155a <__floatsisf+0x5e>
    1550:	66 23       	and	r22, r22
    1552:	71 f0       	breq	.+28     	; 0x1570 <__floatsisf+0x74>
    1554:	96 e8       	ldi	r25, 0x86	; 134
    1556:	86 2f       	mov	r24, r22
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	2a f0       	brmi	.+10     	; 0x1568 <__floatsisf+0x6c>
    155e:	9a 95       	dec	r25
    1560:	66 0f       	add	r22, r22
    1562:	77 1f       	adc	r23, r23
    1564:	88 1f       	adc	r24, r24
    1566:	da f7       	brpl	.-10     	; 0x155e <__floatsisf+0x62>
    1568:	88 0f       	add	r24, r24
    156a:	96 95       	lsr	r25
    156c:	87 95       	ror	r24
    156e:	97 f9       	bld	r25, 7
    1570:	08 95       	ret

00001572 <__fp_cmp>:
    1572:	99 0f       	add	r25, r25
    1574:	00 08       	sbc	r0, r0
    1576:	55 0f       	add	r21, r21
    1578:	aa 0b       	sbc	r26, r26
    157a:	e0 e8       	ldi	r30, 0x80	; 128
    157c:	fe ef       	ldi	r31, 0xFE	; 254
    157e:	16 16       	cp	r1, r22
    1580:	17 06       	cpc	r1, r23
    1582:	e8 07       	cpc	r30, r24
    1584:	f9 07       	cpc	r31, r25
    1586:	c0 f0       	brcs	.+48     	; 0x15b8 <__fp_cmp+0x46>
    1588:	12 16       	cp	r1, r18
    158a:	13 06       	cpc	r1, r19
    158c:	e4 07       	cpc	r30, r20
    158e:	f5 07       	cpc	r31, r21
    1590:	98 f0       	brcs	.+38     	; 0x15b8 <__fp_cmp+0x46>
    1592:	62 1b       	sub	r22, r18
    1594:	73 0b       	sbc	r23, r19
    1596:	84 0b       	sbc	r24, r20
    1598:	95 0b       	sbc	r25, r21
    159a:	39 f4       	brne	.+14     	; 0x15aa <__fp_cmp+0x38>
    159c:	0a 26       	eor	r0, r26
    159e:	61 f0       	breq	.+24     	; 0x15b8 <__fp_cmp+0x46>
    15a0:	23 2b       	or	r18, r19
    15a2:	24 2b       	or	r18, r20
    15a4:	25 2b       	or	r18, r21
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <__fp_cmp+0x3e>
    15a8:	08 95       	ret
    15aa:	0a 26       	eor	r0, r26
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <__fp_cmp+0x3e>
    15ae:	a1 40       	sbci	r26, 0x01	; 1
    15b0:	a6 95       	lsr	r26
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	81 1d       	adc	r24, r1
    15b6:	81 1d       	adc	r24, r1
    15b8:	08 95       	ret

000015ba <__fp_inf>:
    15ba:	97 f9       	bld	r25, 7
    15bc:	9f 67       	ori	r25, 0x7F	; 127
    15be:	80 e8       	ldi	r24, 0x80	; 128
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	08 95       	ret

000015c6 <__fp_nan>:
    15c6:	9f ef       	ldi	r25, 0xFF	; 255
    15c8:	80 ec       	ldi	r24, 0xC0	; 192
    15ca:	08 95       	ret

000015cc <__fp_pscA>:
    15cc:	00 24       	eor	r0, r0
    15ce:	0a 94       	dec	r0
    15d0:	16 16       	cp	r1, r22
    15d2:	17 06       	cpc	r1, r23
    15d4:	18 06       	cpc	r1, r24
    15d6:	09 06       	cpc	r0, r25
    15d8:	08 95       	ret

000015da <__fp_pscB>:
    15da:	00 24       	eor	r0, r0
    15dc:	0a 94       	dec	r0
    15de:	12 16       	cp	r1, r18
    15e0:	13 06       	cpc	r1, r19
    15e2:	14 06       	cpc	r1, r20
    15e4:	05 06       	cpc	r0, r21
    15e6:	08 95       	ret
    15e8:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__fp_nan>

000015ec <__fp_rempio2>:
    15ec:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_splitA>
    15f0:	d8 f3       	brcs	.-10     	; 0x15e8 <__fp_pscB+0xe>
    15f2:	e8 94       	clt
    15f4:	e0 e0       	ldi	r30, 0x00	; 0
    15f6:	bb 27       	eor	r27, r27
    15f8:	9f 57       	subi	r25, 0x7F	; 127
    15fa:	f0 f0       	brcs	.+60     	; 0x1638 <__fp_rempio2+0x4c>
    15fc:	2a ed       	ldi	r18, 0xDA	; 218
    15fe:	3f e0       	ldi	r19, 0x0F	; 15
    1600:	49 ec       	ldi	r20, 0xC9	; 201
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <__fp_rempio2+0x24>
    1604:	ee 0f       	add	r30, r30
    1606:	bb 0f       	add	r27, r27
    1608:	66 1f       	adc	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	28 f0       	brcs	.+10     	; 0x161a <__fp_rempio2+0x2e>
    1610:	b2 3a       	cpi	r27, 0xA2	; 162
    1612:	62 07       	cpc	r22, r18
    1614:	73 07       	cpc	r23, r19
    1616:	84 07       	cpc	r24, r20
    1618:	28 f0       	brcs	.+10     	; 0x1624 <__fp_rempio2+0x38>
    161a:	b2 5a       	subi	r27, 0xA2	; 162
    161c:	62 0b       	sbc	r22, r18
    161e:	73 0b       	sbc	r23, r19
    1620:	84 0b       	sbc	r24, r20
    1622:	e3 95       	inc	r30
    1624:	9a 95       	dec	r25
    1626:	72 f7       	brpl	.-36     	; 0x1604 <__fp_rempio2+0x18>
    1628:	80 38       	cpi	r24, 0x80	; 128
    162a:	30 f4       	brcc	.+12     	; 0x1638 <__fp_rempio2+0x4c>
    162c:	9a 95       	dec	r25
    162e:	bb 0f       	add	r27, r27
    1630:	66 1f       	adc	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	d2 f7       	brpl	.-12     	; 0x162c <__fp_rempio2+0x40>
    1638:	90 48       	sbci	r25, 0x80	; 128
    163a:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__fp_mpack_finite>

0000163e <__fp_round>:
    163e:	09 2e       	mov	r0, r25
    1640:	03 94       	inc	r0
    1642:	00 0c       	add	r0, r0
    1644:	11 f4       	brne	.+4      	; 0x164a <__fp_round+0xc>
    1646:	88 23       	and	r24, r24
    1648:	52 f0       	brmi	.+20     	; 0x165e <__fp_round+0x20>
    164a:	bb 0f       	add	r27, r27
    164c:	40 f4       	brcc	.+16     	; 0x165e <__fp_round+0x20>
    164e:	bf 2b       	or	r27, r31
    1650:	11 f4       	brne	.+4      	; 0x1656 <__fp_round+0x18>
    1652:	60 ff       	sbrs	r22, 0
    1654:	04 c0       	rjmp	.+8      	; 0x165e <__fp_round+0x20>
    1656:	6f 5f       	subi	r22, 0xFF	; 255
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	8f 4f       	sbci	r24, 0xFF	; 255
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	08 95       	ret

00001660 <__fp_sinus>:
    1660:	ef 93       	push	r30
    1662:	e0 ff       	sbrs	r30, 0
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <__fp_sinus+0x14>
    1666:	a2 ea       	ldi	r26, 0xA2	; 162
    1668:	2a ed       	ldi	r18, 0xDA	; 218
    166a:	3f e0       	ldi	r19, 0x0F	; 15
    166c:	49 ec       	ldi	r20, 0xC9	; 201
    166e:	5f eb       	ldi	r21, 0xBF	; 191
    1670:	0e 94 ab 09 	call	0x1356	; 0x1356 <__addsf3x>
    1674:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fp_round>
    1678:	0f 90       	pop	r0
    167a:	03 94       	inc	r0
    167c:	01 fc       	sbrc	r0, 1
    167e:	90 58       	subi	r25, 0x80	; 128
    1680:	ec ef       	ldi	r30, 0xFC	; 252
    1682:	f1 e0       	ldi	r31, 0x01	; 1
    1684:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__fp_powsodd>

00001688 <__fp_split3>:
    1688:	57 fd       	sbrc	r21, 7
    168a:	90 58       	subi	r25, 0x80	; 128
    168c:	44 0f       	add	r20, r20
    168e:	55 1f       	adc	r21, r21
    1690:	59 f0       	breq	.+22     	; 0x16a8 <__fp_splitA+0x10>
    1692:	5f 3f       	cpi	r21, 0xFF	; 255
    1694:	71 f0       	breq	.+28     	; 0x16b2 <__fp_splitA+0x1a>
    1696:	47 95       	ror	r20

00001698 <__fp_splitA>:
    1698:	88 0f       	add	r24, r24
    169a:	97 fb       	bst	r25, 7
    169c:	99 1f       	adc	r25, r25
    169e:	61 f0       	breq	.+24     	; 0x16b8 <__fp_splitA+0x20>
    16a0:	9f 3f       	cpi	r25, 0xFF	; 255
    16a2:	79 f0       	breq	.+30     	; 0x16c2 <__fp_splitA+0x2a>
    16a4:	87 95       	ror	r24
    16a6:	08 95       	ret
    16a8:	12 16       	cp	r1, r18
    16aa:	13 06       	cpc	r1, r19
    16ac:	14 06       	cpc	r1, r20
    16ae:	55 1f       	adc	r21, r21
    16b0:	f2 cf       	rjmp	.-28     	; 0x1696 <__fp_split3+0xe>
    16b2:	46 95       	lsr	r20
    16b4:	f1 df       	rcall	.-30     	; 0x1698 <__fp_splitA>
    16b6:	08 c0       	rjmp	.+16     	; 0x16c8 <__fp_splitA+0x30>
    16b8:	16 16       	cp	r1, r22
    16ba:	17 06       	cpc	r1, r23
    16bc:	18 06       	cpc	r1, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	f1 cf       	rjmp	.-30     	; 0x16a4 <__fp_splitA+0xc>
    16c2:	86 95       	lsr	r24
    16c4:	71 05       	cpc	r23, r1
    16c6:	61 05       	cpc	r22, r1
    16c8:	08 94       	sec
    16ca:	08 95       	ret

000016cc <__fp_zero>:
    16cc:	e8 94       	clt

000016ce <__fp_szero>:
    16ce:	bb 27       	eor	r27, r27
    16d0:	66 27       	eor	r22, r22
    16d2:	77 27       	eor	r23, r23
    16d4:	cb 01       	movw	r24, r22
    16d6:	97 f9       	bld	r25, 7
    16d8:	08 95       	ret

000016da <__gesf2>:
    16da:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fp_cmp>
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <__gesf2+0x8>
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	08 95       	ret

000016e4 <__mulsf3>:
    16e4:	0e 94 85 0b 	call	0x170a	; 0x170a <__mulsf3x>
    16e8:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_round>
    16ec:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fp_pscA>
    16f0:	38 f0       	brcs	.+14     	; 0x1700 <__mulsf3+0x1c>
    16f2:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_pscB>
    16f6:	20 f0       	brcs	.+8      	; 0x1700 <__mulsf3+0x1c>
    16f8:	95 23       	and	r25, r21
    16fa:	11 f0       	breq	.+4      	; 0x1700 <__mulsf3+0x1c>
    16fc:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__fp_inf>
    1700:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__fp_nan>
    1704:	11 24       	eor	r1, r1
    1706:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__fp_szero>

0000170a <__mulsf3x>:
    170a:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_split3>
    170e:	70 f3       	brcs	.-36     	; 0x16ec <__mulsf3+0x8>

00001710 <__mulsf3_pse>:
    1710:	95 9f       	mul	r25, r21
    1712:	c1 f3       	breq	.-16     	; 0x1704 <__mulsf3+0x20>
    1714:	95 0f       	add	r25, r21
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	55 1f       	adc	r21, r21
    171a:	62 9f       	mul	r22, r18
    171c:	f0 01       	movw	r30, r0
    171e:	72 9f       	mul	r23, r18
    1720:	bb 27       	eor	r27, r27
    1722:	f0 0d       	add	r31, r0
    1724:	b1 1d       	adc	r27, r1
    1726:	63 9f       	mul	r22, r19
    1728:	aa 27       	eor	r26, r26
    172a:	f0 0d       	add	r31, r0
    172c:	b1 1d       	adc	r27, r1
    172e:	aa 1f       	adc	r26, r26
    1730:	64 9f       	mul	r22, r20
    1732:	66 27       	eor	r22, r22
    1734:	b0 0d       	add	r27, r0
    1736:	a1 1d       	adc	r26, r1
    1738:	66 1f       	adc	r22, r22
    173a:	82 9f       	mul	r24, r18
    173c:	22 27       	eor	r18, r18
    173e:	b0 0d       	add	r27, r0
    1740:	a1 1d       	adc	r26, r1
    1742:	62 1f       	adc	r22, r18
    1744:	73 9f       	mul	r23, r19
    1746:	b0 0d       	add	r27, r0
    1748:	a1 1d       	adc	r26, r1
    174a:	62 1f       	adc	r22, r18
    174c:	83 9f       	mul	r24, r19
    174e:	a0 0d       	add	r26, r0
    1750:	61 1d       	adc	r22, r1
    1752:	22 1f       	adc	r18, r18
    1754:	74 9f       	mul	r23, r20
    1756:	33 27       	eor	r19, r19
    1758:	a0 0d       	add	r26, r0
    175a:	61 1d       	adc	r22, r1
    175c:	23 1f       	adc	r18, r19
    175e:	84 9f       	mul	r24, r20
    1760:	60 0d       	add	r22, r0
    1762:	21 1d       	adc	r18, r1
    1764:	82 2f       	mov	r24, r18
    1766:	76 2f       	mov	r23, r22
    1768:	6a 2f       	mov	r22, r26
    176a:	11 24       	eor	r1, r1
    176c:	9f 57       	subi	r25, 0x7F	; 127
    176e:	50 40       	sbci	r21, 0x00	; 0
    1770:	9a f0       	brmi	.+38     	; 0x1798 <__mulsf3_pse+0x88>
    1772:	f1 f0       	breq	.+60     	; 0x17b0 <__mulsf3_pse+0xa0>
    1774:	88 23       	and	r24, r24
    1776:	4a f0       	brmi	.+18     	; 0x178a <__mulsf3_pse+0x7a>
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	bb 1f       	adc	r27, r27
    177e:	66 1f       	adc	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	91 50       	subi	r25, 0x01	; 1
    1786:	50 40       	sbci	r21, 0x00	; 0
    1788:	a9 f7       	brne	.-22     	; 0x1774 <__mulsf3_pse+0x64>
    178a:	9e 3f       	cpi	r25, 0xFE	; 254
    178c:	51 05       	cpc	r21, r1
    178e:	80 f0       	brcs	.+32     	; 0x17b0 <__mulsf3_pse+0xa0>
    1790:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__fp_inf>
    1794:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__fp_szero>
    1798:	5f 3f       	cpi	r21, 0xFF	; 255
    179a:	e4 f3       	brlt	.-8      	; 0x1794 <__mulsf3_pse+0x84>
    179c:	98 3e       	cpi	r25, 0xE8	; 232
    179e:	d4 f3       	brlt	.-12     	; 0x1794 <__mulsf3_pse+0x84>
    17a0:	86 95       	lsr	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	f7 95       	ror	r31
    17aa:	e7 95       	ror	r30
    17ac:	9f 5f       	subi	r25, 0xFF	; 255
    17ae:	c1 f7       	brne	.-16     	; 0x17a0 <__mulsf3_pse+0x90>
    17b0:	fe 2b       	or	r31, r30
    17b2:	88 0f       	add	r24, r24
    17b4:	91 1d       	adc	r25, r1
    17b6:	96 95       	lsr	r25
    17b8:	87 95       	ror	r24
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret

000017be <sin>:
    17be:	9f 93       	push	r25
    17c0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_rempio2>
    17c4:	0f 90       	pop	r0
    17c6:	07 fc       	sbrc	r0, 7
    17c8:	ee 5f       	subi	r30, 0xFE	; 254
    17ca:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_sinus>
    17ce:	19 f4       	brne	.+6      	; 0x17d6 <sin+0x18>
    17d0:	16 f4       	brtc	.+4      	; 0x17d6 <sin+0x18>
    17d2:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__fp_nan>
    17d6:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_mpack>

000017da <sqrt>:
    17da:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_splitA>
    17de:	b8 f3       	brcs	.-18     	; 0x17ce <sin+0x10>
    17e0:	99 23       	and	r25, r25
    17e2:	c9 f3       	breq	.-14     	; 0x17d6 <sin+0x18>
    17e4:	b6 f3       	brts	.-20     	; 0x17d2 <sin+0x14>
    17e6:	9f 57       	subi	r25, 0x7F	; 127
    17e8:	55 0b       	sbc	r21, r21
    17ea:	87 ff       	sbrs	r24, 7
    17ec:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fp_norm2>
    17f0:	00 24       	eor	r0, r0
    17f2:	a0 e6       	ldi	r26, 0x60	; 96
    17f4:	40 ea       	ldi	r20, 0xA0	; 160
    17f6:	90 01       	movw	r18, r0
    17f8:	80 58       	subi	r24, 0x80	; 128
    17fa:	56 95       	lsr	r21
    17fc:	97 95       	ror	r25
    17fe:	28 f4       	brcc	.+10     	; 0x180a <sqrt+0x30>
    1800:	80 5c       	subi	r24, 0xC0	; 192
    1802:	66 0f       	add	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	20 f0       	brcs	.+8      	; 0x1812 <sqrt+0x38>
    180a:	26 17       	cp	r18, r22
    180c:	37 07       	cpc	r19, r23
    180e:	48 07       	cpc	r20, r24
    1810:	30 f4       	brcc	.+12     	; 0x181e <sqrt+0x44>
    1812:	62 1b       	sub	r22, r18
    1814:	73 0b       	sbc	r23, r19
    1816:	84 0b       	sbc	r24, r20
    1818:	20 29       	or	r18, r0
    181a:	31 29       	or	r19, r1
    181c:	4a 2b       	or	r20, r26
    181e:	a6 95       	lsr	r26
    1820:	17 94       	ror	r1
    1822:	07 94       	ror	r0
    1824:	20 25       	eor	r18, r0
    1826:	31 25       	eor	r19, r1
    1828:	4a 27       	eor	r20, r26
    182a:	58 f7       	brcc	.-42     	; 0x1802 <sqrt+0x28>
    182c:	66 0f       	add	r22, r22
    182e:	77 1f       	adc	r23, r23
    1830:	88 1f       	adc	r24, r24
    1832:	20 f0       	brcs	.+8      	; 0x183c <sqrt+0x62>
    1834:	26 17       	cp	r18, r22
    1836:	37 07       	cpc	r19, r23
    1838:	48 07       	cpc	r20, r24
    183a:	30 f4       	brcc	.+12     	; 0x1848 <sqrt+0x6e>
    183c:	62 0b       	sbc	r22, r18
    183e:	73 0b       	sbc	r23, r19
    1840:	84 0b       	sbc	r24, r20
    1842:	20 0d       	add	r18, r0
    1844:	31 1d       	adc	r19, r1
    1846:	41 1d       	adc	r20, r1
    1848:	a0 95       	com	r26
    184a:	81 f7       	brne	.-32     	; 0x182c <sqrt+0x52>
    184c:	b9 01       	movw	r22, r18
    184e:	84 2f       	mov	r24, r20
    1850:	91 58       	subi	r25, 0x81	; 129
    1852:	88 0f       	add	r24, r24
    1854:	96 95       	lsr	r25
    1856:	87 95       	ror	r24
    1858:	08 95       	ret

0000185a <__fp_mpack>:
    185a:	9f 3f       	cpi	r25, 0xFF	; 255
    185c:	31 f0       	breq	.+12     	; 0x186a <__fp_mpack_finite+0xc>

0000185e <__fp_mpack_finite>:
    185e:	91 50       	subi	r25, 0x01	; 1
    1860:	20 f4       	brcc	.+8      	; 0x186a <__fp_mpack_finite+0xc>
    1862:	87 95       	ror	r24
    1864:	77 95       	ror	r23
    1866:	67 95       	ror	r22
    1868:	b7 95       	ror	r27
    186a:	88 0f       	add	r24, r24
    186c:	91 1d       	adc	r25, r1
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	97 f9       	bld	r25, 7
    1874:	08 95       	ret

00001876 <__fp_norm2>:
    1876:	91 50       	subi	r25, 0x01	; 1
    1878:	50 40       	sbci	r21, 0x00	; 0
    187a:	66 0f       	add	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	88 1f       	adc	r24, r24
    1880:	d2 f7       	brpl	.-12     	; 0x1876 <__fp_norm2>
    1882:	08 95       	ret

00001884 <__fp_powsodd>:
    1884:	9f 93       	push	r25
    1886:	8f 93       	push	r24
    1888:	7f 93       	push	r23
    188a:	6f 93       	push	r22
    188c:	ff 93       	push	r31
    188e:	ef 93       	push	r30
    1890:	9b 01       	movw	r18, r22
    1892:	ac 01       	movw	r20, r24
    1894:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
    1898:	ef 91       	pop	r30
    189a:	ff 91       	pop	r31
    189c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fp_powser>
    18a0:	2f 91       	pop	r18
    18a2:	3f 91       	pop	r19
    18a4:	4f 91       	pop	r20
    18a6:	5f 91       	pop	r21
    18a8:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__mulsf3>

000018ac <__fp_powser>:
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	1f 93       	push	r17
    18b2:	0f 93       	push	r16
    18b4:	ff 92       	push	r15
    18b6:	ef 92       	push	r14
    18b8:	df 92       	push	r13
    18ba:	7b 01       	movw	r14, r22
    18bc:	8c 01       	movw	r16, r24
    18be:	68 94       	set
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <__fp_powser+0x22>
    18c2:	da 2e       	mov	r13, r26
    18c4:	ef 01       	movw	r28, r30
    18c6:	0e 94 85 0b 	call	0x170a	; 0x170a <__mulsf3x>
    18ca:	fe 01       	movw	r30, r28
    18cc:	e8 94       	clt
    18ce:	a5 91       	lpm	r26, Z+
    18d0:	25 91       	lpm	r18, Z+
    18d2:	35 91       	lpm	r19, Z+
    18d4:	45 91       	lpm	r20, Z+
    18d6:	55 91       	lpm	r21, Z+
    18d8:	a6 f3       	brts	.-24     	; 0x18c2 <__fp_powser+0x16>
    18da:	ef 01       	movw	r28, r30
    18dc:	0e 94 ab 09 	call	0x1356	; 0x1356 <__addsf3x>
    18e0:	fe 01       	movw	r30, r28
    18e2:	97 01       	movw	r18, r14
    18e4:	a8 01       	movw	r20, r16
    18e6:	da 94       	dec	r13
    18e8:	69 f7       	brne	.-38     	; 0x18c4 <__fp_powser+0x18>
    18ea:	df 90       	pop	r13
    18ec:	ef 90       	pop	r14
    18ee:	ff 90       	pop	r15
    18f0:	0f 91       	pop	r16
    18f2:	1f 91       	pop	r17
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <__udivmodhi4>:
    18fa:	aa 1b       	sub	r26, r26
    18fc:	bb 1b       	sub	r27, r27
    18fe:	51 e1       	ldi	r21, 0x11	; 17
    1900:	07 c0       	rjmp	.+14     	; 0x1910 <__udivmodhi4_ep>

00001902 <__udivmodhi4_loop>:
    1902:	aa 1f       	adc	r26, r26
    1904:	bb 1f       	adc	r27, r27
    1906:	a6 17       	cp	r26, r22
    1908:	b7 07       	cpc	r27, r23
    190a:	10 f0       	brcs	.+4      	; 0x1910 <__udivmodhi4_ep>
    190c:	a6 1b       	sub	r26, r22
    190e:	b7 0b       	sbc	r27, r23

00001910 <__udivmodhi4_ep>:
    1910:	88 1f       	adc	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	5a 95       	dec	r21
    1916:	a9 f7       	brne	.-22     	; 0x1902 <__udivmodhi4_loop>
    1918:	80 95       	com	r24
    191a:	90 95       	com	r25
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	08 95       	ret

00001922 <_exit>:
    1922:	f8 94       	cli

00001924 <__stop_program>:
    1924:	ff cf       	rjmp	.-2      	; 0x1924 <__stop_program>
