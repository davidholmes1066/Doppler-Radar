
Radar_ATXM256A3U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00001190  00001224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00802006  00802006  0000122a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000122a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b05  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038b5  00000000  00000000  00006ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f1c  00000000  00000000  0000a7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  0000b6cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032a6  00000000  00000000  0000bc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001067  00000000  00000000  0000eea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000ff0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__ctors_end>
       4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      10:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      14:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      18:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      1c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      20:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      24:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      28:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      30:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      34:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      38:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      3c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      44:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      4c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      50:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      58:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      5c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      60:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      68:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      6c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      70:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      7c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      80:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      84:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      90:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      94:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      9c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      bc:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_47>
      c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      fc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     100:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     104:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     108:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     10c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     110:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     114:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     118:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     11c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     120:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     124:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     128:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     12c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     130:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     134:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     138:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     13c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     140:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     144:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     148:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     14c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     150:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     154:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     158:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     15c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     160:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     164:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     168:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     16c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     170:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     174:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     178:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     17c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     180:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     184:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     188:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     18c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     190:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     194:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     198:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     19c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1bc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <__addsf3x+0x38>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df e5       	ldi	r29, 0x5F	; 95
     224:	de bf       	out	0x3e, r29	; 62
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0c bf       	out	0x3c, r16	; 60

0000022a <__do_clear_bss>:
     22a:	20 e2       	ldi	r18, 0x20	; 32
     22c:	a6 e0       	ldi	r26, 0x06	; 6
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	a4 31       	cpi	r26, 0x14	; 20
     236:	b2 07       	cpc	r27, r18
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>

0000023a <__do_copy_data>:
     23a:	10 e2       	ldi	r17, 0x20	; 32
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e2       	ldi	r27, 0x20	; 32
     240:	e0 e9       	ldi	r30, 0x90	; 144
     242:	f1 e1       	ldi	r31, 0x11	; 17
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0b bf       	out	0x3b, r16	; 59
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x14>
     24a:	07 90       	elpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	a6 30       	cpi	r26, 0x06	; 6
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0x10>
     254:	0e 94 bc 04 	call	0x978	; 0x978 <main>
     258:	0c 94 c6 08 	jmp	0x118c	; 0x118c <_exit>

0000025c <__bad_interrupt>:
     25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000260 <avr_log2>:

    C.im = A.im * B;                                                    //Calculates complex part
    C.re = A.re * B;                                                    //Calculates real part

    return C;                                                           //Returns complex struct
}
     260:	ac 01       	movw	r20, r24
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	03 c0       	rjmp	.+6      	; 0x272 <avr_log2+0x12>
     26c:	22 0f       	add	r18, r18
     26e:	33 1f       	adc	r19, r19
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	24 17       	cp	r18, r20
     274:	35 07       	cpc	r19, r21
     276:	d0 f3       	brcs	.-12     	; 0x26c <avr_log2+0xc>
     278:	08 95       	ret

0000027a <cf_multiply>:
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	a8 97       	sbiw	r28, 0x28	; 40
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	29 8b       	std	Y+17, r18	; 0x11
     2a6:	3a 8b       	std	Y+18, r19	; 0x12
     2a8:	4b 8b       	std	Y+19, r20	; 0x13
     2aa:	5c 8b       	std	Y+20, r21	; 0x14
     2ac:	6d 8b       	std	Y+21, r22	; 0x15
     2ae:	7e 8b       	std	Y+22, r23	; 0x16
     2b0:	8f 8b       	std	Y+23, r24	; 0x17
     2b2:	98 8f       	std	Y+24, r25	; 0x18
     2b4:	a9 8e       	std	Y+25, r10	; 0x19
     2b6:	ba 8e       	std	Y+26, r11	; 0x1a
     2b8:	cb 8e       	std	Y+27, r12	; 0x1b
     2ba:	dc 8e       	std	Y+28, r13	; 0x1c
     2bc:	ed 8e       	std	Y+29, r14	; 0x1d
     2be:	fe 8e       	std	Y+30, r15	; 0x1e
     2c0:	0f 8f       	std	Y+31, r16	; 0x1f
     2c2:	18 a3       	std	Y+32, r17	; 0x20
     2c4:	c9 88       	ldd	r12, Y+17	; 0x11
     2c6:	da 88       	ldd	r13, Y+18	; 0x12
     2c8:	eb 88       	ldd	r14, Y+19	; 0x13
     2ca:	fc 88       	ldd	r15, Y+20	; 0x14
     2cc:	4d 8c       	ldd	r4, Y+29	; 0x1d
     2ce:	5e 8c       	ldd	r5, Y+30	; 0x1e
     2d0:	6f 8c       	ldd	r6, Y+31	; 0x1f
     2d2:	78 a0       	ldd	r7, Y+32	; 0x20
     2d4:	a3 01       	movw	r20, r6
     2d6:	92 01       	movw	r18, r4
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     2e0:	6d a3       	std	Y+37, r22	; 0x25
     2e2:	7e a3       	std	Y+38, r23	; 0x26
     2e4:	8f a3       	std	Y+39, r24	; 0x27
     2e6:	98 a7       	std	Y+40, r25	; 0x28
     2e8:	8d 89       	ldd	r24, Y+21	; 0x15
     2ea:	9e 89       	ldd	r25, Y+22	; 0x16
     2ec:	af 89       	ldd	r26, Y+23	; 0x17
     2ee:	b8 8d       	ldd	r27, Y+24	; 0x18
     2f0:	89 a3       	std	Y+33, r24	; 0x21
     2f2:	9a a3       	std	Y+34, r25	; 0x22
     2f4:	ab a3       	std	Y+35, r26	; 0x23
     2f6:	bc a3       	std	Y+36, r27	; 0x24
     2f8:	89 8c       	ldd	r8, Y+25	; 0x19
     2fa:	9a 8c       	ldd	r9, Y+26	; 0x1a
     2fc:	ab 8c       	ldd	r10, Y+27	; 0x1b
     2fe:	bc 8c       	ldd	r11, Y+28	; 0x1c
     300:	a5 01       	movw	r20, r10
     302:	94 01       	movw	r18, r8
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     30c:	9b 01       	movw	r18, r22
     30e:	ac 01       	movw	r20, r24
     310:	6d a1       	ldd	r22, Y+37	; 0x25
     312:	7e a1       	ldd	r23, Y+38	; 0x26
     314:	8f a1       	ldd	r24, Y+39	; 0x27
     316:	98 a5       	ldd	r25, Y+40	; 0x28
     318:	0e 94 80 05 	call	0xb00	; 0xb00 <__addsf3>
     31c:	69 87       	std	Y+9, r22	; 0x09
     31e:	7a 87       	std	Y+10, r23	; 0x0a
     320:	8b 87       	std	Y+11, r24	; 0x0b
     322:	9c 87       	std	Y+12, r25	; 0x0c
     324:	29 a1       	ldd	r18, Y+33	; 0x21
     326:	3a a1       	ldd	r19, Y+34	; 0x22
     328:	4b a1       	ldd	r20, Y+35	; 0x23
     32a:	5c a1       	ldd	r21, Y+36	; 0x24
     32c:	c3 01       	movw	r24, r6
     32e:	b2 01       	movw	r22, r4
     330:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	a5 01       	movw	r20, r10
     33a:	94 01       	movw	r18, r8
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	c3 01       	movw	r24, r6
     34a:	b2 01       	movw	r22, r4
     34c:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
     350:	6d 87       	std	Y+13, r22	; 0x0d
     352:	7e 87       	std	Y+14, r23	; 0x0e
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	98 8b       	std	Y+16, r25	; 0x10
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	fe 01       	movw	r30, r28
     35c:	39 96       	adiw	r30, 0x09	; 9
     35e:	de 01       	movw	r26, r28
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	01 90       	ld	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	8a 95       	dec	r24
     368:	e1 f7       	brne	.-8      	; 0x362 <cf_multiply+0xe8>
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3a 81       	ldd	r19, Y+2	; 0x02
     36e:	4b 81       	ldd	r20, Y+3	; 0x03
     370:	5c 81       	ldd	r21, Y+4	; 0x04
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	a8 96       	adiw	r28, 0x28	; 40
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	08 95       	ret

000003a2 <cf_exp>:



complexfloat cf_exp(float phi)
{
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	60 97       	sbiw	r28, 0x10	; 16
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	6b 01       	movw	r12, r22
     3ba:	7c 01       	movw	r14, r24
    complexfloat C;                                                     //Creates a complex struct to return

    if(phi > 0)                                                         //positive exponent return cos(phi) + Isin(phi)
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	a9 01       	movw	r20, r18
     3c2:	0e 94 be 06 	call	0xd7c	; 0xd7c <__gesf2>
     3c6:	18 16       	cp	r1, r24
     3c8:	8c f4       	brge	.+34     	; 0x3ec <cf_exp+0x4a>
    {
        C.re = cosf(phi);
     3ca:	c7 01       	movw	r24, r14
     3cc:	b6 01       	movw	r22, r12
     3ce:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <cos>
     3d2:	6d 87       	std	Y+13, r22	; 0x0d
     3d4:	7e 87       	std	Y+14, r23	; 0x0e
     3d6:	8f 87       	std	Y+15, r24	; 0x0f
     3d8:	98 8b       	std	Y+16, r25	; 0x10
        C.im = sinf(phi);
     3da:	c7 01       	movw	r24, r14
     3dc:	b6 01       	movw	r22, r12
     3de:	0e 94 30 07 	call	0xe60	; 0xe60 <sin>
     3e2:	69 87       	std	Y+9, r22	; 0x09
     3e4:	7a 87       	std	Y+10, r23	; 0x0a
     3e6:	8b 87       	std	Y+11, r24	; 0x0b
     3e8:	9c 87       	std	Y+12, r25	; 0x0c
     3ea:	10 c0       	rjmp	.+32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    }

    else                                                                //negative exponent return cos(phi) - Isin(phi)
    {
        C.re = cosf(phi);
     3ec:	c7 01       	movw	r24, r14
     3ee:	b6 01       	movw	r22, r12
     3f0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <cos>
     3f4:	6d 87       	std	Y+13, r22	; 0x0d
     3f6:	7e 87       	std	Y+14, r23	; 0x0e
     3f8:	8f 87       	std	Y+15, r24	; 0x0f
     3fa:	98 8b       	std	Y+16, r25	; 0x10
        C.im = (sinf(phi));
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	0e 94 30 07 	call	0xe60	; 0xe60 <sin>
     404:	69 87       	std	Y+9, r22	; 0x09
     406:	7a 87       	std	Y+10, r23	; 0x0a
     408:	8b 87       	std	Y+11, r24	; 0x0b
     40a:	9c 87       	std	Y+12, r25	; 0x0c
    }

    return C;                                                           //return complex exponent
     40c:	88 e0       	ldi	r24, 0x08	; 8
     40e:	fe 01       	movw	r30, r28
     410:	39 96       	adiw	r30, 0x09	; 9
     412:	de 01       	movw	r26, r28
     414:	11 96       	adiw	r26, 0x01	; 1
     416:	01 90       	ld	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	8a 95       	dec	r24
     41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	29 81       	ldd	r18, Y+1	; 0x01
     420:	3a 81       	ldd	r19, Y+2	; 0x02
     422:	4b 81       	ldd	r20, Y+3	; 0x03
     424:	5c 81       	ldd	r21, Y+4	; 0x04
     426:	6d 81       	ldd	r22, Y+5	; 0x05
     428:	7e 81       	ldd	r23, Y+6	; 0x06
}
     42a:	8f 81       	ldd	r24, Y+7	; 0x07
     42c:	98 85       	ldd	r25, Y+8	; 0x08
     42e:	60 96       	adiw	r28, 0x10	; 16
     430:	cd bf       	out	0x3d, r28	; 61
     432:	de bf       	out	0x3e, r29	; 62
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	08 95       	ret

00000442 <calc_BitReversal>:
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
		PCalc /= 2;                                                                                             //Set parallel computations to half
	}
}
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	ec 01       	movw	r28, r24
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     450:	fc 01       	movw	r30, r24
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	bf 01       	movw	r22, r30
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	1c c0       	rjmp	.+56     	; 0x498 <calc_BitReversal+0x56>
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	04 2e       	mov	r0, r20
     466:	02 c0       	rjmp	.+4      	; 0x46c <calc_BitReversal+0x2a>
     468:	22 0f       	add	r18, r18
     46a:	33 1f       	adc	r19, r19
     46c:	0a 94       	dec	r0
     46e:	e2 f7       	brpl	.-8      	; 0x468 <calc_BitReversal+0x26>
     470:	2c 23       	and	r18, r28
     472:	3d 23       	and	r19, r29
     474:	04 2e       	mov	r0, r20
     476:	02 c0       	rjmp	.+4      	; 0x47c <calc_BitReversal+0x3a>
     478:	36 95       	lsr	r19
     47a:	27 95       	ror	r18
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <calc_BitReversal+0x36>
     480:	06 2e       	mov	r0, r22
     482:	02 c0       	rjmp	.+4      	; 0x488 <calc_BitReversal+0x46>
     484:	22 0f       	add	r18, r18
     486:	33 1f       	adc	r19, r19
     488:	0a 94       	dec	r0
     48a:	e2 f7       	brpl	.-8      	; 0x484 <calc_BitReversal+0x42>
     48c:	82 2b       	or	r24, r18
     48e:	93 2b       	or	r25, r19
     490:	4f 5f       	subi	r20, 0xFF	; 255
     492:	5f 4f       	sbci	r21, 0xFF	; 255
     494:	61 50       	subi	r22, 0x01	; 1
     496:	71 09       	sbc	r23, r1
     498:	e4 17       	cp	r30, r20
     49a:	f5 07       	cpc	r31, r21
     49c:	08 f7       	brcc	.-62     	; 0x460 <calc_BitReversal+0x1e>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <init_BRLookup>:
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	94 e0       	ldi	r25, 0x04	; 4
     4b4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <malloc>
     4b8:	7c 01       	movw	r14, r24
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
     4bc:	d0 e0       	ldi	r29, 0x00	; 0
     4be:	0c c0       	rjmp	.+24     	; 0x4d8 <init_BRLookup+0x34>
     4c0:	8e 01       	movw	r16, r28
     4c2:	00 0f       	add	r16, r16
     4c4:	11 1f       	adc	r17, r17
     4c6:	0e 0d       	add	r16, r14
     4c8:	1f 1d       	adc	r17, r15
     4ca:	ce 01       	movw	r24, r28
     4cc:	0e 94 21 02 	call	0x442	; 0x442 <calc_BitReversal>
     4d0:	f8 01       	movw	r30, r16
     4d2:	80 83       	st	Z, r24
     4d4:	91 83       	std	Z+1, r25	; 0x01
     4d6:	21 96       	adiw	r28, 0x01	; 1
     4d8:	c1 15       	cp	r28, r1
     4da:	f2 e0       	ldi	r31, 0x02	; 2
     4dc:	df 07       	cpc	r29, r31
     4de:	80 f3       	brcs	.-32     	; 0x4c0 <init_BRLookup+0x1c>
     4e0:	c7 01       	movw	r24, r14
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	08 95       	ret

000004f0 <init_avr_Wlookup>:
     4f0:	6f 92       	push	r6
     4f2:	7f 92       	push	r7
     4f4:	8f 92       	push	r8
     4f6:	9f 92       	push	r9
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	60 97       	sbiw	r28, 0x10	; 16
     512:	cd bf       	out	0x3d, r28	; 61
     514:	de bf       	out	0x3e, r29	; 62
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	98 e0       	ldi	r25, 0x08	; 8
     51a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <malloc>
     51e:	3c 01       	movw	r6, r24
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e8       	ldi	r26, 0x80	; 128
     526:	bf e3       	ldi	r27, 0x3F	; 63
     528:	8d 83       	std	Y+5, r24	; 0x05
     52a:	9e 83       	std	Y+6, r25	; 0x06
     52c:	af 83       	std	Y+7, r26	; 0x07
     52e:	b8 87       	std	Y+8, r27	; 0x08
     530:	19 82       	std	Y+1, r1	; 0x01
     532:	1a 82       	std	Y+2, r1	; 0x02
     534:	1b 82       	std	Y+3, r1	; 0x03
     536:	1c 82       	std	Y+4, r1	; 0x04
     538:	6b ed       	ldi	r22, 0xDB	; 219
     53a:	7f e0       	ldi	r23, 0x0F	; 15
     53c:	89 e4       	ldi	r24, 0x49	; 73
     53e:	9c eb       	ldi	r25, 0xBC	; 188
     540:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_exp>
     544:	29 87       	std	Y+9, r18	; 0x09
     546:	3a 87       	std	Y+10, r19	; 0x0a
     548:	4b 87       	std	Y+11, r20	; 0x0b
     54a:	5c 87       	std	Y+12, r21	; 0x0c
     54c:	6d 87       	std	Y+13, r22	; 0x0d
     54e:	7e 87       	std	Y+14, r23	; 0x0e
     550:	8f 87       	std	Y+15, r24	; 0x0f
     552:	98 8b       	std	Y+16, r25	; 0x10
     554:	81 2c       	mov	r8, r1
     556:	91 2c       	mov	r9, r1
     558:	36 c0       	rjmp	.+108    	; 0x5c6 <init_avr_Wlookup+0xd6>
     55a:	f4 01       	movw	r30, r8
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	e6 0d       	add	r30, r6
     56a:	f7 1d       	adc	r31, r7
     56c:	8d 81       	ldd	r24, Y+5	; 0x05
     56e:	9e 81       	ldd	r25, Y+6	; 0x06
     570:	af 81       	ldd	r26, Y+7	; 0x07
     572:	b8 85       	ldd	r27, Y+8	; 0x08
     574:	84 83       	std	Z+4, r24	; 0x04
     576:	95 83       	std	Z+5, r25	; 0x05
     578:	a6 83       	std	Z+6, r26	; 0x06
     57a:	b7 83       	std	Z+7, r27	; 0x07
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	ab 81       	ldd	r26, Y+3	; 0x03
     582:	bc 81       	ldd	r27, Y+4	; 0x04
     584:	80 83       	st	Z, r24
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	a2 83       	std	Z+2, r26	; 0x02
     58a:	b3 83       	std	Z+3, r27	; 0x03
     58c:	a9 84       	ldd	r10, Y+9	; 0x09
     58e:	ba 84       	ldd	r11, Y+10	; 0x0a
     590:	cb 84       	ldd	r12, Y+11	; 0x0b
     592:	dc 84       	ldd	r13, Y+12	; 0x0c
     594:	ed 84       	ldd	r14, Y+13	; 0x0d
     596:	fe 84       	ldd	r15, Y+14	; 0x0e
     598:	0f 85       	ldd	r16, Y+15	; 0x0f
     59a:	18 89       	ldd	r17, Y+16	; 0x10
     59c:	29 81       	ldd	r18, Y+1	; 0x01
     59e:	3a 81       	ldd	r19, Y+2	; 0x02
     5a0:	4b 81       	ldd	r20, Y+3	; 0x03
     5a2:	5c 81       	ldd	r21, Y+4	; 0x04
     5a4:	6d 81       	ldd	r22, Y+5	; 0x05
     5a6:	7e 81       	ldd	r23, Y+6	; 0x06
     5a8:	8f 81       	ldd	r24, Y+7	; 0x07
     5aa:	98 85       	ldd	r25, Y+8	; 0x08
     5ac:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     5b0:	29 83       	std	Y+1, r18	; 0x01
     5b2:	3a 83       	std	Y+2, r19	; 0x02
     5b4:	4b 83       	std	Y+3, r20	; 0x03
     5b6:	5c 83       	std	Y+4, r21	; 0x04
     5b8:	6d 83       	std	Y+5, r22	; 0x05
     5ba:	7e 83       	std	Y+6, r23	; 0x06
     5bc:	8f 83       	std	Y+7, r24	; 0x07
     5be:	98 87       	std	Y+8, r25	; 0x08
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	88 1a       	sub	r8, r24
     5c4:	98 0a       	sbc	r9, r24
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	88 16       	cp	r8, r24
     5ca:	91 04       	cpc	r9, r1
     5cc:	31 f2       	breq	.-116    	; 0x55a <init_avr_Wlookup+0x6a>
     5ce:	28 f2       	brcs	.-118    	; 0x55a <init_avr_Wlookup+0x6a>
     5d0:	c3 01       	movw	r24, r6
     5d2:	60 96       	adiw	r28, 0x10	; 16
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	9f 90       	pop	r9
     5ee:	8f 90       	pop	r8
     5f0:	7f 90       	pop	r7
     5f2:	6f 90       	pop	r6
     5f4:	08 95       	ret

000005f6 <init_avr_fft>:
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e1       	ldi	r25, 0x10	; 16
     5fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <malloc>
     5fe:	08 95       	ret

00000600 <init_Window>:

float *init_Window(void)
{
     600:	4f 92       	push	r4
     602:	5f 92       	push	r5
     604:	6f 92       	push	r6
     606:	7f 92       	push	r7
     608:	af 92       	push	r10
     60a:	bf 92       	push	r11
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
	float *Window = malloc(sizeof(float)*(N/2));																//Allocate memory for the window function
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	0e 94 a5 07 	call	0xf4a	; 0xf4a <malloc>
     624:	5c 01       	movw	r10, r24
	for(uint16_t i = 0; i < (N/2); i++)
     626:	c0 e0       	ldi	r28, 0x00	; 0
     628:	d0 e0       	ldi	r29, 0x00	; 0
     62a:	6c c0       	rjmp	.+216    	; 0x704 <init_Window+0x104>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
     62c:	8e 01       	movw	r16, r28
     62e:	00 0f       	add	r16, r16
     630:	11 1f       	adc	r17, r17
     632:	00 0f       	add	r16, r16
     634:	11 1f       	adc	r17, r17
     636:	0a 0d       	add	r16, r10
     638:	1b 1d       	adc	r17, r11
     63a:	be 01       	movw	r22, r28
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__floatunsisf>
     644:	6b 01       	movw	r12, r22
     646:	7c 01       	movw	r14, r24
     648:	2b ed       	ldi	r18, 0xDB	; 219
     64a:	3f e0       	ldi	r19, 0x0F	; 15
     64c:	49 ec       	ldi	r20, 0xC9	; 201
     64e:	50 e4       	ldi	r21, 0x40	; 64
     650:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	5b e3       	ldi	r21, 0x3B	; 59
     65c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     660:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <cos>
     664:	26 e2       	ldi	r18, 0x26	; 38
     666:	31 e0       	ldi	r19, 0x01	; 1
     668:	4a ef       	ldi	r20, 0xFA	; 250
     66a:	5e e3       	ldi	r21, 0x3E	; 62
     66c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     670:	9b 01       	movw	r18, r22
     672:	ac 01       	movw	r20, r24
     674:	64 e1       	ldi	r22, 0x14	; 20
     676:	7e ea       	ldi	r23, 0xAE	; 174
     678:	87 eb       	ldi	r24, 0xB7	; 183
     67a:	9e e3       	ldi	r25, 0x3E	; 62
     67c:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
     680:	2b 01       	movw	r4, r22
     682:	3c 01       	movw	r6, r24
     684:	2b ed       	ldi	r18, 0xDB	; 219
     686:	3f e0       	ldi	r19, 0x0F	; 15
     688:	49 e4       	ldi	r20, 0x49	; 73
     68a:	51 e4       	ldi	r21, 0x41	; 65
     68c:	c7 01       	movw	r24, r14
     68e:	b6 01       	movw	r22, r12
     690:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	5b e3       	ldi	r21, 0x3B	; 59
     69c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     6a0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <cos>
     6a4:	24 eb       	ldi	r18, 0xB4	; 180
     6a6:	3b ea       	ldi	r19, 0xAB	; 171
     6a8:	40 e1       	ldi	r20, 0x10	; 16
     6aa:	5e e3       	ldi	r21, 0x3E	; 62
     6ac:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	0e 94 80 05 	call	0xb00	; 0xb00 <__addsf3>
     6bc:	2b 01       	movw	r4, r22
     6be:	3c 01       	movw	r6, r24
     6c0:	24 ee       	ldi	r18, 0xE4	; 228
     6c2:	3b ec       	ldi	r19, 0xCB	; 203
     6c4:	46 e9       	ldi	r20, 0x96	; 150
     6c6:	51 e4       	ldi	r21, 0x41	; 65
     6c8:	c7 01       	movw	r24, r14
     6ca:	b6 01       	movw	r22, r12
     6cc:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	5b e3       	ldi	r21, 0x3B	; 59
     6d8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     6dc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <cos>
     6e0:	29 e7       	ldi	r18, 0x79	; 121
     6e2:	3d e5       	ldi	r19, 0x5D	; 93
     6e4:	4f e3       	ldi	r20, 0x3F	; 63
     6e6:	5c e3       	ldi	r21, 0x3C	; 60
     6e8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	c3 01       	movw	r24, r6
     6f2:	b2 01       	movw	r22, r4
     6f4:	0e 94 7f 05 	call	0xafe	; 0xafe <__subsf3>
     6f8:	f8 01       	movw	r30, r16
     6fa:	60 83       	st	Z, r22
     6fc:	71 83       	std	Z+1, r23	; 0x01
     6fe:	82 83       	std	Z+2, r24	; 0x02
     700:	93 83       	std	Z+3, r25	; 0x03
}

float *init_Window(void)
{
	float *Window = malloc(sizeof(float)*(N/2));																//Allocate memory for the window function
	for(uint16_t i = 0; i < (N/2); i++)
     702:	21 96       	adiw	r28, 0x01	; 1
     704:	cf 3f       	cpi	r28, 0xFF	; 255
     706:	d1 05       	cpc	r29, r1
     708:	09 f0       	breq	.+2      	; 0x70c <init_Window+0x10c>
     70a:	08 f4       	brcc	.+2      	; 0x70e <init_Window+0x10e>
     70c:	8f cf       	rjmp	.-226    	; 0x62c <init_Window+0x2c>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
	}

	return Window;
     70e:	c5 01       	movw	r24, r10
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	7f 90       	pop	r7
     726:	6f 90       	pop	r6
     728:	5f 90       	pop	r5
     72a:	4f 90       	pop	r4
     72c:	08 95       	ret

0000072e <stop_timer>:
#include "handle.h"

void stop_timer(void)
{
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;																	//Turn timer off
     72e:	e0 e0       	ldi	r30, 0x00	; 0
     730:	fa e0       	ldi	r31, 0x0A	; 10
     732:	10 82       	st	Z, r1
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_OVFINTLVL_OFF_gc;						//Turn interrupt off
     734:	86 81       	ldd	r24, Z+6	; 0x06
     736:	8c 7f       	andi	r24, 0xFC	; 252
     738:	86 83       	std	Z+6, r24	; 0x06
	TCE0.CNT = 0;
     73a:	10 a2       	std	Z+32, r1	; 0x20
     73c:	11 a2       	std	Z+33, r1	; 0x21
     73e:	08 95       	ret

00000740 <start_timer>:
}

void start_timer(void)
{
	TCE0.CNT = 0;
     740:	e0 e0       	ldi	r30, 0x00	; 0
     742:	fa e0       	ldi	r31, 0x0A	; 10
     744:	10 a2       	std	Z+32, r1	; 0x20
     746:	11 a2       	std	Z+33, r1	; 0x21
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_OVFINTLVL_LO_gc;						//Turn on overflow interrupt
     748:	86 81       	ldd	r24, Z+6	; 0x06
     74a:	8c 7f       	andi	r24, 0xFC	; 252
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	86 83       	std	Z+6, r24	; 0x06
	TCE0.CTRLA = TC_CLKSEL_DIV256_gc;																//turn on TC
     750:	86 e0       	ldi	r24, 0x06	; 6
     752:	80 83       	st	Z, r24
     754:	08 95       	ret

00000756 <write8_UART>:
} 

void write8_UART(uint8_t data)
{
	int test = 0;
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
	while(test==0)
     75a:	04 c0       	rjmp	.+8      	; 0x764 <write8_UART+0xe>
	{
		test = USARTE0.STATUS&(0x20);																//keep polling until the data register is ready to receive new data
     75c:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     760:	20 72       	andi	r18, 0x20	; 32
     762:	30 e0       	ldi	r19, 0x00	; 0
} 

void write8_UART(uint8_t data)
{
	int test = 0;
	while(test==0)
     764:	23 2b       	or	r18, r19
     766:	d1 f3       	breq	.-12     	; 0x75c <write8_UART+0x6>
	{
		test = USARTE0.STATUS&(0x20);																//keep polling until the data register is ready to receive new data
	}
	
	USARTE0.DATA = data;																			//write the 8bits to MATLAB
     768:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
	
	test = 0;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
	while(test==0)
     770:	04 c0       	rjmp	.+8      	; 0x77a <write8_UART+0x24>
	{
		test = USARTE0.STATUS&(0x20);																//keep polling until the data register is ready to receive new data
     772:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     776:	80 72       	andi	r24, 0x20	; 32
     778:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	USARTE0.DATA = data;																			//write the 8bits to MATLAB
	
	test = 0;
	while(test==0)
     77a:	89 2b       	or	r24, r25
     77c:	d1 f3       	breq	.-12     	; 0x772 <write8_UART+0x1c>
	{
		test = USARTE0.STATUS&(0x20);																//keep polling until the data register is ready to receive new data
	}
}
     77e:	08 95       	ret

00000780 <read8_UART>:

uint8_t read8_UART(void)
{
	int test = 0;
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t garbage;
	uint8_t data;
	
	while(test==0)
     784:	04 c0       	rjmp	.+8      	; 0x78e <read8_UART+0xe>
	{
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is high
     786:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     78a:	20 78       	andi	r18, 0x80	; 128
     78c:	30 e0       	ldi	r19, 0x00	; 0
{
	int test = 0;
	uint8_t garbage;
	uint8_t data;
	
	while(test==0)
     78e:	21 15       	cp	r18, r1
     790:	31 05       	cpc	r19, r1
     792:	c9 f3       	breq	.-14     	; 0x786 <read8_UART+0x6>
	{
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is high
	}
	
	data = USARTE0.DATA;																			//read the data from the data RX/TX register
     794:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
	
	while(test!=0)
     798:	06 c0       	rjmp	.+12     	; 0x7a6 <read8_UART+0x26>
	{
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is low
     79a:	e0 ea       	ldi	r30, 0xA0	; 160
     79c:	fa e0       	ldi	r31, 0x0A	; 10
     79e:	21 81       	ldd	r18, Z+1	; 0x01
     7a0:	20 78       	andi	r18, 0x80	; 128
     7a2:	30 e0       	ldi	r19, 0x00	; 0
		garbage = USARTE0.DATA;																		//read the data until register is automatically cleared
     7a4:	90 81       	ld	r25, Z
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is high
	}
	
	data = USARTE0.DATA;																			//read the data from the data RX/TX register
	
	while(test!=0)
     7a6:	23 2b       	or	r18, r19
     7a8:	c1 f7       	brne	.-16     	; 0x79a <read8_UART+0x1a>
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is low
		garbage = USARTE0.DATA;																		//read the data until register is automatically cleared
	}
	
	return data;																					//returns 8bit received data
}
     7aa:	08 95       	ret

000007ac <writeF_UART>:

void writeF_UART(float data)
{
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <writeF_UART+0x6>
     7b2:	1f 92       	push	r1
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	69 83       	std	Y+1, r22	; 0x01
     7ba:	7a 83       	std	Y+2, r23	; 0x02
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t *sendarray = (uint8_t*)(&data);															//converts float to 4 separate bytes in send array
	write8_UART(sendarray[0]);																		//Sends separate bytes (LF)
     7c0:	86 2f       	mov	r24, r22
     7c2:	0e 94 ab 03 	call	0x756	; 0x756 <write8_UART>
	not_correct_delay();
	write8_UART(sendarray[1]);
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	0e 94 ab 03 	call	0x756	; 0x756 <write8_UART>
	not_correct_delay();
	write8_UART(sendarray[2]);
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	0e 94 ab 03 	call	0x756	; 0x756 <write8_UART>
	not_correct_delay();
	write8_UART(sendarray[3]);
     7d2:	8c 81       	ldd	r24, Y+4	; 0x04
     7d4:	0e 94 ab 03 	call	0x756	; 0x756 <write8_UART>
	not_correct_delay();
}
     7d8:	24 96       	adiw	r28, 0x04	; 4
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <read_ADC>:

void read_ADC(complexfloat *FFT_Array, uint16_t *Lookup_Reverse, uint16_t i)
{
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	8c 01       	movw	r16, r24
	ADCA.CTRLA = ADC_ENABLE_bm;																		//Enables ADCA
     7fa:	a0 e0       	ldi	r26, 0x00	; 0
     7fc:	b2 e0       	ldi	r27, 0x02	; 2
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	8c 93       	st	X, r24
	ADCB.CTRLA = ADC_ENABLE_bm;																		//Enables ADCB
     802:	e0 e4       	ldi	r30, 0x40	; 64
     804:	f2 e0       	ldi	r31, 0x02	; 2
     806:	80 83       	st	Z, r24
	
	ADCA.CTRLA |= (0x01 << 2);							 											//Start ADCA conversion CH0
     808:	8c 91       	ld	r24, X
     80a:	84 60       	ori	r24, 0x04	; 4
     80c:	8c 93       	st	X, r24
	ADCB.CTRLA |= (0x01 << 2);																		//Start ADCB conversion CH0
     80e:	80 81       	ld	r24, Z
     810:	84 60       	ori	r24, 0x04	; 4
     812:	80 83       	st	Z, r24
	
	while( (((ADCA.INTFLAGS & (0x01)) != (0x1)) && ((ADCB.INTFLAGS & (0x01)) != (0x1))))			//Poll ADC IF
     814:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
     818:	80 fd       	sbrc	r24, 0
     81a:	04 c0       	rjmp	.+8      	; 0x824 <read_ADC+0x40>
     81c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     820:	80 ff       	sbrs	r24, 0
     822:	f8 cf       	rjmp	.-16     	; 0x814 <read_ADC+0x30>
	{
		//Wait for conversion
	}
	
	FFT_Array[Lookup_Reverse[i]].re = ((float)ADCA.CH0.RES);										//Save I[i] sample to BR location in FFT_Array
     824:	44 0f       	add	r20, r20
     826:	55 1f       	adc	r21, r21
     828:	eb 01       	movw	r28, r22
     82a:	c4 0f       	add	r28, r20
     82c:	d5 1f       	adc	r29, r21
     82e:	e8 80       	ld	r14, Y
     830:	f9 80       	ldd	r15, Y+1	; 0x01
     832:	ee 0c       	add	r14, r14
     834:	ff 1c       	adc	r15, r15
     836:	ee 0c       	add	r14, r14
     838:	ff 1c       	adc	r15, r15
     83a:	ee 0c       	add	r14, r14
     83c:	ff 1c       	adc	r15, r15
     83e:	e0 0e       	add	r14, r16
     840:	f1 1e       	adc	r15, r17
     842:	a1 2c       	mov	r10, r1
     844:	68 94       	set
     846:	bb 24       	eor	r11, r11
     848:	b1 f8       	bld	r11, 1
     84a:	f5 01       	movw	r30, r10
     84c:	64 a1       	ldd	r22, Z+36	; 0x24
     84e:	75 a1       	ldd	r23, Z+37	; 0x25
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__floatunsisf>
     858:	f7 01       	movw	r30, r14
     85a:	64 83       	std	Z+4, r22	; 0x04
     85c:	75 83       	std	Z+5, r23	; 0x05
     85e:	86 83       	std	Z+6, r24	; 0x06
     860:	97 83       	std	Z+7, r25	; 0x07
	FFT_Array[Lookup_Reverse[i]].im = ((float)ADCB.CH0.RES);										//Save Q[i] sample to BR location in FFT_Array
     862:	e8 80       	ld	r14, Y
     864:	f9 80       	ldd	r15, Y+1	; 0x01
     866:	ee 0c       	add	r14, r14
     868:	ff 1c       	adc	r15, r15
     86a:	ee 0c       	add	r14, r14
     86c:	ff 1c       	adc	r15, r15
     86e:	ee 0c       	add	r14, r14
     870:	ff 1c       	adc	r15, r15
     872:	e0 0e       	add	r14, r16
     874:	f1 1e       	adc	r15, r17
     876:	68 94       	set
     878:	cc 24       	eor	r12, r12
     87a:	c6 f8       	bld	r12, 6
     87c:	dd 24       	eor	r13, r13
     87e:	d1 f8       	bld	r13, 1
     880:	f6 01       	movw	r30, r12
     882:	64 a1       	ldd	r22, Z+36	; 0x24
     884:	75 a1       	ldd	r23, Z+37	; 0x25
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__floatunsisf>
     88e:	f7 01       	movw	r30, r14
     890:	60 83       	st	Z, r22
     892:	71 83       	std	Z+1, r23	; 0x01
     894:	82 83       	std	Z+2, r24	; 0x02
     896:	93 83       	std	Z+3, r25	; 0x03
	
	ADCA.CTRLA &= (0xFE);																			//Disable ADCA
     898:	f5 01       	movw	r30, r10
     89a:	80 81       	ld	r24, Z
     89c:	8e 7f       	andi	r24, 0xFE	; 254
     89e:	80 83       	st	Z, r24
	ADCB.CTRLA &= (0xFE);																			//Disable ADCB
     8a0:	f6 01       	movw	r30, r12
     8a2:	80 81       	ld	r24, Z
     8a4:	8e 7f       	andi	r24, 0xFE	; 254
     8a6:	80 83       	st	Z, r24
	
	writeF_UART(FFT_Array[Lookup_Reverse[i]].re);
     8a8:	e8 81       	ld	r30, Y
     8aa:	f9 81       	ldd	r31, Y+1	; 0x01
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	e0 0f       	add	r30, r16
     8ba:	f1 1f       	adc	r31, r17
     8bc:	64 81       	ldd	r22, Z+4	; 0x04
     8be:	75 81       	ldd	r23, Z+5	; 0x05
     8c0:	86 81       	ldd	r24, Z+6	; 0x06
     8c2:	97 81       	ldd	r25, Z+7	; 0x07
     8c4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <writeF_UART>
	writeF_UART(FFT_Array[Lookup_Reverse[i]].im);
     8c8:	e8 81       	ld	r30, Y
     8ca:	f9 81       	ldd	r31, Y+1	; 0x01
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	e0 0f       	add	r30, r16
     8da:	f1 1f       	adc	r31, r17
     8dc:	60 81       	ld	r22, Z
     8de:	71 81       	ldd	r23, Z+1	; 0x01
     8e0:	82 81       	ldd	r24, Z+2	; 0x02
     8e2:	93 81       	ldd	r25, Z+3	; 0x03
     8e4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <writeF_UART>
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	08 95       	ret

000008fe <__vector_47>:
uint16_t count = 0;																//keeps track of samples taken



ISR(TCE0_OVF_vect)																//When TC overflows (@ 5kHz interval)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	0b b6       	in	r0, 0x3b	; 59
     90a:	0f 92       	push	r0
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
	read_ADC(FFT_Array, Reverse_Lookup, count);									//Gets IQ samples and decimates in time
     924:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <__data_end>
     928:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <__data_end+0x1>
     92c:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <Reverse_Lookup>
     930:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <Reverse_Lookup+0x1>
     934:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <FFT_Array>
     938:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <FFT_Array+0x1>
     93c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <read_ADC>
	count++;																	//Add sample count by one
     940:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
     944:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
     94e:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
}
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	7f 91       	pop	r23
     960:	6f 91       	pop	r22
     962:	5f 91       	pop	r21
     964:	4f 91       	pop	r20
     966:	3f 91       	pop	r19
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0b be       	out	0x3b, r0	; 59
     96e:	0f 90       	pop	r0
     970:	0f be       	out	0x3f, r0	; 63
     972:	0f 90       	pop	r0
     974:	1f 90       	pop	r1
     976:	18 95       	reti

00000978 <main>:



int main(void)
{
	init_CLK();																	//Set F_CPU to 32MHz
     978:	0e 94 15 05 	call	0xa2a	; 0xa2a <init_CLK>
	init_TIMER();																//Set timer for sampling @ fixed frequency
     97c:	0e 94 27 05 	call	0xa4e	; 0xa4e <init_TIMER>
	init_UART();																//Debug UART 115200Baud (PE2: RX, PE3 TX)
     980:	0e 94 fe 04 	call	0x9fc	; 0x9fc <init_UART>
	init_IO();																	//Setup of I/O pins
     984:	0e 94 32 05 	call	0xa64	; 0xa64 <init_IO>
	init_ADC();																	//Set registers for internal ADC
     988:	0e 94 40 05 	call	0xa80	; 0xa80 <init_ADC>
	init_DAC();																	//Set registers for internal DAC
     98c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <init_DAC>
	
	sei();																		//Global interrupt mask
     990:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;												//Set low level interrupts
     992:	e0 ea       	ldi	r30, 0xA0	; 160
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	82 81       	ldd	r24, Z+2	; 0x02
     998:	81 60       	ori	r24, 0x01	; 1
     99a:	82 83       	std	Z+2, r24	; 0x02
	
	FFT_Array = init_avr_fft();													//Creates data block in heap for FFT in place computation
     99c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <init_avr_fft>
     9a0:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <FFT_Array>
     9a4:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <FFT_Array+0x1>
	W = init_avr_Wlookup();														//Creates heap lookup table for twiddle factors
     9a8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <init_avr_Wlookup>
     9ac:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <W>
     9b0:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <W+0x1>
	Reverse_Lookup = init_BRLookup();											//Creates heap lookup table for bit reverse order (decimation order)
     9b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <init_BRLookup>
     9b8:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <Reverse_Lookup>
     9bc:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <Reverse_Lookup+0x1>
	Window = init_Window();														//Creates heap lookup table for the Window function
     9c0:	0e 94 00 03 	call	0x600	; 0x600 <init_Window>
     9c4:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <Window>
     9c8:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <Window+0x1>
}



int main(void)
{
     9cc:	c1 e0       	ldi	r28, 0x01	; 1
	
	
	while(1)
	{

		if(ReadyFInstruction == 1)
     9ce:	c1 30       	cpi	r28, 0x01	; 1
     9d0:	39 f4       	brne	.+14     	; 0x9e0 <main+0x68>
		{
			Instruction = read8_UART();
     9d2:	0e 94 c0 03 	call	0x780	; 0x780 <read8_UART>
			
			switch (Instruction)
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	19 f4       	brne	.+6      	; 0x9e0 <main+0x68>
			{
				case 1:
					ReadyFInstruction = 0;										//Set status to busy
					Instruction = 0;											//Reset instruction
					start_timer();												//start taking samples
     9da:	0e 94 a0 03 	call	0x740	; 0x740 <start_timer>
			Instruction = read8_UART();
			
			switch (Instruction)
			{
				case 1:
					ReadyFInstruction = 0;										//Set status to busy
     9de:	c0 e0       	ldi	r28, 0x00	; 0
					break;
			}
		}
		
		
		if(count == (N-1))														//When the FFT array is full of samples perform calculations
     9e0:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
     9e4:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
     9e8:	8f 3f       	cpi	r24, 0xFF	; 255
     9ea:	91 40       	sbci	r25, 0x01	; 1
     9ec:	81 f7       	brne	.-32     	; 0x9ce <main+0x56>
		{
			stop_timer();														//Stop sampling and reset TC.CNT
     9ee:	0e 94 97 03 	call	0x72e	; 0x72e <stop_timer>
//			apply_avr_Window(FFT_Array, Window, Reverse_Lookup);				//Apply Blackman-Harris window
//			calc_avr_FFT(FFT_Array, W);											//Calculates Radix2-FFT in pace
//			DebugPrint_spectrum(FFT_Array, N);									//Calculate vector magnitudes and send floats through UART --> USB2.0 in 8bit sections
			count = 0;															//Reset sample count
     9f2:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <__data_end>
     9f6:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <__data_end+0x1>
     9fa:	e8 cf       	rjmp	.-48     	; 0x9cc <main+0x54>

000009fc <init_UART>:
#include "start.h"
#include "avr/io.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
     9fc:	84 e0       	ldi	r24, 0x04	; 4
     9fe:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
     a02:	88 e0       	ldi	r24, 0x08	; 8
     a04:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
     a08:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x0D<<4);										//Set BSCALE to -3 for baud 115200
     a0c:	e0 ea       	ldi	r30, 0xA0	; 160
     a0e:	fa e0       	ldi	r31, 0x0A	; 10
     a10:	87 81       	ldd	r24, Z+7	; 0x07
     a12:	80 6d       	ori	r24, 0xD0	; 208
     a14:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x83);										//Set BSEL to 131 for baud 115200
     a16:	86 81       	ldd	r24, Z+6	; 0x06
     a18:	83 68       	ori	r24, 0x83	; 131
     a1a:	86 83       	std	Z+6, r24	; 0x06
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
     a1c:	85 81       	ldd	r24, Z+5	; 0x05
     a1e:	83 60       	ori	r24, 0x03	; 3
     a20:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
     a22:	84 81       	ldd	r24, Z+4	; 0x04
     a24:	88 61       	ori	r24, 0x18	; 24
     a26:	84 83       	std	Z+4, r24	; 0x04
     a28:	08 95       	ret

00000a2a <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
     a2a:	e0 e5       	ldi	r30, 0x50	; 80
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	82 60       	ori	r24, 0x02	; 2
     a32:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
     a34:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
     a38:	81 ff       	sbrs	r24, 1
     a3a:	fc cf       	rjmp	.-8      	; 0xa34 <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
     a3c:	88 ed       	ldi	r24, 0xD8	; 216
     a3e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
     a40:	e0 e4       	ldi	r30, 0x40	; 64
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
     a48:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
     a4a:	11 82       	std	Z+1, r1	; 0x01
     a4c:	08 95       	ret

00000a4e <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
     a4e:	e0 e0       	ldi	r30, 0x00	; 0
     a50:	fa e0       	ldi	r31, 0x0A	; 10
     a52:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
     a54:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PER = 0x19;													//Set overflow frequency to 5kHz = ((F_CPU/256)/(PER))
     a5a:	89 e1       	ldi	r24, 0x19	; 25
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	86 a3       	std	Z+38, r24	; 0x26
     a60:	97 a3       	std	Z+39, r25	; 0x27
     a62:	08 95       	ret

00000a64 <init_IO>:
}

void init_IO(void)
{
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
     a64:	e1 e0       	ldi	r30, 0x01	; 1
     a66:	f6 e0       	ldi	r31, 0x06	; 6
     a68:	80 e8       	ldi	r24, 0x80	; 128
     a6a:	80 83       	st	Z, r24
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
     a6c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
     a70:	80 e1       	ldi	r24, 0x10	; 16
     a72:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	
	PORTA_DIRSET = PIN1_bm;												//Radar /enable pin
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	80 83       	st	Z, r24
	PORTA_OUTCLR = PIN1_bm;												//Enable radar
     a7a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     a7e:	08 95       	ret

00000a80 <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//Set PA0 as input for I channel
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7be602>
	PORTB_DIRCLR = PIN0_bm;												//Set PB0 as input for Q channel
     a86:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x7be622>
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b2 e0       	ldi	r27, 0x02	; 2
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	14 96       	adiw	r26, 0x04	; 4
     a92:	8c 93       	st	X, r24
     a94:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
     a96:	e0 e4       	ldi	r30, 0x40	; 64
     a98:	f2 e0       	ldi	r31, 0x02	; 2
     a9a:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
     a9c:	12 96       	adiw	r26, 0x02	; 2
     a9e:	8c 91       	ld	r24, X
     aa0:	12 97       	sbiw	r26, 0x02	; 2
     aa2:	12 96       	adiw	r26, 0x02	; 2
     aa4:	8c 93       	st	X, r24
     aa6:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8c 91       	ld	r24, X
     ab0:	12 97       	sbiw	r26, 0x02	; 2
     ab2:	80 61       	ori	r24, 0x10	; 16
     ab4:	12 96       	adiw	r26, 0x02	; 2
     ab6:	8c 93       	st	X, r24
     ab8:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	80 61       	ori	r24, 0x10	; 16
     abe:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 single ended input
     ac0:	90 96       	adiw	r26, 0x20	; 32
     ac2:	8c 91       	ld	r24, X
     ac4:	90 97       	sbiw	r26, 0x20	; 32
     ac6:	81 60       	ori	r24, 0x01	; 1
     ac8:	90 96       	adiw	r26, 0x20	; 32
     aca:	8c 93       	st	X, r24
     acc:	90 97       	sbiw	r26, 0x20	; 32
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 single ended input
     ace:	80 a1       	ldd	r24, Z+32	; 0x20
     ad0:	81 60       	ori	r24, 0x01	; 1
     ad2:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
     ad4:	91 96       	adiw	r26, 0x21	; 33
     ad6:	8c 91       	ld	r24, X
     ad8:	91 97       	sbiw	r26, 0x21	; 33
     ada:	87 60       	ori	r24, 0x07	; 7
     adc:	91 96       	adiw	r26, 0x21	; 33
     ade:	8c 93       	st	X, r24
     ae0:	91 97       	sbiw	r26, 0x21	; 33
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
     ae2:	81 a1       	ldd	r24, Z+33	; 0x21
     ae4:	87 60       	ori	r24, 0x07	; 7
     ae6:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCA CH0 to pin A0 as input for I channel
     ae8:	91 96       	adiw	r26, 0x21	; 33
     aea:	1c 92       	st	X, r1
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCB CH0 to pin B0 as input for Q channel
     aec:	11 a2       	std	Z+33, r1	; 0x21
     aee:	08 95       	ret

00000af0 <init_DAC>:
}

void init_DAC(void)
{
	DACB.CTRLC = DAC_REFSEL_INT1V_gc;									//set DAC reference to internal 1V
     af0:	e0 e2       	ldi	r30, 0x20	; 32
     af2:	f3 e0       	ldi	r31, 0x03	; 3
     af4:	12 82       	std	Z+2, r1	; 0x02
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;									//set DAC output to channel 0
     af6:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;							//Enable both DAC channels
     af8:	85 e0       	ldi	r24, 0x05	; 5
     afa:	80 83       	st	Z, r24
     afc:	08 95       	ret

00000afe <__subsf3>:
     afe:	50 58       	subi	r21, 0x80	; 128

00000b00 <__addsf3>:
     b00:	bb 27       	eor	r27, r27
     b02:	aa 27       	eor	r26, r26
     b04:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3x>
     b08:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
     b0c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_pscA>
     b10:	38 f0       	brcs	.+14     	; 0xb20 <__addsf3+0x20>
     b12:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fp_pscB>
     b16:	20 f0       	brcs	.+8      	; 0xb20 <__addsf3+0x20>
     b18:	39 f4       	brne	.+14     	; 0xb28 <__addsf3+0x28>
     b1a:	9f 3f       	cpi	r25, 0xFF	; 255
     b1c:	19 f4       	brne	.+6      	; 0xb24 <__addsf3+0x24>
     b1e:	26 f4       	brtc	.+8      	; 0xb28 <__addsf3+0x28>
     b20:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_nan>
     b24:	0e f4       	brtc	.+2      	; 0xb28 <__addsf3+0x28>
     b26:	e0 95       	com	r30
     b28:	e7 fb       	bst	r30, 7
     b2a:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_inf>

00000b2e <__addsf3x>:
     b2e:	e9 2f       	mov	r30, r25
     b30:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_split3>
     b34:	58 f3       	brcs	.-42     	; 0xb0c <__addsf3+0xc>
     b36:	ba 17       	cp	r27, r26
     b38:	62 07       	cpc	r22, r18
     b3a:	73 07       	cpc	r23, r19
     b3c:	84 07       	cpc	r24, r20
     b3e:	95 07       	cpc	r25, r21
     b40:	20 f0       	brcs	.+8      	; 0xb4a <__addsf3x+0x1c>
     b42:	79 f4       	brne	.+30     	; 0xb62 <__addsf3x+0x34>
     b44:	a6 f5       	brtc	.+104    	; 0xbae <__addsf3x+0x80>
     b46:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_zero>
     b4a:	0e f4       	brtc	.+2      	; 0xb4e <__addsf3x+0x20>
     b4c:	e0 95       	com	r30
     b4e:	0b 2e       	mov	r0, r27
     b50:	ba 2f       	mov	r27, r26
     b52:	a0 2d       	mov	r26, r0
     b54:	0b 01       	movw	r0, r22
     b56:	b9 01       	movw	r22, r18
     b58:	90 01       	movw	r18, r0
     b5a:	0c 01       	movw	r0, r24
     b5c:	ca 01       	movw	r24, r20
     b5e:	a0 01       	movw	r20, r0
     b60:	11 24       	eor	r1, r1
     b62:	ff 27       	eor	r31, r31
     b64:	59 1b       	sub	r21, r25
     b66:	99 f0       	breq	.+38     	; 0xb8e <__addsf3x+0x60>
     b68:	59 3f       	cpi	r21, 0xF9	; 249
     b6a:	50 f4       	brcc	.+20     	; 0xb80 <__addsf3x+0x52>
     b6c:	50 3e       	cpi	r21, 0xE0	; 224
     b6e:	68 f1       	brcs	.+90     	; 0xbca <__addsf3x+0x9c>
     b70:	1a 16       	cp	r1, r26
     b72:	f0 40       	sbci	r31, 0x00	; 0
     b74:	a2 2f       	mov	r26, r18
     b76:	23 2f       	mov	r18, r19
     b78:	34 2f       	mov	r19, r20
     b7a:	44 27       	eor	r20, r20
     b7c:	58 5f       	subi	r21, 0xF8	; 248
     b7e:	f3 cf       	rjmp	.-26     	; 0xb66 <__addsf3x+0x38>
     b80:	46 95       	lsr	r20
     b82:	37 95       	ror	r19
     b84:	27 95       	ror	r18
     b86:	a7 95       	ror	r26
     b88:	f0 40       	sbci	r31, 0x00	; 0
     b8a:	53 95       	inc	r21
     b8c:	c9 f7       	brne	.-14     	; 0xb80 <__addsf3x+0x52>
     b8e:	7e f4       	brtc	.+30     	; 0xbae <__addsf3x+0x80>
     b90:	1f 16       	cp	r1, r31
     b92:	ba 0b       	sbc	r27, r26
     b94:	62 0b       	sbc	r22, r18
     b96:	73 0b       	sbc	r23, r19
     b98:	84 0b       	sbc	r24, r20
     b9a:	ba f0       	brmi	.+46     	; 0xbca <__addsf3x+0x9c>
     b9c:	91 50       	subi	r25, 0x01	; 1
     b9e:	a1 f0       	breq	.+40     	; 0xbc8 <__addsf3x+0x9a>
     ba0:	ff 0f       	add	r31, r31
     ba2:	bb 1f       	adc	r27, r27
     ba4:	66 1f       	adc	r22, r22
     ba6:	77 1f       	adc	r23, r23
     ba8:	88 1f       	adc	r24, r24
     baa:	c2 f7       	brpl	.-16     	; 0xb9c <__addsf3x+0x6e>
     bac:	0e c0       	rjmp	.+28     	; 0xbca <__addsf3x+0x9c>
     bae:	ba 0f       	add	r27, r26
     bb0:	62 1f       	adc	r22, r18
     bb2:	73 1f       	adc	r23, r19
     bb4:	84 1f       	adc	r24, r20
     bb6:	48 f4       	brcc	.+18     	; 0xbca <__addsf3x+0x9c>
     bb8:	87 95       	ror	r24
     bba:	77 95       	ror	r23
     bbc:	67 95       	ror	r22
     bbe:	b7 95       	ror	r27
     bc0:	f7 95       	ror	r31
     bc2:	9e 3f       	cpi	r25, 0xFE	; 254
     bc4:	08 f0       	brcs	.+2      	; 0xbc8 <__addsf3x+0x9a>
     bc6:	b0 cf       	rjmp	.-160    	; 0xb28 <__addsf3+0x28>
     bc8:	93 95       	inc	r25
     bca:	88 0f       	add	r24, r24
     bcc:	08 f0       	brcs	.+2      	; 0xbd0 <__addsf3x+0xa2>
     bce:	99 27       	eor	r25, r25
     bd0:	ee 0f       	add	r30, r30
     bd2:	97 95       	ror	r25
     bd4:	87 95       	ror	r24
     bd6:	08 95       	ret

00000bd8 <cos>:
     bd8:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_rempio2>
     bdc:	e3 95       	inc	r30
     bde:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__fp_sinus>

00000be2 <__floatunsisf>:
     be2:	e8 94       	clt
     be4:	09 c0       	rjmp	.+18     	; 0xbf8 <__floatsisf+0x12>

00000be6 <__floatsisf>:
     be6:	97 fb       	bst	r25, 7
     be8:	3e f4       	brtc	.+14     	; 0xbf8 <__floatsisf+0x12>
     bea:	90 95       	com	r25
     bec:	80 95       	com	r24
     bee:	70 95       	com	r23
     bf0:	61 95       	neg	r22
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	8f 4f       	sbci	r24, 0xFF	; 255
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	99 23       	and	r25, r25
     bfa:	a9 f0       	breq	.+42     	; 0xc26 <__floatsisf+0x40>
     bfc:	f9 2f       	mov	r31, r25
     bfe:	96 e9       	ldi	r25, 0x96	; 150
     c00:	bb 27       	eor	r27, r27
     c02:	93 95       	inc	r25
     c04:	f6 95       	lsr	r31
     c06:	87 95       	ror	r24
     c08:	77 95       	ror	r23
     c0a:	67 95       	ror	r22
     c0c:	b7 95       	ror	r27
     c0e:	f1 11       	cpse	r31, r1
     c10:	f8 cf       	rjmp	.-16     	; 0xc02 <__floatsisf+0x1c>
     c12:	fa f4       	brpl	.+62     	; 0xc52 <__floatsisf+0x6c>
     c14:	bb 0f       	add	r27, r27
     c16:	11 f4       	brne	.+4      	; 0xc1c <__floatsisf+0x36>
     c18:	60 ff       	sbrs	r22, 0
     c1a:	1b c0       	rjmp	.+54     	; 0xc52 <__floatsisf+0x6c>
     c1c:	6f 5f       	subi	r22, 0xFF	; 255
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	8f 4f       	sbci	r24, 0xFF	; 255
     c22:	9f 4f       	sbci	r25, 0xFF	; 255
     c24:	16 c0       	rjmp	.+44     	; 0xc52 <__floatsisf+0x6c>
     c26:	88 23       	and	r24, r24
     c28:	11 f0       	breq	.+4      	; 0xc2e <__floatsisf+0x48>
     c2a:	96 e9       	ldi	r25, 0x96	; 150
     c2c:	11 c0       	rjmp	.+34     	; 0xc50 <__floatsisf+0x6a>
     c2e:	77 23       	and	r23, r23
     c30:	21 f0       	breq	.+8      	; 0xc3a <__floatsisf+0x54>
     c32:	9e e8       	ldi	r25, 0x8E	; 142
     c34:	87 2f       	mov	r24, r23
     c36:	76 2f       	mov	r23, r22
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__floatsisf+0x5e>
     c3a:	66 23       	and	r22, r22
     c3c:	71 f0       	breq	.+28     	; 0xc5a <__floatsisf+0x74>
     c3e:	96 e8       	ldi	r25, 0x86	; 134
     c40:	86 2f       	mov	r24, r22
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	2a f0       	brmi	.+10     	; 0xc52 <__floatsisf+0x6c>
     c48:	9a 95       	dec	r25
     c4a:	66 0f       	add	r22, r22
     c4c:	77 1f       	adc	r23, r23
     c4e:	88 1f       	adc	r24, r24
     c50:	da f7       	brpl	.-10     	; 0xc48 <__floatsisf+0x62>
     c52:	88 0f       	add	r24, r24
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	97 f9       	bld	r25, 7
     c5a:	08 95       	ret

00000c5c <__fp_inf>:
     c5c:	97 f9       	bld	r25, 7
     c5e:	9f 67       	ori	r25, 0x7F	; 127
     c60:	80 e8       	ldi	r24, 0x80	; 128
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	08 95       	ret

00000c68 <__fp_nan>:
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	80 ec       	ldi	r24, 0xC0	; 192
     c6c:	08 95       	ret

00000c6e <__fp_pscA>:
     c6e:	00 24       	eor	r0, r0
     c70:	0a 94       	dec	r0
     c72:	16 16       	cp	r1, r22
     c74:	17 06       	cpc	r1, r23
     c76:	18 06       	cpc	r1, r24
     c78:	09 06       	cpc	r0, r25
     c7a:	08 95       	ret

00000c7c <__fp_pscB>:
     c7c:	00 24       	eor	r0, r0
     c7e:	0a 94       	dec	r0
     c80:	12 16       	cp	r1, r18
     c82:	13 06       	cpc	r1, r19
     c84:	14 06       	cpc	r1, r20
     c86:	05 06       	cpc	r0, r21
     c88:	08 95       	ret
     c8a:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_nan>

00000c8e <__fp_rempio2>:
     c8e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_splitA>
     c92:	d8 f3       	brcs	.-10     	; 0xc8a <__fp_pscB+0xe>
     c94:	e8 94       	clt
     c96:	e0 e0       	ldi	r30, 0x00	; 0
     c98:	bb 27       	eor	r27, r27
     c9a:	9f 57       	subi	r25, 0x7F	; 127
     c9c:	f0 f0       	brcs	.+60     	; 0xcda <__fp_rempio2+0x4c>
     c9e:	2a ed       	ldi	r18, 0xDA	; 218
     ca0:	3f e0       	ldi	r19, 0x0F	; 15
     ca2:	49 ec       	ldi	r20, 0xC9	; 201
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <__fp_rempio2+0x24>
     ca6:	ee 0f       	add	r30, r30
     ca8:	bb 0f       	add	r27, r27
     caa:	66 1f       	adc	r22, r22
     cac:	77 1f       	adc	r23, r23
     cae:	88 1f       	adc	r24, r24
     cb0:	28 f0       	brcs	.+10     	; 0xcbc <__fp_rempio2+0x2e>
     cb2:	b2 3a       	cpi	r27, 0xA2	; 162
     cb4:	62 07       	cpc	r22, r18
     cb6:	73 07       	cpc	r23, r19
     cb8:	84 07       	cpc	r24, r20
     cba:	28 f0       	brcs	.+10     	; 0xcc6 <__fp_rempio2+0x38>
     cbc:	b2 5a       	subi	r27, 0xA2	; 162
     cbe:	62 0b       	sbc	r22, r18
     cc0:	73 0b       	sbc	r23, r19
     cc2:	84 0b       	sbc	r24, r20
     cc4:	e3 95       	inc	r30
     cc6:	9a 95       	dec	r25
     cc8:	72 f7       	brpl	.-36     	; 0xca6 <__fp_rempio2+0x18>
     cca:	80 38       	cpi	r24, 0x80	; 128
     ccc:	30 f4       	brcc	.+12     	; 0xcda <__fp_rempio2+0x4c>
     cce:	9a 95       	dec	r25
     cd0:	bb 0f       	add	r27, r27
     cd2:	66 1f       	adc	r22, r22
     cd4:	77 1f       	adc	r23, r23
     cd6:	88 1f       	adc	r24, r24
     cd8:	d2 f7       	brpl	.-12     	; 0xcce <__fp_rempio2+0x40>
     cda:	90 48       	sbci	r25, 0x80	; 128
     cdc:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__fp_mpack_finite>

00000ce0 <__fp_round>:
     ce0:	09 2e       	mov	r0, r25
     ce2:	03 94       	inc	r0
     ce4:	00 0c       	add	r0, r0
     ce6:	11 f4       	brne	.+4      	; 0xcec <__fp_round+0xc>
     ce8:	88 23       	and	r24, r24
     cea:	52 f0       	brmi	.+20     	; 0xd00 <__fp_round+0x20>
     cec:	bb 0f       	add	r27, r27
     cee:	40 f4       	brcc	.+16     	; 0xd00 <__fp_round+0x20>
     cf0:	bf 2b       	or	r27, r31
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_round+0x18>
     cf4:	60 ff       	sbrs	r22, 0
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__fp_round+0x20>
     cf8:	6f 5f       	subi	r22, 0xFF	; 255
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	8f 4f       	sbci	r24, 0xFF	; 255
     cfe:	9f 4f       	sbci	r25, 0xFF	; 255
     d00:	08 95       	ret

00000d02 <__fp_sinus>:
     d02:	ef 93       	push	r30
     d04:	e0 ff       	sbrs	r30, 0
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <__fp_sinus+0x14>
     d08:	a2 ea       	ldi	r26, 0xA2	; 162
     d0a:	2a ed       	ldi	r18, 0xDA	; 218
     d0c:	3f e0       	ldi	r19, 0x0F	; 15
     d0e:	49 ec       	ldi	r20, 0xC9	; 201
     d10:	5f eb       	ldi	r21, 0xBF	; 191
     d12:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3x>
     d16:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_round>
     d1a:	0f 90       	pop	r0
     d1c:	03 94       	inc	r0
     d1e:	01 fc       	sbrc	r0, 1
     d20:	90 58       	subi	r25, 0x80	; 128
     d22:	ec ef       	ldi	r30, 0xFC	; 252
     d24:	f1 e0       	ldi	r31, 0x01	; 1
     d26:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_powsodd>

00000d2a <__fp_split3>:
     d2a:	57 fd       	sbrc	r21, 7
     d2c:	90 58       	subi	r25, 0x80	; 128
     d2e:	44 0f       	add	r20, r20
     d30:	55 1f       	adc	r21, r21
     d32:	59 f0       	breq	.+22     	; 0xd4a <__fp_splitA+0x10>
     d34:	5f 3f       	cpi	r21, 0xFF	; 255
     d36:	71 f0       	breq	.+28     	; 0xd54 <__fp_splitA+0x1a>
     d38:	47 95       	ror	r20

00000d3a <__fp_splitA>:
     d3a:	88 0f       	add	r24, r24
     d3c:	97 fb       	bst	r25, 7
     d3e:	99 1f       	adc	r25, r25
     d40:	61 f0       	breq	.+24     	; 0xd5a <__fp_splitA+0x20>
     d42:	9f 3f       	cpi	r25, 0xFF	; 255
     d44:	79 f0       	breq	.+30     	; 0xd64 <__fp_splitA+0x2a>
     d46:	87 95       	ror	r24
     d48:	08 95       	ret
     d4a:	12 16       	cp	r1, r18
     d4c:	13 06       	cpc	r1, r19
     d4e:	14 06       	cpc	r1, r20
     d50:	55 1f       	adc	r21, r21
     d52:	f2 cf       	rjmp	.-28     	; 0xd38 <__fp_split3+0xe>
     d54:	46 95       	lsr	r20
     d56:	f1 df       	rcall	.-30     	; 0xd3a <__fp_splitA>
     d58:	08 c0       	rjmp	.+16     	; 0xd6a <__fp_splitA+0x30>
     d5a:	16 16       	cp	r1, r22
     d5c:	17 06       	cpc	r1, r23
     d5e:	18 06       	cpc	r1, r24
     d60:	99 1f       	adc	r25, r25
     d62:	f1 cf       	rjmp	.-30     	; 0xd46 <__fp_splitA+0xc>
     d64:	86 95       	lsr	r24
     d66:	71 05       	cpc	r23, r1
     d68:	61 05       	cpc	r22, r1
     d6a:	08 94       	sec
     d6c:	08 95       	ret

00000d6e <__fp_zero>:
     d6e:	e8 94       	clt

00000d70 <__fp_szero>:
     d70:	bb 27       	eor	r27, r27
     d72:	66 27       	eor	r22, r22
     d74:	77 27       	eor	r23, r23
     d76:	cb 01       	movw	r24, r22
     d78:	97 f9       	bld	r25, 7
     d7a:	08 95       	ret

00000d7c <__gesf2>:
     d7c:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_cmp>
     d80:	08 f4       	brcc	.+2      	; 0xd84 <__gesf2+0x8>
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	08 95       	ret

00000d86 <__mulsf3>:
     d86:	0e 94 d6 06 	call	0xdac	; 0xdac <__mulsf3x>
     d8a:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
     d8e:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_pscA>
     d92:	38 f0       	brcs	.+14     	; 0xda2 <__mulsf3+0x1c>
     d94:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fp_pscB>
     d98:	20 f0       	brcs	.+8      	; 0xda2 <__mulsf3+0x1c>
     d9a:	95 23       	and	r25, r21
     d9c:	11 f0       	breq	.+4      	; 0xda2 <__mulsf3+0x1c>
     d9e:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_inf>
     da2:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_nan>
     da6:	11 24       	eor	r1, r1
     da8:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_szero>

00000dac <__mulsf3x>:
     dac:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_split3>
     db0:	70 f3       	brcs	.-36     	; 0xd8e <__mulsf3+0x8>

00000db2 <__mulsf3_pse>:
     db2:	95 9f       	mul	r25, r21
     db4:	c1 f3       	breq	.-16     	; 0xda6 <__mulsf3+0x20>
     db6:	95 0f       	add	r25, r21
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	55 1f       	adc	r21, r21
     dbc:	62 9f       	mul	r22, r18
     dbe:	f0 01       	movw	r30, r0
     dc0:	72 9f       	mul	r23, r18
     dc2:	bb 27       	eor	r27, r27
     dc4:	f0 0d       	add	r31, r0
     dc6:	b1 1d       	adc	r27, r1
     dc8:	63 9f       	mul	r22, r19
     dca:	aa 27       	eor	r26, r26
     dcc:	f0 0d       	add	r31, r0
     dce:	b1 1d       	adc	r27, r1
     dd0:	aa 1f       	adc	r26, r26
     dd2:	64 9f       	mul	r22, r20
     dd4:	66 27       	eor	r22, r22
     dd6:	b0 0d       	add	r27, r0
     dd8:	a1 1d       	adc	r26, r1
     dda:	66 1f       	adc	r22, r22
     ddc:	82 9f       	mul	r24, r18
     dde:	22 27       	eor	r18, r18
     de0:	b0 0d       	add	r27, r0
     de2:	a1 1d       	adc	r26, r1
     de4:	62 1f       	adc	r22, r18
     de6:	73 9f       	mul	r23, r19
     de8:	b0 0d       	add	r27, r0
     dea:	a1 1d       	adc	r26, r1
     dec:	62 1f       	adc	r22, r18
     dee:	83 9f       	mul	r24, r19
     df0:	a0 0d       	add	r26, r0
     df2:	61 1d       	adc	r22, r1
     df4:	22 1f       	adc	r18, r18
     df6:	74 9f       	mul	r23, r20
     df8:	33 27       	eor	r19, r19
     dfa:	a0 0d       	add	r26, r0
     dfc:	61 1d       	adc	r22, r1
     dfe:	23 1f       	adc	r18, r19
     e00:	84 9f       	mul	r24, r20
     e02:	60 0d       	add	r22, r0
     e04:	21 1d       	adc	r18, r1
     e06:	82 2f       	mov	r24, r18
     e08:	76 2f       	mov	r23, r22
     e0a:	6a 2f       	mov	r22, r26
     e0c:	11 24       	eor	r1, r1
     e0e:	9f 57       	subi	r25, 0x7F	; 127
     e10:	50 40       	sbci	r21, 0x00	; 0
     e12:	9a f0       	brmi	.+38     	; 0xe3a <__mulsf3_pse+0x88>
     e14:	f1 f0       	breq	.+60     	; 0xe52 <__mulsf3_pse+0xa0>
     e16:	88 23       	and	r24, r24
     e18:	4a f0       	brmi	.+18     	; 0xe2c <__mulsf3_pse+0x7a>
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	bb 1f       	adc	r27, r27
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	88 1f       	adc	r24, r24
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	50 40       	sbci	r21, 0x00	; 0
     e2a:	a9 f7       	brne	.-22     	; 0xe16 <__mulsf3_pse+0x64>
     e2c:	9e 3f       	cpi	r25, 0xFE	; 254
     e2e:	51 05       	cpc	r21, r1
     e30:	80 f0       	brcs	.+32     	; 0xe52 <__mulsf3_pse+0xa0>
     e32:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_inf>
     e36:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_szero>
     e3a:	5f 3f       	cpi	r21, 0xFF	; 255
     e3c:	e4 f3       	brlt	.-8      	; 0xe36 <__mulsf3_pse+0x84>
     e3e:	98 3e       	cpi	r25, 0xE8	; 232
     e40:	d4 f3       	brlt	.-12     	; 0xe36 <__mulsf3_pse+0x84>
     e42:	86 95       	lsr	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b7 95       	ror	r27
     e4a:	f7 95       	ror	r31
     e4c:	e7 95       	ror	r30
     e4e:	9f 5f       	subi	r25, 0xFF	; 255
     e50:	c1 f7       	brne	.-16     	; 0xe42 <__mulsf3_pse+0x90>
     e52:	fe 2b       	or	r31, r30
     e54:	88 0f       	add	r24, r24
     e56:	91 1d       	adc	r25, r1
     e58:	96 95       	lsr	r25
     e5a:	87 95       	ror	r24
     e5c:	97 f9       	bld	r25, 7
     e5e:	08 95       	ret

00000e60 <sin>:
     e60:	9f 93       	push	r25
     e62:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_rempio2>
     e66:	0f 90       	pop	r0
     e68:	07 fc       	sbrc	r0, 7
     e6a:	ee 5f       	subi	r30, 0xFE	; 254
     e6c:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__fp_sinus>

00000e70 <__fp_cmp>:
     e70:	99 0f       	add	r25, r25
     e72:	00 08       	sbc	r0, r0
     e74:	55 0f       	add	r21, r21
     e76:	aa 0b       	sbc	r26, r26
     e78:	e0 e8       	ldi	r30, 0x80	; 128
     e7a:	fe ef       	ldi	r31, 0xFE	; 254
     e7c:	16 16       	cp	r1, r22
     e7e:	17 06       	cpc	r1, r23
     e80:	e8 07       	cpc	r30, r24
     e82:	f9 07       	cpc	r31, r25
     e84:	c0 f0       	brcs	.+48     	; 0xeb6 <__fp_cmp+0x46>
     e86:	12 16       	cp	r1, r18
     e88:	13 06       	cpc	r1, r19
     e8a:	e4 07       	cpc	r30, r20
     e8c:	f5 07       	cpc	r31, r21
     e8e:	98 f0       	brcs	.+38     	; 0xeb6 <__fp_cmp+0x46>
     e90:	62 1b       	sub	r22, r18
     e92:	73 0b       	sbc	r23, r19
     e94:	84 0b       	sbc	r24, r20
     e96:	95 0b       	sbc	r25, r21
     e98:	39 f4       	brne	.+14     	; 0xea8 <__fp_cmp+0x38>
     e9a:	0a 26       	eor	r0, r26
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <__fp_cmp+0x46>
     e9e:	23 2b       	or	r18, r19
     ea0:	24 2b       	or	r18, r20
     ea2:	25 2b       	or	r18, r21
     ea4:	21 f4       	brne	.+8      	; 0xeae <__fp_cmp+0x3e>
     ea6:	08 95       	ret
     ea8:	0a 26       	eor	r0, r26
     eaa:	09 f4       	brne	.+2      	; 0xeae <__fp_cmp+0x3e>
     eac:	a1 40       	sbci	r26, 0x01	; 1
     eae:	a6 95       	lsr	r26
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	81 1d       	adc	r24, r1
     eb4:	81 1d       	adc	r24, r1
     eb6:	08 95       	ret

00000eb8 <__fp_mpack>:
     eb8:	9f 3f       	cpi	r25, 0xFF	; 255
     eba:	31 f0       	breq	.+12     	; 0xec8 <__fp_mpack_finite+0xc>

00000ebc <__fp_mpack_finite>:
     ebc:	91 50       	subi	r25, 0x01	; 1
     ebe:	20 f4       	brcc	.+8      	; 0xec8 <__fp_mpack_finite+0xc>
     ec0:	87 95       	ror	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b7 95       	ror	r27
     ec8:	88 0f       	add	r24, r24
     eca:	91 1d       	adc	r25, r1
     ecc:	96 95       	lsr	r25
     ece:	87 95       	ror	r24
     ed0:	97 f9       	bld	r25, 7
     ed2:	08 95       	ret

00000ed4 <__fp_powsodd>:
     ed4:	9f 93       	push	r25
     ed6:	8f 93       	push	r24
     ed8:	7f 93       	push	r23
     eda:	6f 93       	push	r22
     edc:	ff 93       	push	r31
     ede:	ef 93       	push	r30
     ee0:	9b 01       	movw	r18, r22
     ee2:	ac 01       	movw	r20, r24
     ee4:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulsf3>
     ee8:	ef 91       	pop	r30
     eea:	ff 91       	pop	r31
     eec:	0e 94 7e 07 	call	0xefc	; 0xefc <__fp_powser>
     ef0:	2f 91       	pop	r18
     ef2:	3f 91       	pop	r19
     ef4:	4f 91       	pop	r20
     ef6:	5f 91       	pop	r21
     ef8:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__mulsf3>

00000efc <__fp_powser>:
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	1f 93       	push	r17
     f02:	0f 93       	push	r16
     f04:	ff 92       	push	r15
     f06:	ef 92       	push	r14
     f08:	df 92       	push	r13
     f0a:	7b 01       	movw	r14, r22
     f0c:	8c 01       	movw	r16, r24
     f0e:	68 94       	set
     f10:	06 c0       	rjmp	.+12     	; 0xf1e <__fp_powser+0x22>
     f12:	da 2e       	mov	r13, r26
     f14:	ef 01       	movw	r28, r30
     f16:	0e 94 d6 06 	call	0xdac	; 0xdac <__mulsf3x>
     f1a:	fe 01       	movw	r30, r28
     f1c:	e8 94       	clt
     f1e:	a5 91       	lpm	r26, Z+
     f20:	25 91       	lpm	r18, Z+
     f22:	35 91       	lpm	r19, Z+
     f24:	45 91       	lpm	r20, Z+
     f26:	55 91       	lpm	r21, Z+
     f28:	a6 f3       	brts	.-24     	; 0xf12 <__fp_powser+0x16>
     f2a:	ef 01       	movw	r28, r30
     f2c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3x>
     f30:	fe 01       	movw	r30, r28
     f32:	97 01       	movw	r18, r14
     f34:	a8 01       	movw	r20, r16
     f36:	da 94       	dec	r13
     f38:	69 f7       	brne	.-38     	; 0xf14 <__fp_powser+0x18>
     f3a:	df 90       	pop	r13
     f3c:	ef 90       	pop	r14
     f3e:	ff 90       	pop	r15
     f40:	0f 91       	pop	r16
     f42:	1f 91       	pop	r17
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <malloc>:
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	91 05       	cpc	r25, r1
     f56:	10 f4       	brcc	.+4      	; 0xf5c <malloc+0x12>
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <__flp>
     f60:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <__flp+0x1>
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	a0 e0       	ldi	r26, 0x00	; 0
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	30 97       	sbiw	r30, 0x00	; 0
     f6e:	19 f1       	breq	.+70     	; 0xfb6 <malloc+0x6c>
     f70:	40 81       	ld	r20, Z
     f72:	51 81       	ldd	r21, Z+1	; 0x01
     f74:	02 81       	ldd	r16, Z+2	; 0x02
     f76:	13 81       	ldd	r17, Z+3	; 0x03
     f78:	48 17       	cp	r20, r24
     f7a:	59 07       	cpc	r21, r25
     f7c:	c8 f0       	brcs	.+50     	; 0xfb0 <malloc+0x66>
     f7e:	84 17       	cp	r24, r20
     f80:	95 07       	cpc	r25, r21
     f82:	69 f4       	brne	.+26     	; 0xf9e <malloc+0x54>
     f84:	10 97       	sbiw	r26, 0x00	; 0
     f86:	31 f0       	breq	.+12     	; 0xf94 <malloc+0x4a>
     f88:	12 96       	adiw	r26, 0x02	; 2
     f8a:	0c 93       	st	X, r16
     f8c:	12 97       	sbiw	r26, 0x02	; 2
     f8e:	13 96       	adiw	r26, 0x03	; 3
     f90:	1c 93       	st	X, r17
     f92:	27 c0       	rjmp	.+78     	; 0xfe2 <malloc+0x98>
     f94:	00 93 12 20 	sts	0x2012, r16	; 0x802012 <__flp>
     f98:	10 93 13 20 	sts	0x2013, r17	; 0x802013 <__flp+0x1>
     f9c:	22 c0       	rjmp	.+68     	; 0xfe2 <malloc+0x98>
     f9e:	21 15       	cp	r18, r1
     fa0:	31 05       	cpc	r19, r1
     fa2:	19 f0       	breq	.+6      	; 0xfaa <malloc+0x60>
     fa4:	42 17       	cp	r20, r18
     fa6:	53 07       	cpc	r21, r19
     fa8:	18 f4       	brcc	.+6      	; 0xfb0 <malloc+0x66>
     faa:	9a 01       	movw	r18, r20
     fac:	bd 01       	movw	r22, r26
     fae:	ef 01       	movw	r28, r30
     fb0:	df 01       	movw	r26, r30
     fb2:	f8 01       	movw	r30, r16
     fb4:	db cf       	rjmp	.-74     	; 0xf6c <malloc+0x22>
     fb6:	21 15       	cp	r18, r1
     fb8:	31 05       	cpc	r19, r1
     fba:	f9 f0       	breq	.+62     	; 0xffa <malloc+0xb0>
     fbc:	28 1b       	sub	r18, r24
     fbe:	39 0b       	sbc	r19, r25
     fc0:	24 30       	cpi	r18, 0x04	; 4
     fc2:	31 05       	cpc	r19, r1
     fc4:	80 f4       	brcc	.+32     	; 0xfe6 <malloc+0x9c>
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	61 15       	cp	r22, r1
     fcc:	71 05       	cpc	r23, r1
     fce:	21 f0       	breq	.+8      	; 0xfd8 <malloc+0x8e>
     fd0:	fb 01       	movw	r30, r22
     fd2:	82 83       	std	Z+2, r24	; 0x02
     fd4:	93 83       	std	Z+3, r25	; 0x03
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <malloc+0x96>
     fd8:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__flp>
     fdc:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <__flp+0x1>
     fe0:	fe 01       	movw	r30, r28
     fe2:	32 96       	adiw	r30, 0x02	; 2
     fe4:	44 c0       	rjmp	.+136    	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
     fe6:	fe 01       	movw	r30, r28
     fe8:	e2 0f       	add	r30, r18
     fea:	f3 1f       	adc	r31, r19
     fec:	81 93       	st	Z+, r24
     fee:	91 93       	st	Z+, r25
     ff0:	22 50       	subi	r18, 0x02	; 2
     ff2:	31 09       	sbc	r19, r1
     ff4:	28 83       	st	Y, r18
     ff6:	39 83       	std	Y+1, r19	; 0x01
     ff8:	3a c0       	rjmp	.+116    	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
     ffa:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
     ffe:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    1002:	23 2b       	or	r18, r19
    1004:	41 f4       	brne	.+16     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1006:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    100a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    100e:	20 93 10 20 	sts	0x2010, r18	; 0x802010 <__brkval>
    1012:	30 93 11 20 	sts	0x2011, r19	; 0x802011 <__brkval+0x1>
    1016:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    101a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    101e:	21 15       	cp	r18, r1
    1020:	31 05       	cpc	r19, r1
    1022:	41 f4       	brne	.+16     	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
    1024:	2d b7       	in	r18, 0x3d	; 61
    1026:	3e b7       	in	r19, 0x3e	; 62
    1028:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    102c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1030:	24 1b       	sub	r18, r20
    1032:	35 0b       	sbc	r19, r21
    1034:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <__brkval>
    1038:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <__brkval+0x1>
    103c:	e2 17       	cp	r30, r18
    103e:	f3 07       	cpc	r31, r19
    1040:	a0 f4       	brcc	.+40     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1042:	2e 1b       	sub	r18, r30
    1044:	3f 0b       	sbc	r19, r31
    1046:	28 17       	cp	r18, r24
    1048:	39 07       	cpc	r19, r25
    104a:	78 f0       	brcs	.+30     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    104c:	ac 01       	movw	r20, r24
    104e:	4e 5f       	subi	r20, 0xFE	; 254
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	24 17       	cp	r18, r20
    1054:	35 07       	cpc	r19, r21
    1056:	48 f0       	brcs	.+18     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1058:	4e 0f       	add	r20, r30
    105a:	5f 1f       	adc	r21, r31
    105c:	40 93 10 20 	sts	0x2010, r20	; 0x802010 <__brkval>
    1060:	50 93 11 20 	sts	0x2011, r21	; 0x802011 <__brkval+0x1>
    1064:	81 93       	st	Z+, r24
    1066:	91 93       	st	Z+, r25
    1068:	02 c0       	rjmp	.+4      	; 0x106e <__EEPROM_REGION_LENGTH__+0x6e>
    106a:	e0 e0       	ldi	r30, 0x00	; 0
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	cf 01       	movw	r24, r30
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	08 95       	ret

0000107a <free>:
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	09 f4       	brne	.+2      	; 0x1084 <free+0xa>
    1082:	81 c0       	rjmp	.+258    	; 0x1186 <free+0x10c>
    1084:	fc 01       	movw	r30, r24
    1086:	32 97       	sbiw	r30, 0x02	; 2
    1088:	12 82       	std	Z+2, r1	; 0x02
    108a:	13 82       	std	Z+3, r1	; 0x03
    108c:	a0 91 12 20 	lds	r26, 0x2012	; 0x802012 <__flp>
    1090:	b0 91 13 20 	lds	r27, 0x2013	; 0x802013 <__flp+0x1>
    1094:	10 97       	sbiw	r26, 0x00	; 0
    1096:	81 f4       	brne	.+32     	; 0x10b8 <free+0x3e>
    1098:	20 81       	ld	r18, Z
    109a:	31 81       	ldd	r19, Z+1	; 0x01
    109c:	82 0f       	add	r24, r18
    109e:	93 1f       	adc	r25, r19
    10a0:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    10a4:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    10a8:	28 17       	cp	r18, r24
    10aa:	39 07       	cpc	r19, r25
    10ac:	51 f5       	brne	.+84     	; 0x1102 <free+0x88>
    10ae:	e0 93 10 20 	sts	0x2010, r30	; 0x802010 <__brkval>
    10b2:	f0 93 11 20 	sts	0x2011, r31	; 0x802011 <__brkval+0x1>
    10b6:	67 c0       	rjmp	.+206    	; 0x1186 <free+0x10c>
    10b8:	ed 01       	movw	r28, r26
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	ce 17       	cp	r28, r30
    10c0:	df 07       	cpc	r29, r31
    10c2:	40 f4       	brcc	.+16     	; 0x10d4 <free+0x5a>
    10c4:	4a 81       	ldd	r20, Y+2	; 0x02
    10c6:	5b 81       	ldd	r21, Y+3	; 0x03
    10c8:	9e 01       	movw	r18, r28
    10ca:	41 15       	cp	r20, r1
    10cc:	51 05       	cpc	r21, r1
    10ce:	f1 f0       	breq	.+60     	; 0x110c <free+0x92>
    10d0:	ea 01       	movw	r28, r20
    10d2:	f5 cf       	rjmp	.-22     	; 0x10be <free+0x44>
    10d4:	c2 83       	std	Z+2, r28	; 0x02
    10d6:	d3 83       	std	Z+3, r29	; 0x03
    10d8:	40 81       	ld	r20, Z
    10da:	51 81       	ldd	r21, Z+1	; 0x01
    10dc:	84 0f       	add	r24, r20
    10de:	95 1f       	adc	r25, r21
    10e0:	c8 17       	cp	r28, r24
    10e2:	d9 07       	cpc	r29, r25
    10e4:	59 f4       	brne	.+22     	; 0x10fc <free+0x82>
    10e6:	88 81       	ld	r24, Y
    10e8:	99 81       	ldd	r25, Y+1	; 0x01
    10ea:	84 0f       	add	r24, r20
    10ec:	95 1f       	adc	r25, r21
    10ee:	02 96       	adiw	r24, 0x02	; 2
    10f0:	80 83       	st	Z, r24
    10f2:	91 83       	std	Z+1, r25	; 0x01
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	9b 81       	ldd	r25, Y+3	; 0x03
    10f8:	82 83       	std	Z+2, r24	; 0x02
    10fa:	93 83       	std	Z+3, r25	; 0x03
    10fc:	21 15       	cp	r18, r1
    10fe:	31 05       	cpc	r19, r1
    1100:	29 f4       	brne	.+10     	; 0x110c <free+0x92>
    1102:	e0 93 12 20 	sts	0x2012, r30	; 0x802012 <__flp>
    1106:	f0 93 13 20 	sts	0x2013, r31	; 0x802013 <__flp+0x1>
    110a:	3d c0       	rjmp	.+122    	; 0x1186 <free+0x10c>
    110c:	e9 01       	movw	r28, r18
    110e:	ea 83       	std	Y+2, r30	; 0x02
    1110:	fb 83       	std	Y+3, r31	; 0x03
    1112:	49 91       	ld	r20, Y+
    1114:	59 91       	ld	r21, Y+
    1116:	c4 0f       	add	r28, r20
    1118:	d5 1f       	adc	r29, r21
    111a:	ec 17       	cp	r30, r28
    111c:	fd 07       	cpc	r31, r29
    111e:	61 f4       	brne	.+24     	; 0x1138 <free+0xbe>
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	84 0f       	add	r24, r20
    1126:	95 1f       	adc	r25, r21
    1128:	02 96       	adiw	r24, 0x02	; 2
    112a:	e9 01       	movw	r28, r18
    112c:	88 83       	st	Y, r24
    112e:	99 83       	std	Y+1, r25	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	8a 83       	std	Y+2, r24	; 0x02
    1136:	9b 83       	std	Y+3, r25	; 0x03
    1138:	e0 e0       	ldi	r30, 0x00	; 0
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	12 96       	adiw	r26, 0x02	; 2
    113e:	8d 91       	ld	r24, X+
    1140:	9c 91       	ld	r25, X
    1142:	13 97       	sbiw	r26, 0x03	; 3
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	19 f0       	breq	.+6      	; 0x114e <free+0xd4>
    1148:	fd 01       	movw	r30, r26
    114a:	dc 01       	movw	r26, r24
    114c:	f7 cf       	rjmp	.-18     	; 0x113c <free+0xc2>
    114e:	8d 91       	ld	r24, X+
    1150:	9c 91       	ld	r25, X
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	9d 01       	movw	r18, r26
    1156:	2e 5f       	subi	r18, 0xFE	; 254
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    1162:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	69 f4       	brne	.+26     	; 0x1186 <free+0x10c>
    116c:	30 97       	sbiw	r30, 0x00	; 0
    116e:	29 f4       	brne	.+10     	; 0x117a <free+0x100>
    1170:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <__flp>
    1174:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <__flp+0x1>
    1178:	02 c0       	rjmp	.+4      	; 0x117e <free+0x104>
    117a:	12 82       	std	Z+2, r1	; 0x02
    117c:	13 82       	std	Z+3, r1	; 0x03
    117e:	a0 93 10 20 	sts	0x2010, r26	; 0x802010 <__brkval>
    1182:	b0 93 11 20 	sts	0x2011, r27	; 0x802011 <__brkval+0x1>
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <_exit>:
    118c:	f8 94       	cli

0000118e <__stop_program>:
    118e:	ff cf       	rjmp	.-2      	; 0x118e <__stop_program>
