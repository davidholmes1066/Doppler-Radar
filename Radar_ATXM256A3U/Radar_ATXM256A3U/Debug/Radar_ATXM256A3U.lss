
Radar_ATXM256A3U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001108  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00001108  0000119c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00802006  00802006  000011a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b18  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000389a  00000000  00000000  00006e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000efa  00000000  00000000  0000a71e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  0000b618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032a3  00000000  00000000  0000bb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ac  00000000  00000000  0000ee0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000feb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__ctors_end>
       4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      10:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      14:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      18:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      1c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      20:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      24:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      28:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      30:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      34:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      38:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      3c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      44:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      4c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      50:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      58:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      5c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      60:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      68:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      6c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      70:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      7c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      80:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      84:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      90:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      94:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      9c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      bc:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_47>
      c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      fc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     100:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     104:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     108:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     10c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     110:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     114:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     118:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     11c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     120:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     124:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     128:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     12c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     130:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     134:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     138:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     13c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     140:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     144:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     148:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     14c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     150:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     154:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     158:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     15c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     160:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     164:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     168:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     16c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     170:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     174:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     178:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     17c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     180:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     184:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     188:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     18c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     190:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     194:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     198:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     19c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1bc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <__floatsisf+0x8>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df e5       	ldi	r29, 0x5F	; 95
     224:	de bf       	out	0x3e, r29	; 62
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0c bf       	out	0x3c, r16	; 60

0000022a <__do_clear_bss>:
     22a:	20 e2       	ldi	r18, 0x20	; 32
     22c:	a6 e0       	ldi	r26, 0x06	; 6
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	a4 31       	cpi	r26, 0x14	; 20
     236:	b2 07       	cpc	r27, r18
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>

0000023a <__do_copy_data>:
     23a:	10 e2       	ldi	r17, 0x20	; 32
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e2       	ldi	r27, 0x20	; 32
     240:	e8 e0       	ldi	r30, 0x08	; 8
     242:	f1 e1       	ldi	r31, 0x11	; 17
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0b bf       	out	0x3b, r16	; 59
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x14>
     24a:	07 90       	elpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	a6 30       	cpi	r26, 0x06	; 6
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0x10>
     254:	0e 94 81 04 	call	0x902	; 0x902 <main>
     258:	0c 94 82 08 	jmp	0x1104	; 0x1104 <_exit>

0000025c <__bad_interrupt>:
     25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000260 <avr_log2>:

    C.im = A.im * B;                                                    //Calculates complex part
    C.re = A.re * B;                                                    //Calculates real part

    return C;                                                           //Returns complex struct
}
     260:	ac 01       	movw	r20, r24
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	03 c0       	rjmp	.+6      	; 0x272 <avr_log2+0x12>
     26c:	22 0f       	add	r18, r18
     26e:	33 1f       	adc	r19, r19
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	24 17       	cp	r18, r20
     274:	35 07       	cpc	r19, r21
     276:	d0 f3       	brcs	.-12     	; 0x26c <avr_log2+0xc>
     278:	08 95       	ret

0000027a <cf_multiply>:
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	a8 97       	sbiw	r28, 0x28	; 40
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	29 8b       	std	Y+17, r18	; 0x11
     2a6:	3a 8b       	std	Y+18, r19	; 0x12
     2a8:	4b 8b       	std	Y+19, r20	; 0x13
     2aa:	5c 8b       	std	Y+20, r21	; 0x14
     2ac:	6d 8b       	std	Y+21, r22	; 0x15
     2ae:	7e 8b       	std	Y+22, r23	; 0x16
     2b0:	8f 8b       	std	Y+23, r24	; 0x17
     2b2:	98 8f       	std	Y+24, r25	; 0x18
     2b4:	a9 8e       	std	Y+25, r10	; 0x19
     2b6:	ba 8e       	std	Y+26, r11	; 0x1a
     2b8:	cb 8e       	std	Y+27, r12	; 0x1b
     2ba:	dc 8e       	std	Y+28, r13	; 0x1c
     2bc:	ed 8e       	std	Y+29, r14	; 0x1d
     2be:	fe 8e       	std	Y+30, r15	; 0x1e
     2c0:	0f 8f       	std	Y+31, r16	; 0x1f
     2c2:	18 a3       	std	Y+32, r17	; 0x20
     2c4:	c9 88       	ldd	r12, Y+17	; 0x11
     2c6:	da 88       	ldd	r13, Y+18	; 0x12
     2c8:	eb 88       	ldd	r14, Y+19	; 0x13
     2ca:	fc 88       	ldd	r15, Y+20	; 0x14
     2cc:	4d 8c       	ldd	r4, Y+29	; 0x1d
     2ce:	5e 8c       	ldd	r5, Y+30	; 0x1e
     2d0:	6f 8c       	ldd	r6, Y+31	; 0x1f
     2d2:	78 a0       	ldd	r7, Y+32	; 0x20
     2d4:	a3 01       	movw	r20, r6
     2d6:	92 01       	movw	r18, r4
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     2e0:	6d a3       	std	Y+37, r22	; 0x25
     2e2:	7e a3       	std	Y+38, r23	; 0x26
     2e4:	8f a3       	std	Y+39, r24	; 0x27
     2e6:	98 a7       	std	Y+40, r25	; 0x28
     2e8:	8d 89       	ldd	r24, Y+21	; 0x15
     2ea:	9e 89       	ldd	r25, Y+22	; 0x16
     2ec:	af 89       	ldd	r26, Y+23	; 0x17
     2ee:	b8 8d       	ldd	r27, Y+24	; 0x18
     2f0:	89 a3       	std	Y+33, r24	; 0x21
     2f2:	9a a3       	std	Y+34, r25	; 0x22
     2f4:	ab a3       	std	Y+35, r26	; 0x23
     2f6:	bc a3       	std	Y+36, r27	; 0x24
     2f8:	89 8c       	ldd	r8, Y+25	; 0x19
     2fa:	9a 8c       	ldd	r9, Y+26	; 0x1a
     2fc:	ab 8c       	ldd	r10, Y+27	; 0x1b
     2fe:	bc 8c       	ldd	r11, Y+28	; 0x1c
     300:	a5 01       	movw	r20, r10
     302:	94 01       	movw	r18, r8
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     30c:	9b 01       	movw	r18, r22
     30e:	ac 01       	movw	r20, r24
     310:	6d a1       	ldd	r22, Y+37	; 0x25
     312:	7e a1       	ldd	r23, Y+38	; 0x26
     314:	8f a1       	ldd	r24, Y+39	; 0x27
     316:	98 a5       	ldd	r25, Y+40	; 0x28
     318:	0e 94 3c 05 	call	0xa78	; 0xa78 <__addsf3>
     31c:	69 87       	std	Y+9, r22	; 0x09
     31e:	7a 87       	std	Y+10, r23	; 0x0a
     320:	8b 87       	std	Y+11, r24	; 0x0b
     322:	9c 87       	std	Y+12, r25	; 0x0c
     324:	29 a1       	ldd	r18, Y+33	; 0x21
     326:	3a a1       	ldd	r19, Y+34	; 0x22
     328:	4b a1       	ldd	r20, Y+35	; 0x23
     32a:	5c a1       	ldd	r21, Y+36	; 0x24
     32c:	c3 01       	movw	r24, r6
     32e:	b2 01       	movw	r22, r4
     330:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	a5 01       	movw	r20, r10
     33a:	94 01       	movw	r18, r8
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	c3 01       	movw	r24, r6
     34a:	b2 01       	movw	r22, r4
     34c:	0e 94 3b 05 	call	0xa76	; 0xa76 <__subsf3>
     350:	6d 87       	std	Y+13, r22	; 0x0d
     352:	7e 87       	std	Y+14, r23	; 0x0e
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	98 8b       	std	Y+16, r25	; 0x10
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	fe 01       	movw	r30, r28
     35c:	39 96       	adiw	r30, 0x09	; 9
     35e:	de 01       	movw	r26, r28
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	01 90       	ld	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	8a 95       	dec	r24
     368:	e1 f7       	brne	.-8      	; 0x362 <cf_multiply+0xe8>
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3a 81       	ldd	r19, Y+2	; 0x02
     36e:	4b 81       	ldd	r20, Y+3	; 0x03
     370:	5c 81       	ldd	r21, Y+4	; 0x04
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	a8 96       	adiw	r28, 0x28	; 40
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	08 95       	ret

000003a2 <cf_exp>:



complexfloat cf_exp(float phi)
{
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	60 97       	sbiw	r28, 0x10	; 16
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	6b 01       	movw	r12, r22
     3ba:	7c 01       	movw	r14, r24
    complexfloat C;                                                     //Creates a complex struct to return

    if(phi > 0)                                                         //positive exponent return cos(phi) + Isin(phi)
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	a9 01       	movw	r20, r18
     3c2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__gesf2>
     3c6:	18 16       	cp	r1, r24
     3c8:	8c f4       	brge	.+34     	; 0x3ec <cf_exp+0x4a>
    {
        C.re = cosf(phi);
     3ca:	c7 01       	movw	r24, r14
     3cc:	b6 01       	movw	r22, r12
     3ce:	0e 94 a8 05 	call	0xb50	; 0xb50 <cos>
     3d2:	6d 87       	std	Y+13, r22	; 0x0d
     3d4:	7e 87       	std	Y+14, r23	; 0x0e
     3d6:	8f 87       	std	Y+15, r24	; 0x0f
     3d8:	98 8b       	std	Y+16, r25	; 0x10
        C.im = sinf(phi);
     3da:	c7 01       	movw	r24, r14
     3dc:	b6 01       	movw	r22, r12
     3de:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <sin>
     3e2:	69 87       	std	Y+9, r22	; 0x09
     3e4:	7a 87       	std	Y+10, r23	; 0x0a
     3e6:	8b 87       	std	Y+11, r24	; 0x0b
     3e8:	9c 87       	std	Y+12, r25	; 0x0c
     3ea:	10 c0       	rjmp	.+32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    }

    else                                                                //negative exponent return cos(phi) - Isin(phi)
    {
        C.re = cosf(phi);
     3ec:	c7 01       	movw	r24, r14
     3ee:	b6 01       	movw	r22, r12
     3f0:	0e 94 a8 05 	call	0xb50	; 0xb50 <cos>
     3f4:	6d 87       	std	Y+13, r22	; 0x0d
     3f6:	7e 87       	std	Y+14, r23	; 0x0e
     3f8:	8f 87       	std	Y+15, r24	; 0x0f
     3fa:	98 8b       	std	Y+16, r25	; 0x10
        C.im = (sinf(phi));
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <sin>
     404:	69 87       	std	Y+9, r22	; 0x09
     406:	7a 87       	std	Y+10, r23	; 0x0a
     408:	8b 87       	std	Y+11, r24	; 0x0b
     40a:	9c 87       	std	Y+12, r25	; 0x0c
    }

    return C;                                                           //return complex exponent
     40c:	88 e0       	ldi	r24, 0x08	; 8
     40e:	fe 01       	movw	r30, r28
     410:	39 96       	adiw	r30, 0x09	; 9
     412:	de 01       	movw	r26, r28
     414:	11 96       	adiw	r26, 0x01	; 1
     416:	01 90       	ld	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	8a 95       	dec	r24
     41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	29 81       	ldd	r18, Y+1	; 0x01
     420:	3a 81       	ldd	r19, Y+2	; 0x02
     422:	4b 81       	ldd	r20, Y+3	; 0x03
     424:	5c 81       	ldd	r21, Y+4	; 0x04
     426:	6d 81       	ldd	r22, Y+5	; 0x05
     428:	7e 81       	ldd	r23, Y+6	; 0x06
}
     42a:	8f 81       	ldd	r24, Y+7	; 0x07
     42c:	98 85       	ldd	r25, Y+8	; 0x08
     42e:	60 96       	adiw	r28, 0x10	; 16
     430:	cd bf       	out	0x3d, r28	; 61
     432:	de bf       	out	0x3e, r29	; 62
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	08 95       	ret

00000442 <calc_BitReversal>:
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
		PCalc /= 2;                                                                                             //Set parallel computations to half
	}
}
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	ec 01       	movw	r28, r24
     448:	80 e1       	ldi	r24, 0x10	; 16
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     450:	fc 01       	movw	r30, r24
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	bf 01       	movw	r22, r30
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	1c c0       	rjmp	.+56     	; 0x498 <calc_BitReversal+0x56>
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	04 2e       	mov	r0, r20
     466:	02 c0       	rjmp	.+4      	; 0x46c <calc_BitReversal+0x2a>
     468:	22 0f       	add	r18, r18
     46a:	33 1f       	adc	r19, r19
     46c:	0a 94       	dec	r0
     46e:	e2 f7       	brpl	.-8      	; 0x468 <calc_BitReversal+0x26>
     470:	2c 23       	and	r18, r28
     472:	3d 23       	and	r19, r29
     474:	04 2e       	mov	r0, r20
     476:	02 c0       	rjmp	.+4      	; 0x47c <calc_BitReversal+0x3a>
     478:	36 95       	lsr	r19
     47a:	27 95       	ror	r18
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <calc_BitReversal+0x36>
     480:	06 2e       	mov	r0, r22
     482:	02 c0       	rjmp	.+4      	; 0x488 <calc_BitReversal+0x46>
     484:	22 0f       	add	r18, r18
     486:	33 1f       	adc	r19, r19
     488:	0a 94       	dec	r0
     48a:	e2 f7       	brpl	.-8      	; 0x484 <calc_BitReversal+0x42>
     48c:	82 2b       	or	r24, r18
     48e:	93 2b       	or	r25, r19
     490:	4f 5f       	subi	r20, 0xFF	; 255
     492:	5f 4f       	sbci	r21, 0xFF	; 255
     494:	61 50       	subi	r22, 0x01	; 1
     496:	71 09       	sbc	r23, r1
     498:	e4 17       	cp	r30, r20
     49a:	f5 07       	cpc	r31, r21
     49c:	08 f7       	brcc	.-62     	; 0x460 <calc_BitReversal+0x1e>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <init_BRLookup>:
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 61 07 	call	0xec2	; 0xec2 <malloc>
     4b8:	7c 01       	movw	r14, r24
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
     4bc:	d0 e0       	ldi	r29, 0x00	; 0
     4be:	0c c0       	rjmp	.+24     	; 0x4d8 <init_BRLookup+0x34>
     4c0:	8e 01       	movw	r16, r28
     4c2:	00 0f       	add	r16, r16
     4c4:	11 1f       	adc	r17, r17
     4c6:	0e 0d       	add	r16, r14
     4c8:	1f 1d       	adc	r17, r15
     4ca:	ce 01       	movw	r24, r28
     4cc:	0e 94 21 02 	call	0x442	; 0x442 <calc_BitReversal>
     4d0:	f8 01       	movw	r30, r16
     4d2:	80 83       	st	Z, r24
     4d4:	91 83       	std	Z+1, r25	; 0x01
     4d6:	21 96       	adiw	r28, 0x01	; 1
     4d8:	c0 31       	cpi	r28, 0x10	; 16
     4da:	d1 05       	cpc	r29, r1
     4dc:	88 f3       	brcs	.-30     	; 0x4c0 <init_BRLookup+0x1c>
     4de:	c7 01       	movw	r24, r14
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	08 95       	ret

000004ee <init_avr_Wlookup>:
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	60 97       	sbiw	r28, 0x10	; 16
     510:	cd bf       	out	0x3d, r28	; 61
     512:	de bf       	out	0x3e, r29	; 62
     514:	80 e4       	ldi	r24, 0x40	; 64
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 61 07 	call	0xec2	; 0xec2 <malloc>
     51c:	3c 01       	movw	r6, r24
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e8       	ldi	r26, 0x80	; 128
     524:	bf e3       	ldi	r27, 0x3F	; 63
     526:	8d 83       	std	Y+5, r24	; 0x05
     528:	9e 83       	std	Y+6, r25	; 0x06
     52a:	af 83       	std	Y+7, r26	; 0x07
     52c:	b8 87       	std	Y+8, r27	; 0x08
     52e:	19 82       	std	Y+1, r1	; 0x01
     530:	1a 82       	std	Y+2, r1	; 0x02
     532:	1b 82       	std	Y+3, r1	; 0x03
     534:	1c 82       	std	Y+4, r1	; 0x04
     536:	6b ed       	ldi	r22, 0xDB	; 219
     538:	7f e0       	ldi	r23, 0x0F	; 15
     53a:	89 ec       	ldi	r24, 0xC9	; 201
     53c:	9e eb       	ldi	r25, 0xBE	; 190
     53e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_exp>
     542:	29 87       	std	Y+9, r18	; 0x09
     544:	3a 87       	std	Y+10, r19	; 0x0a
     546:	4b 87       	std	Y+11, r20	; 0x0b
     548:	5c 87       	std	Y+12, r21	; 0x0c
     54a:	6d 87       	std	Y+13, r22	; 0x0d
     54c:	7e 87       	std	Y+14, r23	; 0x0e
     54e:	8f 87       	std	Y+15, r24	; 0x0f
     550:	98 8b       	std	Y+16, r25	; 0x10
     552:	81 2c       	mov	r8, r1
     554:	91 2c       	mov	r9, r1
     556:	36 c0       	rjmp	.+108    	; 0x5c4 <init_avr_Wlookup+0xd6>
     558:	f4 01       	movw	r30, r8
     55a:	ee 0f       	add	r30, r30
     55c:	ff 1f       	adc	r31, r31
     55e:	ee 0f       	add	r30, r30
     560:	ff 1f       	adc	r31, r31
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	e6 0d       	add	r30, r6
     568:	f7 1d       	adc	r31, r7
     56a:	8d 81       	ldd	r24, Y+5	; 0x05
     56c:	9e 81       	ldd	r25, Y+6	; 0x06
     56e:	af 81       	ldd	r26, Y+7	; 0x07
     570:	b8 85       	ldd	r27, Y+8	; 0x08
     572:	84 83       	std	Z+4, r24	; 0x04
     574:	95 83       	std	Z+5, r25	; 0x05
     576:	a6 83       	std	Z+6, r26	; 0x06
     578:	b7 83       	std	Z+7, r27	; 0x07
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	9a 81       	ldd	r25, Y+2	; 0x02
     57e:	ab 81       	ldd	r26, Y+3	; 0x03
     580:	bc 81       	ldd	r27, Y+4	; 0x04
     582:	80 83       	st	Z, r24
     584:	91 83       	std	Z+1, r25	; 0x01
     586:	a2 83       	std	Z+2, r26	; 0x02
     588:	b3 83       	std	Z+3, r27	; 0x03
     58a:	a9 84       	ldd	r10, Y+9	; 0x09
     58c:	ba 84       	ldd	r11, Y+10	; 0x0a
     58e:	cb 84       	ldd	r12, Y+11	; 0x0b
     590:	dc 84       	ldd	r13, Y+12	; 0x0c
     592:	ed 84       	ldd	r14, Y+13	; 0x0d
     594:	fe 84       	ldd	r15, Y+14	; 0x0e
     596:	0f 85       	ldd	r16, Y+15	; 0x0f
     598:	18 89       	ldd	r17, Y+16	; 0x10
     59a:	29 81       	ldd	r18, Y+1	; 0x01
     59c:	3a 81       	ldd	r19, Y+2	; 0x02
     59e:	4b 81       	ldd	r20, Y+3	; 0x03
     5a0:	5c 81       	ldd	r21, Y+4	; 0x04
     5a2:	6d 81       	ldd	r22, Y+5	; 0x05
     5a4:	7e 81       	ldd	r23, Y+6	; 0x06
     5a6:	8f 81       	ldd	r24, Y+7	; 0x07
     5a8:	98 85       	ldd	r25, Y+8	; 0x08
     5aa:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     5ae:	29 83       	std	Y+1, r18	; 0x01
     5b0:	3a 83       	std	Y+2, r19	; 0x02
     5b2:	4b 83       	std	Y+3, r20	; 0x03
     5b4:	5c 83       	std	Y+4, r21	; 0x04
     5b6:	6d 83       	std	Y+5, r22	; 0x05
     5b8:	7e 83       	std	Y+6, r23	; 0x06
     5ba:	8f 83       	std	Y+7, r24	; 0x07
     5bc:	98 87       	std	Y+8, r25	; 0x08
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	88 1a       	sub	r8, r24
     5c2:	98 0a       	sbc	r9, r24
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	88 16       	cp	r8, r24
     5c8:	91 04       	cpc	r9, r1
     5ca:	30 f2       	brcs	.-116    	; 0x558 <init_avr_Wlookup+0x6a>
     5cc:	c3 01       	movw	r24, r6
     5ce:	60 96       	adiw	r28, 0x10	; 16
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	9f 90       	pop	r9
     5ea:	8f 90       	pop	r8
     5ec:	7f 90       	pop	r7
     5ee:	6f 90       	pop	r6
     5f0:	08 95       	ret

000005f2 <init_avr_fft>:
     5f2:	80 e8       	ldi	r24, 0x80	; 128
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 61 07 	call	0xec2	; 0xec2 <malloc>
     5fa:	08 95       	ret

000005fc <init_Window>:

float *init_Window(void)
{
     5fc:	4f 92       	push	r4
     5fe:	5f 92       	push	r5
     600:	6f 92       	push	r6
     602:	7f 92       	push	r7
     604:	af 92       	push	r10
     606:	bf 92       	push	r11
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
	float *Window = malloc(sizeof(float)*(N/2));																//Allocate memory for the window function
     618:	80 e2       	ldi	r24, 0x20	; 32
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 61 07 	call	0xec2	; 0xec2 <malloc>
     620:	5c 01       	movw	r10, r24
	for(uint16_t i = 0; i < (N/2); i++)
     622:	c0 e0       	ldi	r28, 0x00	; 0
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	6c c0       	rjmp	.+216    	; 0x700 <init_Window+0x104>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
     628:	8e 01       	movw	r16, r28
     62a:	00 0f       	add	r16, r16
     62c:	11 1f       	adc	r17, r17
     62e:	00 0f       	add	r16, r16
     630:	11 1f       	adc	r17, r17
     632:	0a 0d       	add	r16, r10
     634:	1b 1d       	adc	r17, r11
     636:	be 01       	movw	r22, r28
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatunsisf>
     640:	6b 01       	movw	r12, r22
     642:	7c 01       	movw	r14, r24
     644:	2b ed       	ldi	r18, 0xDB	; 219
     646:	3f e0       	ldi	r19, 0x0F	; 15
     648:	49 ec       	ldi	r20, 0xC9	; 201
     64a:	50 e4       	ldi	r21, 0x40	; 64
     64c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e8       	ldi	r20, 0x80	; 128
     656:	5d e3       	ldi	r21, 0x3D	; 61
     658:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     65c:	0e 94 a8 05 	call	0xb50	; 0xb50 <cos>
     660:	26 e2       	ldi	r18, 0x26	; 38
     662:	31 e0       	ldi	r19, 0x01	; 1
     664:	4a ef       	ldi	r20, 0xFA	; 250
     666:	5e e3       	ldi	r21, 0x3E	; 62
     668:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     66c:	9b 01       	movw	r18, r22
     66e:	ac 01       	movw	r20, r24
     670:	64 e1       	ldi	r22, 0x14	; 20
     672:	7e ea       	ldi	r23, 0xAE	; 174
     674:	87 eb       	ldi	r24, 0xB7	; 183
     676:	9e e3       	ldi	r25, 0x3E	; 62
     678:	0e 94 3b 05 	call	0xa76	; 0xa76 <__subsf3>
     67c:	2b 01       	movw	r4, r22
     67e:	3c 01       	movw	r6, r24
     680:	2b ed       	ldi	r18, 0xDB	; 219
     682:	3f e0       	ldi	r19, 0x0F	; 15
     684:	49 e4       	ldi	r20, 0x49	; 73
     686:	51 e4       	ldi	r21, 0x41	; 65
     688:	c7 01       	movw	r24, r14
     68a:	b6 01       	movw	r22, r12
     68c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e8       	ldi	r20, 0x80	; 128
     696:	5d e3       	ldi	r21, 0x3D	; 61
     698:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     69c:	0e 94 a8 05 	call	0xb50	; 0xb50 <cos>
     6a0:	24 eb       	ldi	r18, 0xB4	; 180
     6a2:	3b ea       	ldi	r19, 0xAB	; 171
     6a4:	40 e1       	ldi	r20, 0x10	; 16
     6a6:	5e e3       	ldi	r21, 0x3E	; 62
     6a8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	c3 01       	movw	r24, r6
     6b2:	b2 01       	movw	r22, r4
     6b4:	0e 94 3c 05 	call	0xa78	; 0xa78 <__addsf3>
     6b8:	2b 01       	movw	r4, r22
     6ba:	3c 01       	movw	r6, r24
     6bc:	24 ee       	ldi	r18, 0xE4	; 228
     6be:	3b ec       	ldi	r19, 0xCB	; 203
     6c0:	46 e9       	ldi	r20, 0x96	; 150
     6c2:	51 e4       	ldi	r21, 0x41	; 65
     6c4:	c7 01       	movw	r24, r14
     6c6:	b6 01       	movw	r22, r12
     6c8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e8       	ldi	r20, 0x80	; 128
     6d2:	5d e3       	ldi	r21, 0x3D	; 61
     6d4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     6d8:	0e 94 a8 05 	call	0xb50	; 0xb50 <cos>
     6dc:	29 e7       	ldi	r18, 0x79	; 121
     6de:	3d e5       	ldi	r19, 0x5D	; 93
     6e0:	4f e3       	ldi	r20, 0x3F	; 63
     6e2:	5c e3       	ldi	r21, 0x3C	; 60
     6e4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	c3 01       	movw	r24, r6
     6ee:	b2 01       	movw	r22, r4
     6f0:	0e 94 3b 05 	call	0xa76	; 0xa76 <__subsf3>
     6f4:	f8 01       	movw	r30, r16
     6f6:	60 83       	st	Z, r22
     6f8:	71 83       	std	Z+1, r23	; 0x01
     6fa:	82 83       	std	Z+2, r24	; 0x02
     6fc:	93 83       	std	Z+3, r25	; 0x03
}

float *init_Window(void)
{
	float *Window = malloc(sizeof(float)*(N/2));																//Allocate memory for the window function
	for(uint16_t i = 0; i < (N/2); i++)
     6fe:	21 96       	adiw	r28, 0x01	; 1
     700:	c8 30       	cpi	r28, 0x08	; 8
     702:	d1 05       	cpc	r29, r1
     704:	08 f4       	brcc	.+2      	; 0x708 <init_Window+0x10c>
     706:	90 cf       	rjmp	.-224    	; 0x628 <init_Window+0x2c>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
	}

	return Window;
     708:	c5 01       	movw	r24, r10
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	bf 90       	pop	r11
     71c:	af 90       	pop	r10
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	08 95       	ret

00000728 <stop_timer>:
	uint8_t *sendarray = (uint8_t*)(&data);															//converts float to 4 separate bytes in send array
	write8_UART(sendarray[0]);																		//Sends separate bytes (LF)
	write8_UART(sendarray[1]);
	write8_UART(sendarray[2]);
	write8_UART(sendarray[3]);
}
     728:	e0 e0       	ldi	r30, 0x00	; 0
     72a:	fa e0       	ldi	r31, 0x0A	; 10
     72c:	10 82       	st	Z, r1
     72e:	86 81       	ldd	r24, Z+6	; 0x06
     730:	8c 7f       	andi	r24, 0xFC	; 252
     732:	86 83       	std	Z+6, r24	; 0x06
     734:	10 a2       	std	Z+32, r1	; 0x20
     736:	11 a2       	std	Z+33, r1	; 0x21
     738:	08 95       	ret

0000073a <start_timer>:
     73a:	e0 e0       	ldi	r30, 0x00	; 0
     73c:	fa e0       	ldi	r31, 0x0A	; 10
     73e:	10 a2       	std	Z+32, r1	; 0x20
     740:	11 a2       	std	Z+33, r1	; 0x21
     742:	86 81       	ldd	r24, Z+6	; 0x06
     744:	8c 7f       	andi	r24, 0xFC	; 252
     746:	81 60       	ori	r24, 0x01	; 1
     748:	86 83       	std	Z+6, r24	; 0x06
     74a:	86 e0       	ldi	r24, 0x06	; 6
     74c:	80 83       	st	Z, r24
     74e:	08 95       	ret

00000750 <write8_UART>:
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	04 c0       	rjmp	.+8      	; 0x75e <write8_UART+0xe>
     756:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     75a:	20 72       	andi	r18, 0x20	; 32
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	23 2b       	or	r18, r19
     760:	d1 f3       	breq	.-12     	; 0x756 <write8_UART+0x6>
     762:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	04 c0       	rjmp	.+8      	; 0x774 <write8_UART+0x24>
     76c:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     770:	80 72       	andi	r24, 0x20	; 32
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	89 2b       	or	r24, r25
     776:	d1 f3       	breq	.-12     	; 0x76c <write8_UART+0x1c>
     778:	08 95       	ret

0000077a <write16_UART>:
	ADCA.CTRLA &= (0xFE);																			//Disable ADCA
	ADCB.CTRLA &= (0xFE);																			//Disable ADCB
}

void write16_UART(uint16_t data)																	//Writes 16bit UINT to MATLAB
{
     77a:	cf 93       	push	r28
     77c:	c9 2f       	mov	r28, r25
	write8_UART((uint8_t)data);																		//Send low byte
     77e:	0e 94 a8 03 	call	0x750	; 0x750 <write8_UART>
	write8_UART((uint8_t)(data>>8));																//Send  high byte	
     782:	8c 2f       	mov	r24, r28
     784:	0e 94 a8 03 	call	0x750	; 0x750 <write8_UART>
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <read_ADC>:
	write8_UART(sendarray[2]);
	write8_UART(sendarray[3]);
}

void read_ADC(complexfloat *FFT_Array, uint16_t *Lookup_Reverse, uint16_t i)
{
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	5c 01       	movw	r10, r24
     7aa:	3b 01       	movw	r6, r22
     7ac:	ea 01       	movw	r28, r20
	uint16_t TestVal_I;																				//Temp variable for storing I channel ADC data
	uint16_t TestVal_Q;																				//Temp variable for storing Q channel ADC data=

	ADCA.CTRLA = ADC_ENABLE_bm;																		//Enables ADCA
     7ae:	a0 e0       	ldi	r26, 0x00	; 0
     7b0:	b2 e0       	ldi	r27, 0x02	; 2
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	8c 93       	st	X, r24
	ADCB.CTRLA = ADC_ENABLE_bm;																		//Enables ADCB
     7b6:	e0 e4       	ldi	r30, 0x40	; 64
     7b8:	f2 e0       	ldi	r31, 0x02	; 2
     7ba:	80 83       	st	Z, r24
	
	ADCA.CTRLA |= (0x01 << 2);							 											//Start ADCA conversion CH0
     7bc:	8c 91       	ld	r24, X
     7be:	84 60       	ori	r24, 0x04	; 4
     7c0:	8c 93       	st	X, r24
	ADCB.CTRLA |= (0x01 << 2);																		//Start ADCB conversion CH0
     7c2:	80 81       	ld	r24, Z
     7c4:	84 60       	ori	r24, 0x04	; 4
     7c6:	80 83       	st	Z, r24
	
	while( (((ADCA.INTFLAGS & (0x01)) != (0x1)) && ((ADCB.INTFLAGS & (0x01)) != (0x1))))			//Poll ADC IF
     7c8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
     7cc:	80 fd       	sbrc	r24, 0
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <read_ADC+0x4c>
     7d0:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     7d4:	80 ff       	sbrs	r24, 0
     7d6:	f8 cf       	rjmp	.-16     	; 0x7c8 <read_ADC+0x3c>
	{
		//Wait for conversion
	}

	TestVal_I = ((uint16_t)ADCA.CH0.RES);															//Read I sample and store to temp variable
     7d8:	81 2c       	mov	r8, r1
     7da:	68 94       	set
     7dc:	99 24       	eor	r9, r9
     7de:	91 f8       	bld	r9, 1
     7e0:	f4 01       	movw	r30, r8
     7e2:	e4 a0       	ldd	r14, Z+36	; 0x24
     7e4:	f5 a0       	ldd	r15, Z+37	; 0x25
	TestVal_Q = ((uint16_t)ADCB.CH0.RES);															//Read Q sample and store to temp variable
     7e6:	68 94       	set
     7e8:	cc 24       	eor	r12, r12
     7ea:	c6 f8       	bld	r12, 6
     7ec:	dd 24       	eor	r13, r13
     7ee:	d1 f8       	bld	r13, 1
     7f0:	f6 01       	movw	r30, r12
     7f2:	04 a1       	ldd	r16, Z+36	; 0x24
     7f4:	15 a1       	ldd	r17, Z+37	; 0x25
	
	write16_UART(TestVal_I);																		//Debug write raw ADC value
     7f6:	c7 01       	movw	r24, r14
     7f8:	0e 94 bd 03 	call	0x77a	; 0x77a <write16_UART>
	write16_UART(TestVal_Q);																		//Debug write raw ADC value
     7fc:	c8 01       	movw	r24, r16
     7fe:	0e 94 bd 03 	call	0x77a	; 0x77a <write16_UART>
	
	FFT_Array[Lookup_Reverse[i]].re = ((float)TestVal_I);											//Save I[i] sample to BR location in FFT_Array
     802:	cc 0f       	add	r28, r28
     804:	dd 1f       	adc	r29, r29
     806:	c6 0d       	add	r28, r6
     808:	d7 1d       	adc	r29, r7
     80a:	68 80       	ld	r6, Y
     80c:	79 80       	ldd	r7, Y+1	; 0x01
     80e:	66 0c       	add	r6, r6
     810:	77 1c       	adc	r7, r7
     812:	66 0c       	add	r6, r6
     814:	77 1c       	adc	r7, r7
     816:	66 0c       	add	r6, r6
     818:	77 1c       	adc	r7, r7
     81a:	6a 0c       	add	r6, r10
     81c:	7b 1c       	adc	r7, r11
     81e:	b7 01       	movw	r22, r14
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatunsisf>
     828:	f3 01       	movw	r30, r6
     82a:	64 83       	std	Z+4, r22	; 0x04
     82c:	75 83       	std	Z+5, r23	; 0x05
     82e:	86 83       	std	Z+6, r24	; 0x06
     830:	97 83       	std	Z+7, r25	; 0x07
	FFT_Array[Lookup_Reverse[i]].im = ((float)TestVal_Q);											//Save Q[i] sample to BR location in FFT_Array
     832:	88 81       	ld	r24, Y
     834:	99 81       	ldd	r25, Y+1	; 0x01
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	e5 01       	movw	r28, r10
     844:	c8 0f       	add	r28, r24
     846:	d9 1f       	adc	r29, r25
     848:	b8 01       	movw	r22, r16
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__floatunsisf>
     852:	68 83       	st	Y, r22
     854:	79 83       	std	Y+1, r23	; 0x01
     856:	8a 83       	std	Y+2, r24	; 0x02
     858:	9b 83       	std	Y+3, r25	; 0x03
	
	ADCA.CTRLA &= (0xFE);																			//Disable ADCA
     85a:	f4 01       	movw	r30, r8
     85c:	80 81       	ld	r24, Z
     85e:	8e 7f       	andi	r24, 0xFE	; 254
     860:	80 83       	st	Z, r24
	ADCB.CTRLA &= (0xFE);																			//Disable ADCB
     862:	f6 01       	movw	r30, r12
     864:	80 81       	ld	r24, Z
     866:	8e 7f       	andi	r24, 0xFE	; 254
     868:	80 83       	st	Z, r24
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
     87e:	9f 90       	pop	r9
     880:	8f 90       	pop	r8
     882:	7f 90       	pop	r7
     884:	6f 90       	pop	r6
     886:	08 95       	ret

00000888 <__vector_47>:
uint16_t count = 0;																//keeps track of samples taken



ISR(TCE0_OVF_vect)																//When TC overflows (@ 5kHz interval)
{
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1
     892:	0b b6       	in	r0, 0x3b	; 59
     894:	0f 92       	push	r0
     896:	2f 93       	push	r18
     898:	3f 93       	push	r19
     89a:	4f 93       	push	r20
     89c:	5f 93       	push	r21
     89e:	6f 93       	push	r22
     8a0:	7f 93       	push	r23
     8a2:	8f 93       	push	r24
     8a4:	9f 93       	push	r25
     8a6:	af 93       	push	r26
     8a8:	bf 93       	push	r27
     8aa:	ef 93       	push	r30
     8ac:	ff 93       	push	r31
	read_ADC(FFT_Array, Reverse_Lookup, count);									//Gets IQ samples and decimates in time
     8ae:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <__data_end>
     8b2:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <__data_end+0x1>
     8b6:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <Reverse_Lookup>
     8ba:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <Reverse_Lookup+0x1>
     8be:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <FFT_Array>
     8c2:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <FFT_Array+0x1>
     8c6:	0e 94 c6 03 	call	0x78c	; 0x78c <read_ADC>
	count++;																	//Add sample count by one
     8ca:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
     8ce:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
     8d8:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
}
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0b be       	out	0x3b, r0	; 59
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0f 90       	pop	r0
     8fe:	1f 90       	pop	r1
     900:	18 95       	reti

00000902 <main>:



int main(void)
{
	init_CLK();																	//Set F_CPU to 32MHz
     902:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <init_CLK>
	init_TIMER();																//Set timer for sampling @ fixed frequency
     906:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <init_TIMER>
	init_UART();																//Debug UART 115200Baud (PE2: RX, PE3 TX)
     90a:	0e 94 ba 04 	call	0x974	; 0x974 <init_UART>
	init_IO();																	//Setup of I/O pins
     90e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <init_IO>
	init_ADC();																	//Set registers for internal ADC
     912:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <init_ADC>
	init_DAC();																	//Set registers for internal DAC
     916:	0e 94 34 05 	call	0xa68	; 0xa68 <init_DAC>
	
	sei();																		//Global interrupt mask
     91a:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;												//Set low level interrupts
     91c:	e0 ea       	ldi	r30, 0xA0	; 160
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	82 81       	ldd	r24, Z+2	; 0x02
     922:	81 60       	ori	r24, 0x01	; 1
     924:	82 83       	std	Z+2, r24	; 0x02
	
	FFT_Array = init_avr_fft();													//Creates data block in heap for FFT in place computation
     926:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <init_avr_fft>
     92a:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <FFT_Array>
     92e:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <FFT_Array+0x1>
	W = init_avr_Wlookup();														//Creates heap lookup table for twiddle factors
     932:	0e 94 77 02 	call	0x4ee	; 0x4ee <init_avr_Wlookup>
     936:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <W>
     93a:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <W+0x1>
	Reverse_Lookup = init_BRLookup();											//Creates heap lookup table for bit reverse order (decimation order)
     93e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <init_BRLookup>
     942:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <Reverse_Lookup>
     946:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <Reverse_Lookup+0x1>
	Window = init_Window();														//Creates heap lookup table for the Window function
     94a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <init_Window>
     94e:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <Window>
     952:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <Window+0x1>
	
	start_timer();																//Starts timer for sampling @ 5kHz										
     956:	0e 94 9d 03 	call	0x73a	; 0x73a <start_timer>
	
	while(1)
	{
		if(count == (N-1))													//When the FFT array is full of samples perform calculations
     95a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
     95e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
     962:	0f 97       	sbiw	r24, 0x0f	; 15
     964:	d1 f7       	brne	.-12     	; 0x95a <main+0x58>
		{
			stop_timer();														//stop the timer
     966:	0e 94 94 03 	call	0x728	; 0x728 <stop_timer>
			count = 0;															//Reset sample count
     96a:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <__data_end>
     96e:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <__data_end+0x1>
     972:	f3 cf       	rjmp	.-26     	; 0x95a <main+0x58>

00000974 <init_UART>:
#include "start.h"
#include "avr/io.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
     980:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x0D<<4);										//Set BSCALE to -3 for baud 115200
     984:	e0 ea       	ldi	r30, 0xA0	; 160
     986:	fa e0       	ldi	r31, 0x0A	; 10
     988:	87 81       	ldd	r24, Z+7	; 0x07
     98a:	80 6d       	ori	r24, 0xD0	; 208
     98c:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x83);										//Set BSEL to 131 for baud 115200
     98e:	86 81       	ldd	r24, Z+6	; 0x06
     990:	83 68       	ori	r24, 0x83	; 131
     992:	86 83       	std	Z+6, r24	; 0x06
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
     994:	85 81       	ldd	r24, Z+5	; 0x05
     996:	83 60       	ori	r24, 0x03	; 3
     998:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
     99a:	84 81       	ldd	r24, Z+4	; 0x04
     99c:	88 61       	ori	r24, 0x18	; 24
     99e:	84 83       	std	Z+4, r24	; 0x04
     9a0:	08 95       	ret

000009a2 <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
     9a2:	e0 e5       	ldi	r30, 0x50	; 80
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	82 60       	ori	r24, 0x02	; 2
     9aa:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
     9ac:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
     9b0:	81 ff       	sbrs	r24, 1
     9b2:	fc cf       	rjmp	.-8      	; 0x9ac <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
     9b4:	88 ed       	ldi	r24, 0xD8	; 216
     9b6:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
     9b8:	e0 e4       	ldi	r30, 0x40	; 64
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
     9c0:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
     9c2:	11 82       	std	Z+1, r1	; 0x01
     9c4:	08 95       	ret

000009c6 <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
     9c6:	e0 e0       	ldi	r30, 0x00	; 0
     9c8:	fa e0       	ldi	r31, 0x0A	; 10
     9ca:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
     9cc:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PER = 0x19;													//Set overflow frequency to 5kHz = ((F_CPU/256)/(PER))
     9d2:	89 e1       	ldi	r24, 0x19	; 25
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	86 a3       	std	Z+38, r24	; 0x26
     9d8:	97 a3       	std	Z+39, r25	; 0x27
     9da:	08 95       	ret

000009dc <init_IO>:
}

void init_IO(void)
{
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
     9dc:	e1 e0       	ldi	r30, 0x01	; 1
     9de:	f6 e0       	ldi	r31, 0x06	; 6
     9e0:	80 e8       	ldi	r24, 0x80	; 128
     9e2:	80 83       	st	Z, r24
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
     9e4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
     9e8:	80 e1       	ldi	r24, 0x10	; 16
     9ea:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	
	PORTA_DIRSET = PIN1_bm;												//Radar /enable pin
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	80 83       	st	Z, r24
	PORTA_OUTCLR = PIN1_bm;												//Enable radar
     9f2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     9f6:	08 95       	ret

000009f8 <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//Set PA0 as input for I channel
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7be602>
	PORTB_DIRCLR = PIN0_bm;												//Set PB0 as input for Q channel
     9fe:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x7be622>
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
     a02:	a0 e0       	ldi	r26, 0x00	; 0
     a04:	b2 e0       	ldi	r27, 0x02	; 2
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	14 96       	adiw	r26, 0x04	; 4
     a0a:	8c 93       	st	X, r24
     a0c:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
     a0e:	e0 e4       	ldi	r30, 0x40	; 64
     a10:	f2 e0       	ldi	r31, 0x02	; 2
     a12:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
     a14:	12 96       	adiw	r26, 0x02	; 2
     a16:	8c 91       	ld	r24, X
     a18:	12 97       	sbiw	r26, 0x02	; 2
     a1a:	12 96       	adiw	r26, 0x02	; 2
     a1c:	8c 93       	st	X, r24
     a1e:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
     a20:	82 81       	ldd	r24, Z+2	; 0x02
     a22:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
     a24:	12 96       	adiw	r26, 0x02	; 2
     a26:	8c 91       	ld	r24, X
     a28:	12 97       	sbiw	r26, 0x02	; 2
     a2a:	80 61       	ori	r24, 0x10	; 16
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	8c 93       	st	X, r24
     a30:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
     a32:	82 81       	ldd	r24, Z+2	; 0x02
     a34:	80 61       	ori	r24, 0x10	; 16
     a36:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 single ended input
     a38:	90 96       	adiw	r26, 0x20	; 32
     a3a:	8c 91       	ld	r24, X
     a3c:	90 97       	sbiw	r26, 0x20	; 32
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	90 96       	adiw	r26, 0x20	; 32
     a42:	8c 93       	st	X, r24
     a44:	90 97       	sbiw	r26, 0x20	; 32
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 single ended input
     a46:	80 a1       	ldd	r24, Z+32	; 0x20
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
     a4c:	91 96       	adiw	r26, 0x21	; 33
     a4e:	8c 91       	ld	r24, X
     a50:	91 97       	sbiw	r26, 0x21	; 33
     a52:	87 60       	ori	r24, 0x07	; 7
     a54:	91 96       	adiw	r26, 0x21	; 33
     a56:	8c 93       	st	X, r24
     a58:	91 97       	sbiw	r26, 0x21	; 33
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
     a5a:	81 a1       	ldd	r24, Z+33	; 0x21
     a5c:	87 60       	ori	r24, 0x07	; 7
     a5e:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCA CH0 to pin A0 as input for I channel
     a60:	91 96       	adiw	r26, 0x21	; 33
     a62:	1c 92       	st	X, r1
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCB CH0 to pin B0 as input for Q channel
     a64:	11 a2       	std	Z+33, r1	; 0x21
     a66:	08 95       	ret

00000a68 <init_DAC>:
}

void init_DAC(void)
{
	DACB.CTRLC = DAC_REFSEL_INT1V_gc;									//set DAC reference to internal 1V
     a68:	e0 e2       	ldi	r30, 0x20	; 32
     a6a:	f3 e0       	ldi	r31, 0x03	; 3
     a6c:	12 82       	std	Z+2, r1	; 0x02
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;									//set DAC output to channel 0
     a6e:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;							//Enable both DAC channels
     a70:	85 e0       	ldi	r24, 0x05	; 5
     a72:	80 83       	st	Z, r24
     a74:	08 95       	ret

00000a76 <__subsf3>:
     a76:	50 58       	subi	r21, 0x80	; 128

00000a78 <__addsf3>:
     a78:	bb 27       	eor	r27, r27
     a7a:	aa 27       	eor	r26, r26
     a7c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__addsf3x>
     a80:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_round>
     a84:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_pscA>
     a88:	38 f0       	brcs	.+14     	; 0xa98 <__addsf3+0x20>
     a8a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_pscB>
     a8e:	20 f0       	brcs	.+8      	; 0xa98 <__addsf3+0x20>
     a90:	39 f4       	brne	.+14     	; 0xaa0 <__addsf3+0x28>
     a92:	9f 3f       	cpi	r25, 0xFF	; 255
     a94:	19 f4       	brne	.+6      	; 0xa9c <__addsf3+0x24>
     a96:	26 f4       	brtc	.+8      	; 0xaa0 <__addsf3+0x28>
     a98:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_nan>
     a9c:	0e f4       	brtc	.+2      	; 0xaa0 <__addsf3+0x28>
     a9e:	e0 95       	com	r30
     aa0:	e7 fb       	bst	r30, 7
     aa2:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_inf>

00000aa6 <__addsf3x>:
     aa6:	e9 2f       	mov	r30, r25
     aa8:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_split3>
     aac:	58 f3       	brcs	.-42     	; 0xa84 <__addsf3+0xc>
     aae:	ba 17       	cp	r27, r26
     ab0:	62 07       	cpc	r22, r18
     ab2:	73 07       	cpc	r23, r19
     ab4:	84 07       	cpc	r24, r20
     ab6:	95 07       	cpc	r25, r21
     ab8:	20 f0       	brcs	.+8      	; 0xac2 <__addsf3x+0x1c>
     aba:	79 f4       	brne	.+30     	; 0xada <__addsf3x+0x34>
     abc:	a6 f5       	brtc	.+104    	; 0xb26 <__addsf3x+0x80>
     abe:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__fp_zero>
     ac2:	0e f4       	brtc	.+2      	; 0xac6 <__addsf3x+0x20>
     ac4:	e0 95       	com	r30
     ac6:	0b 2e       	mov	r0, r27
     ac8:	ba 2f       	mov	r27, r26
     aca:	a0 2d       	mov	r26, r0
     acc:	0b 01       	movw	r0, r22
     ace:	b9 01       	movw	r22, r18
     ad0:	90 01       	movw	r18, r0
     ad2:	0c 01       	movw	r0, r24
     ad4:	ca 01       	movw	r24, r20
     ad6:	a0 01       	movw	r20, r0
     ad8:	11 24       	eor	r1, r1
     ada:	ff 27       	eor	r31, r31
     adc:	59 1b       	sub	r21, r25
     ade:	99 f0       	breq	.+38     	; 0xb06 <__addsf3x+0x60>
     ae0:	59 3f       	cpi	r21, 0xF9	; 249
     ae2:	50 f4       	brcc	.+20     	; 0xaf8 <__addsf3x+0x52>
     ae4:	50 3e       	cpi	r21, 0xE0	; 224
     ae6:	68 f1       	brcs	.+90     	; 0xb42 <__addsf3x+0x9c>
     ae8:	1a 16       	cp	r1, r26
     aea:	f0 40       	sbci	r31, 0x00	; 0
     aec:	a2 2f       	mov	r26, r18
     aee:	23 2f       	mov	r18, r19
     af0:	34 2f       	mov	r19, r20
     af2:	44 27       	eor	r20, r20
     af4:	58 5f       	subi	r21, 0xF8	; 248
     af6:	f3 cf       	rjmp	.-26     	; 0xade <__addsf3x+0x38>
     af8:	46 95       	lsr	r20
     afa:	37 95       	ror	r19
     afc:	27 95       	ror	r18
     afe:	a7 95       	ror	r26
     b00:	f0 40       	sbci	r31, 0x00	; 0
     b02:	53 95       	inc	r21
     b04:	c9 f7       	brne	.-14     	; 0xaf8 <__addsf3x+0x52>
     b06:	7e f4       	brtc	.+30     	; 0xb26 <__addsf3x+0x80>
     b08:	1f 16       	cp	r1, r31
     b0a:	ba 0b       	sbc	r27, r26
     b0c:	62 0b       	sbc	r22, r18
     b0e:	73 0b       	sbc	r23, r19
     b10:	84 0b       	sbc	r24, r20
     b12:	ba f0       	brmi	.+46     	; 0xb42 <__addsf3x+0x9c>
     b14:	91 50       	subi	r25, 0x01	; 1
     b16:	a1 f0       	breq	.+40     	; 0xb40 <__addsf3x+0x9a>
     b18:	ff 0f       	add	r31, r31
     b1a:	bb 1f       	adc	r27, r27
     b1c:	66 1f       	adc	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	88 1f       	adc	r24, r24
     b22:	c2 f7       	brpl	.-16     	; 0xb14 <__addsf3x+0x6e>
     b24:	0e c0       	rjmp	.+28     	; 0xb42 <__addsf3x+0x9c>
     b26:	ba 0f       	add	r27, r26
     b28:	62 1f       	adc	r22, r18
     b2a:	73 1f       	adc	r23, r19
     b2c:	84 1f       	adc	r24, r20
     b2e:	48 f4       	brcc	.+18     	; 0xb42 <__addsf3x+0x9c>
     b30:	87 95       	ror	r24
     b32:	77 95       	ror	r23
     b34:	67 95       	ror	r22
     b36:	b7 95       	ror	r27
     b38:	f7 95       	ror	r31
     b3a:	9e 3f       	cpi	r25, 0xFE	; 254
     b3c:	08 f0       	brcs	.+2      	; 0xb40 <__addsf3x+0x9a>
     b3e:	b0 cf       	rjmp	.-160    	; 0xaa0 <__addsf3+0x28>
     b40:	93 95       	inc	r25
     b42:	88 0f       	add	r24, r24
     b44:	08 f0       	brcs	.+2      	; 0xb48 <__addsf3x+0xa2>
     b46:	99 27       	eor	r25, r25
     b48:	ee 0f       	add	r30, r30
     b4a:	97 95       	ror	r25
     b4c:	87 95       	ror	r24
     b4e:	08 95       	ret

00000b50 <cos>:
     b50:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_rempio2>
     b54:	e3 95       	inc	r30
     b56:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_sinus>

00000b5a <__floatunsisf>:
     b5a:	e8 94       	clt
     b5c:	09 c0       	rjmp	.+18     	; 0xb70 <__floatsisf+0x12>

00000b5e <__floatsisf>:
     b5e:	97 fb       	bst	r25, 7
     b60:	3e f4       	brtc	.+14     	; 0xb70 <__floatsisf+0x12>
     b62:	90 95       	com	r25
     b64:	80 95       	com	r24
     b66:	70 95       	com	r23
     b68:	61 95       	neg	r22
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	8f 4f       	sbci	r24, 0xFF	; 255
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	99 23       	and	r25, r25
     b72:	a9 f0       	breq	.+42     	; 0xb9e <__floatsisf+0x40>
     b74:	f9 2f       	mov	r31, r25
     b76:	96 e9       	ldi	r25, 0x96	; 150
     b78:	bb 27       	eor	r27, r27
     b7a:	93 95       	inc	r25
     b7c:	f6 95       	lsr	r31
     b7e:	87 95       	ror	r24
     b80:	77 95       	ror	r23
     b82:	67 95       	ror	r22
     b84:	b7 95       	ror	r27
     b86:	f1 11       	cpse	r31, r1
     b88:	f8 cf       	rjmp	.-16     	; 0xb7a <__floatsisf+0x1c>
     b8a:	fa f4       	brpl	.+62     	; 0xbca <__floatsisf+0x6c>
     b8c:	bb 0f       	add	r27, r27
     b8e:	11 f4       	brne	.+4      	; 0xb94 <__floatsisf+0x36>
     b90:	60 ff       	sbrs	r22, 0
     b92:	1b c0       	rjmp	.+54     	; 0xbca <__floatsisf+0x6c>
     b94:	6f 5f       	subi	r22, 0xFF	; 255
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	8f 4f       	sbci	r24, 0xFF	; 255
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	16 c0       	rjmp	.+44     	; 0xbca <__floatsisf+0x6c>
     b9e:	88 23       	and	r24, r24
     ba0:	11 f0       	breq	.+4      	; 0xba6 <__floatsisf+0x48>
     ba2:	96 e9       	ldi	r25, 0x96	; 150
     ba4:	11 c0       	rjmp	.+34     	; 0xbc8 <__floatsisf+0x6a>
     ba6:	77 23       	and	r23, r23
     ba8:	21 f0       	breq	.+8      	; 0xbb2 <__floatsisf+0x54>
     baa:	9e e8       	ldi	r25, 0x8E	; 142
     bac:	87 2f       	mov	r24, r23
     bae:	76 2f       	mov	r23, r22
     bb0:	05 c0       	rjmp	.+10     	; 0xbbc <__floatsisf+0x5e>
     bb2:	66 23       	and	r22, r22
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <__floatsisf+0x74>
     bb6:	96 e8       	ldi	r25, 0x86	; 134
     bb8:	86 2f       	mov	r24, r22
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	2a f0       	brmi	.+10     	; 0xbca <__floatsisf+0x6c>
     bc0:	9a 95       	dec	r25
     bc2:	66 0f       	add	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	88 1f       	adc	r24, r24
     bc8:	da f7       	brpl	.-10     	; 0xbc0 <__floatsisf+0x62>
     bca:	88 0f       	add	r24, r24
     bcc:	96 95       	lsr	r25
     bce:	87 95       	ror	r24
     bd0:	97 f9       	bld	r25, 7
     bd2:	08 95       	ret

00000bd4 <__fp_inf>:
     bd4:	97 f9       	bld	r25, 7
     bd6:	9f 67       	ori	r25, 0x7F	; 127
     bd8:	80 e8       	ldi	r24, 0x80	; 128
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	08 95       	ret

00000be0 <__fp_nan>:
     be0:	9f ef       	ldi	r25, 0xFF	; 255
     be2:	80 ec       	ldi	r24, 0xC0	; 192
     be4:	08 95       	ret

00000be6 <__fp_pscA>:
     be6:	00 24       	eor	r0, r0
     be8:	0a 94       	dec	r0
     bea:	16 16       	cp	r1, r22
     bec:	17 06       	cpc	r1, r23
     bee:	18 06       	cpc	r1, r24
     bf0:	09 06       	cpc	r0, r25
     bf2:	08 95       	ret

00000bf4 <__fp_pscB>:
     bf4:	00 24       	eor	r0, r0
     bf6:	0a 94       	dec	r0
     bf8:	12 16       	cp	r1, r18
     bfa:	13 06       	cpc	r1, r19
     bfc:	14 06       	cpc	r1, r20
     bfe:	05 06       	cpc	r0, r21
     c00:	08 95       	ret
     c02:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_nan>

00000c06 <__fp_rempio2>:
     c06:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_splitA>
     c0a:	d8 f3       	brcs	.-10     	; 0xc02 <__fp_pscB+0xe>
     c0c:	e8 94       	clt
     c0e:	e0 e0       	ldi	r30, 0x00	; 0
     c10:	bb 27       	eor	r27, r27
     c12:	9f 57       	subi	r25, 0x7F	; 127
     c14:	f0 f0       	brcs	.+60     	; 0xc52 <__fp_rempio2+0x4c>
     c16:	2a ed       	ldi	r18, 0xDA	; 218
     c18:	3f e0       	ldi	r19, 0x0F	; 15
     c1a:	49 ec       	ldi	r20, 0xC9	; 201
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <__fp_rempio2+0x24>
     c1e:	ee 0f       	add	r30, r30
     c20:	bb 0f       	add	r27, r27
     c22:	66 1f       	adc	r22, r22
     c24:	77 1f       	adc	r23, r23
     c26:	88 1f       	adc	r24, r24
     c28:	28 f0       	brcs	.+10     	; 0xc34 <__fp_rempio2+0x2e>
     c2a:	b2 3a       	cpi	r27, 0xA2	; 162
     c2c:	62 07       	cpc	r22, r18
     c2e:	73 07       	cpc	r23, r19
     c30:	84 07       	cpc	r24, r20
     c32:	28 f0       	brcs	.+10     	; 0xc3e <__fp_rempio2+0x38>
     c34:	b2 5a       	subi	r27, 0xA2	; 162
     c36:	62 0b       	sbc	r22, r18
     c38:	73 0b       	sbc	r23, r19
     c3a:	84 0b       	sbc	r24, r20
     c3c:	e3 95       	inc	r30
     c3e:	9a 95       	dec	r25
     c40:	72 f7       	brpl	.-36     	; 0xc1e <__fp_rempio2+0x18>
     c42:	80 38       	cpi	r24, 0x80	; 128
     c44:	30 f4       	brcc	.+12     	; 0xc52 <__fp_rempio2+0x4c>
     c46:	9a 95       	dec	r25
     c48:	bb 0f       	add	r27, r27
     c4a:	66 1f       	adc	r22, r22
     c4c:	77 1f       	adc	r23, r23
     c4e:	88 1f       	adc	r24, r24
     c50:	d2 f7       	brpl	.-12     	; 0xc46 <__fp_rempio2+0x40>
     c52:	90 48       	sbci	r25, 0x80	; 128
     c54:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_mpack_finite>

00000c58 <__fp_round>:
     c58:	09 2e       	mov	r0, r25
     c5a:	03 94       	inc	r0
     c5c:	00 0c       	add	r0, r0
     c5e:	11 f4       	brne	.+4      	; 0xc64 <__fp_round+0xc>
     c60:	88 23       	and	r24, r24
     c62:	52 f0       	brmi	.+20     	; 0xc78 <__fp_round+0x20>
     c64:	bb 0f       	add	r27, r27
     c66:	40 f4       	brcc	.+16     	; 0xc78 <__fp_round+0x20>
     c68:	bf 2b       	or	r27, r31
     c6a:	11 f4       	brne	.+4      	; 0xc70 <__fp_round+0x18>
     c6c:	60 ff       	sbrs	r22, 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__fp_round+0x20>
     c70:	6f 5f       	subi	r22, 0xFF	; 255
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	8f 4f       	sbci	r24, 0xFF	; 255
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	08 95       	ret

00000c7a <__fp_sinus>:
     c7a:	ef 93       	push	r30
     c7c:	e0 ff       	sbrs	r30, 0
     c7e:	07 c0       	rjmp	.+14     	; 0xc8e <__fp_sinus+0x14>
     c80:	a2 ea       	ldi	r26, 0xA2	; 162
     c82:	2a ed       	ldi	r18, 0xDA	; 218
     c84:	3f e0       	ldi	r19, 0x0F	; 15
     c86:	49 ec       	ldi	r20, 0xC9	; 201
     c88:	5f eb       	ldi	r21, 0xBF	; 191
     c8a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__addsf3x>
     c8e:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_round>
     c92:	0f 90       	pop	r0
     c94:	03 94       	inc	r0
     c96:	01 fc       	sbrc	r0, 1
     c98:	90 58       	subi	r25, 0x80	; 128
     c9a:	ec ef       	ldi	r30, 0xFC	; 252
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_powsodd>

00000ca2 <__fp_split3>:
     ca2:	57 fd       	sbrc	r21, 7
     ca4:	90 58       	subi	r25, 0x80	; 128
     ca6:	44 0f       	add	r20, r20
     ca8:	55 1f       	adc	r21, r21
     caa:	59 f0       	breq	.+22     	; 0xcc2 <__fp_splitA+0x10>
     cac:	5f 3f       	cpi	r21, 0xFF	; 255
     cae:	71 f0       	breq	.+28     	; 0xccc <__fp_splitA+0x1a>
     cb0:	47 95       	ror	r20

00000cb2 <__fp_splitA>:
     cb2:	88 0f       	add	r24, r24
     cb4:	97 fb       	bst	r25, 7
     cb6:	99 1f       	adc	r25, r25
     cb8:	61 f0       	breq	.+24     	; 0xcd2 <__fp_splitA+0x20>
     cba:	9f 3f       	cpi	r25, 0xFF	; 255
     cbc:	79 f0       	breq	.+30     	; 0xcdc <__fp_splitA+0x2a>
     cbe:	87 95       	ror	r24
     cc0:	08 95       	ret
     cc2:	12 16       	cp	r1, r18
     cc4:	13 06       	cpc	r1, r19
     cc6:	14 06       	cpc	r1, r20
     cc8:	55 1f       	adc	r21, r21
     cca:	f2 cf       	rjmp	.-28     	; 0xcb0 <__fp_split3+0xe>
     ccc:	46 95       	lsr	r20
     cce:	f1 df       	rcall	.-30     	; 0xcb2 <__fp_splitA>
     cd0:	08 c0       	rjmp	.+16     	; 0xce2 <__fp_splitA+0x30>
     cd2:	16 16       	cp	r1, r22
     cd4:	17 06       	cpc	r1, r23
     cd6:	18 06       	cpc	r1, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	f1 cf       	rjmp	.-30     	; 0xcbe <__fp_splitA+0xc>
     cdc:	86 95       	lsr	r24
     cde:	71 05       	cpc	r23, r1
     ce0:	61 05       	cpc	r22, r1
     ce2:	08 94       	sec
     ce4:	08 95       	ret

00000ce6 <__fp_zero>:
     ce6:	e8 94       	clt

00000ce8 <__fp_szero>:
     ce8:	bb 27       	eor	r27, r27
     cea:	66 27       	eor	r22, r22
     cec:	77 27       	eor	r23, r23
     cee:	cb 01       	movw	r24, r22
     cf0:	97 f9       	bld	r25, 7
     cf2:	08 95       	ret

00000cf4 <__gesf2>:
     cf4:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_cmp>
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <__gesf2+0x8>
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	08 95       	ret

00000cfe <__mulsf3>:
     cfe:	0e 94 92 06 	call	0xd24	; 0xd24 <__mulsf3x>
     d02:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_round>
     d06:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_pscA>
     d0a:	38 f0       	brcs	.+14     	; 0xd1a <__mulsf3+0x1c>
     d0c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_pscB>
     d10:	20 f0       	brcs	.+8      	; 0xd1a <__mulsf3+0x1c>
     d12:	95 23       	and	r25, r21
     d14:	11 f0       	breq	.+4      	; 0xd1a <__mulsf3+0x1c>
     d16:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_inf>
     d1a:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_nan>
     d1e:	11 24       	eor	r1, r1
     d20:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_szero>

00000d24 <__mulsf3x>:
     d24:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_split3>
     d28:	70 f3       	brcs	.-36     	; 0xd06 <__mulsf3+0x8>

00000d2a <__mulsf3_pse>:
     d2a:	95 9f       	mul	r25, r21
     d2c:	c1 f3       	breq	.-16     	; 0xd1e <__mulsf3+0x20>
     d2e:	95 0f       	add	r25, r21
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	55 1f       	adc	r21, r21
     d34:	62 9f       	mul	r22, r18
     d36:	f0 01       	movw	r30, r0
     d38:	72 9f       	mul	r23, r18
     d3a:	bb 27       	eor	r27, r27
     d3c:	f0 0d       	add	r31, r0
     d3e:	b1 1d       	adc	r27, r1
     d40:	63 9f       	mul	r22, r19
     d42:	aa 27       	eor	r26, r26
     d44:	f0 0d       	add	r31, r0
     d46:	b1 1d       	adc	r27, r1
     d48:	aa 1f       	adc	r26, r26
     d4a:	64 9f       	mul	r22, r20
     d4c:	66 27       	eor	r22, r22
     d4e:	b0 0d       	add	r27, r0
     d50:	a1 1d       	adc	r26, r1
     d52:	66 1f       	adc	r22, r22
     d54:	82 9f       	mul	r24, r18
     d56:	22 27       	eor	r18, r18
     d58:	b0 0d       	add	r27, r0
     d5a:	a1 1d       	adc	r26, r1
     d5c:	62 1f       	adc	r22, r18
     d5e:	73 9f       	mul	r23, r19
     d60:	b0 0d       	add	r27, r0
     d62:	a1 1d       	adc	r26, r1
     d64:	62 1f       	adc	r22, r18
     d66:	83 9f       	mul	r24, r19
     d68:	a0 0d       	add	r26, r0
     d6a:	61 1d       	adc	r22, r1
     d6c:	22 1f       	adc	r18, r18
     d6e:	74 9f       	mul	r23, r20
     d70:	33 27       	eor	r19, r19
     d72:	a0 0d       	add	r26, r0
     d74:	61 1d       	adc	r22, r1
     d76:	23 1f       	adc	r18, r19
     d78:	84 9f       	mul	r24, r20
     d7a:	60 0d       	add	r22, r0
     d7c:	21 1d       	adc	r18, r1
     d7e:	82 2f       	mov	r24, r18
     d80:	76 2f       	mov	r23, r22
     d82:	6a 2f       	mov	r22, r26
     d84:	11 24       	eor	r1, r1
     d86:	9f 57       	subi	r25, 0x7F	; 127
     d88:	50 40       	sbci	r21, 0x00	; 0
     d8a:	9a f0       	brmi	.+38     	; 0xdb2 <__mulsf3_pse+0x88>
     d8c:	f1 f0       	breq	.+60     	; 0xdca <__mulsf3_pse+0xa0>
     d8e:	88 23       	and	r24, r24
     d90:	4a f0       	brmi	.+18     	; 0xda4 <__mulsf3_pse+0x7a>
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	bb 1f       	adc	r27, r27
     d98:	66 1f       	adc	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	91 50       	subi	r25, 0x01	; 1
     da0:	50 40       	sbci	r21, 0x00	; 0
     da2:	a9 f7       	brne	.-22     	; 0xd8e <__mulsf3_pse+0x64>
     da4:	9e 3f       	cpi	r25, 0xFE	; 254
     da6:	51 05       	cpc	r21, r1
     da8:	80 f0       	brcs	.+32     	; 0xdca <__mulsf3_pse+0xa0>
     daa:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_inf>
     dae:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_szero>
     db2:	5f 3f       	cpi	r21, 0xFF	; 255
     db4:	e4 f3       	brlt	.-8      	; 0xdae <__mulsf3_pse+0x84>
     db6:	98 3e       	cpi	r25, 0xE8	; 232
     db8:	d4 f3       	brlt	.-12     	; 0xdae <__mulsf3_pse+0x84>
     dba:	86 95       	lsr	r24
     dbc:	77 95       	ror	r23
     dbe:	67 95       	ror	r22
     dc0:	b7 95       	ror	r27
     dc2:	f7 95       	ror	r31
     dc4:	e7 95       	ror	r30
     dc6:	9f 5f       	subi	r25, 0xFF	; 255
     dc8:	c1 f7       	brne	.-16     	; 0xdba <__mulsf3_pse+0x90>
     dca:	fe 2b       	or	r31, r30
     dcc:	88 0f       	add	r24, r24
     dce:	91 1d       	adc	r25, r1
     dd0:	96 95       	lsr	r25
     dd2:	87 95       	ror	r24
     dd4:	97 f9       	bld	r25, 7
     dd6:	08 95       	ret

00000dd8 <sin>:
     dd8:	9f 93       	push	r25
     dda:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_rempio2>
     dde:	0f 90       	pop	r0
     de0:	07 fc       	sbrc	r0, 7
     de2:	ee 5f       	subi	r30, 0xFE	; 254
     de4:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_sinus>

00000de8 <__fp_cmp>:
     de8:	99 0f       	add	r25, r25
     dea:	00 08       	sbc	r0, r0
     dec:	55 0f       	add	r21, r21
     dee:	aa 0b       	sbc	r26, r26
     df0:	e0 e8       	ldi	r30, 0x80	; 128
     df2:	fe ef       	ldi	r31, 0xFE	; 254
     df4:	16 16       	cp	r1, r22
     df6:	17 06       	cpc	r1, r23
     df8:	e8 07       	cpc	r30, r24
     dfa:	f9 07       	cpc	r31, r25
     dfc:	c0 f0       	brcs	.+48     	; 0xe2e <__fp_cmp+0x46>
     dfe:	12 16       	cp	r1, r18
     e00:	13 06       	cpc	r1, r19
     e02:	e4 07       	cpc	r30, r20
     e04:	f5 07       	cpc	r31, r21
     e06:	98 f0       	brcs	.+38     	; 0xe2e <__fp_cmp+0x46>
     e08:	62 1b       	sub	r22, r18
     e0a:	73 0b       	sbc	r23, r19
     e0c:	84 0b       	sbc	r24, r20
     e0e:	95 0b       	sbc	r25, r21
     e10:	39 f4       	brne	.+14     	; 0xe20 <__fp_cmp+0x38>
     e12:	0a 26       	eor	r0, r26
     e14:	61 f0       	breq	.+24     	; 0xe2e <__fp_cmp+0x46>
     e16:	23 2b       	or	r18, r19
     e18:	24 2b       	or	r18, r20
     e1a:	25 2b       	or	r18, r21
     e1c:	21 f4       	brne	.+8      	; 0xe26 <__fp_cmp+0x3e>
     e1e:	08 95       	ret
     e20:	0a 26       	eor	r0, r26
     e22:	09 f4       	brne	.+2      	; 0xe26 <__fp_cmp+0x3e>
     e24:	a1 40       	sbci	r26, 0x01	; 1
     e26:	a6 95       	lsr	r26
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	81 1d       	adc	r24, r1
     e2c:	81 1d       	adc	r24, r1
     e2e:	08 95       	ret

00000e30 <__fp_mpack>:
     e30:	9f 3f       	cpi	r25, 0xFF	; 255
     e32:	31 f0       	breq	.+12     	; 0xe40 <__fp_mpack_finite+0xc>

00000e34 <__fp_mpack_finite>:
     e34:	91 50       	subi	r25, 0x01	; 1
     e36:	20 f4       	brcc	.+8      	; 0xe40 <__fp_mpack_finite+0xc>
     e38:	87 95       	ror	r24
     e3a:	77 95       	ror	r23
     e3c:	67 95       	ror	r22
     e3e:	b7 95       	ror	r27
     e40:	88 0f       	add	r24, r24
     e42:	91 1d       	adc	r25, r1
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	97 f9       	bld	r25, 7
     e4a:	08 95       	ret

00000e4c <__fp_powsodd>:
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	7f 93       	push	r23
     e52:	6f 93       	push	r22
     e54:	ff 93       	push	r31
     e56:	ef 93       	push	r30
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3>
     e60:	ef 91       	pop	r30
     e62:	ff 91       	pop	r31
     e64:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fp_powser>
     e68:	2f 91       	pop	r18
     e6a:	3f 91       	pop	r19
     e6c:	4f 91       	pop	r20
     e6e:	5f 91       	pop	r21
     e70:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__mulsf3>

00000e74 <__fp_powser>:
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	1f 93       	push	r17
     e7a:	0f 93       	push	r16
     e7c:	ff 92       	push	r15
     e7e:	ef 92       	push	r14
     e80:	df 92       	push	r13
     e82:	7b 01       	movw	r14, r22
     e84:	8c 01       	movw	r16, r24
     e86:	68 94       	set
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <__fp_powser+0x22>
     e8a:	da 2e       	mov	r13, r26
     e8c:	ef 01       	movw	r28, r30
     e8e:	0e 94 92 06 	call	0xd24	; 0xd24 <__mulsf3x>
     e92:	fe 01       	movw	r30, r28
     e94:	e8 94       	clt
     e96:	a5 91       	lpm	r26, Z+
     e98:	25 91       	lpm	r18, Z+
     e9a:	35 91       	lpm	r19, Z+
     e9c:	45 91       	lpm	r20, Z+
     e9e:	55 91       	lpm	r21, Z+
     ea0:	a6 f3       	brts	.-24     	; 0xe8a <__fp_powser+0x16>
     ea2:	ef 01       	movw	r28, r30
     ea4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__addsf3x>
     ea8:	fe 01       	movw	r30, r28
     eaa:	97 01       	movw	r18, r14
     eac:	a8 01       	movw	r20, r16
     eae:	da 94       	dec	r13
     eb0:	69 f7       	brne	.-38     	; 0xe8c <__fp_powser+0x18>
     eb2:	df 90       	pop	r13
     eb4:	ef 90       	pop	r14
     eb6:	ff 90       	pop	r15
     eb8:	0f 91       	pop	r16
     eba:	1f 91       	pop	r17
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <malloc>:
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	91 05       	cpc	r25, r1
     ece:	10 f4       	brcc	.+4      	; 0xed4 <malloc+0x12>
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <__flp>
     ed8:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <__flp+0x1>
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	a0 e0       	ldi	r26, 0x00	; 0
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	30 97       	sbiw	r30, 0x00	; 0
     ee6:	19 f1       	breq	.+70     	; 0xf2e <malloc+0x6c>
     ee8:	40 81       	ld	r20, Z
     eea:	51 81       	ldd	r21, Z+1	; 0x01
     eec:	02 81       	ldd	r16, Z+2	; 0x02
     eee:	13 81       	ldd	r17, Z+3	; 0x03
     ef0:	48 17       	cp	r20, r24
     ef2:	59 07       	cpc	r21, r25
     ef4:	c8 f0       	brcs	.+50     	; 0xf28 <malloc+0x66>
     ef6:	84 17       	cp	r24, r20
     ef8:	95 07       	cpc	r25, r21
     efa:	69 f4       	brne	.+26     	; 0xf16 <malloc+0x54>
     efc:	10 97       	sbiw	r26, 0x00	; 0
     efe:	31 f0       	breq	.+12     	; 0xf0c <malloc+0x4a>
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	0c 93       	st	X, r16
     f04:	12 97       	sbiw	r26, 0x02	; 2
     f06:	13 96       	adiw	r26, 0x03	; 3
     f08:	1c 93       	st	X, r17
     f0a:	27 c0       	rjmp	.+78     	; 0xf5a <malloc+0x98>
     f0c:	00 93 12 20 	sts	0x2012, r16	; 0x802012 <__flp>
     f10:	10 93 13 20 	sts	0x2013, r17	; 0x802013 <__flp+0x1>
     f14:	22 c0       	rjmp	.+68     	; 0xf5a <malloc+0x98>
     f16:	21 15       	cp	r18, r1
     f18:	31 05       	cpc	r19, r1
     f1a:	19 f0       	breq	.+6      	; 0xf22 <malloc+0x60>
     f1c:	42 17       	cp	r20, r18
     f1e:	53 07       	cpc	r21, r19
     f20:	18 f4       	brcc	.+6      	; 0xf28 <malloc+0x66>
     f22:	9a 01       	movw	r18, r20
     f24:	bd 01       	movw	r22, r26
     f26:	ef 01       	movw	r28, r30
     f28:	df 01       	movw	r26, r30
     f2a:	f8 01       	movw	r30, r16
     f2c:	db cf       	rjmp	.-74     	; 0xee4 <malloc+0x22>
     f2e:	21 15       	cp	r18, r1
     f30:	31 05       	cpc	r19, r1
     f32:	f9 f0       	breq	.+62     	; 0xf72 <malloc+0xb0>
     f34:	28 1b       	sub	r18, r24
     f36:	39 0b       	sbc	r19, r25
     f38:	24 30       	cpi	r18, 0x04	; 4
     f3a:	31 05       	cpc	r19, r1
     f3c:	80 f4       	brcc	.+32     	; 0xf5e <malloc+0x9c>
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	61 15       	cp	r22, r1
     f44:	71 05       	cpc	r23, r1
     f46:	21 f0       	breq	.+8      	; 0xf50 <malloc+0x8e>
     f48:	fb 01       	movw	r30, r22
     f4a:	82 83       	std	Z+2, r24	; 0x02
     f4c:	93 83       	std	Z+3, r25	; 0x03
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <malloc+0x96>
     f50:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__flp>
     f54:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <__flp+0x1>
     f58:	fe 01       	movw	r30, r28
     f5a:	32 96       	adiw	r30, 0x02	; 2
     f5c:	44 c0       	rjmp	.+136    	; 0xfe6 <malloc+0x124>
     f5e:	fe 01       	movw	r30, r28
     f60:	e2 0f       	add	r30, r18
     f62:	f3 1f       	adc	r31, r19
     f64:	81 93       	st	Z+, r24
     f66:	91 93       	st	Z+, r25
     f68:	22 50       	subi	r18, 0x02	; 2
     f6a:	31 09       	sbc	r19, r1
     f6c:	28 83       	st	Y, r18
     f6e:	39 83       	std	Y+1, r19	; 0x01
     f70:	3a c0       	rjmp	.+116    	; 0xfe6 <malloc+0x124>
     f72:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
     f76:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
     f7a:	23 2b       	or	r18, r19
     f7c:	41 f4       	brne	.+16     	; 0xf8e <malloc+0xcc>
     f7e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
     f82:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
     f86:	20 93 10 20 	sts	0x2010, r18	; 0x802010 <__brkval>
     f8a:	30 93 11 20 	sts	0x2011, r19	; 0x802011 <__brkval+0x1>
     f8e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     f92:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     f96:	21 15       	cp	r18, r1
     f98:	31 05       	cpc	r19, r1
     f9a:	41 f4       	brne	.+16     	; 0xfac <malloc+0xea>
     f9c:	2d b7       	in	r18, 0x3d	; 61
     f9e:	3e b7       	in	r19, 0x3e	; 62
     fa0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
     fa4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
     fa8:	24 1b       	sub	r18, r20
     faa:	35 0b       	sbc	r19, r21
     fac:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <__brkval>
     fb0:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <__brkval+0x1>
     fb4:	e2 17       	cp	r30, r18
     fb6:	f3 07       	cpc	r31, r19
     fb8:	a0 f4       	brcc	.+40     	; 0xfe2 <malloc+0x120>
     fba:	2e 1b       	sub	r18, r30
     fbc:	3f 0b       	sbc	r19, r31
     fbe:	28 17       	cp	r18, r24
     fc0:	39 07       	cpc	r19, r25
     fc2:	78 f0       	brcs	.+30     	; 0xfe2 <malloc+0x120>
     fc4:	ac 01       	movw	r20, r24
     fc6:	4e 5f       	subi	r20, 0xFE	; 254
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	24 17       	cp	r18, r20
     fcc:	35 07       	cpc	r19, r21
     fce:	48 f0       	brcs	.+18     	; 0xfe2 <malloc+0x120>
     fd0:	4e 0f       	add	r20, r30
     fd2:	5f 1f       	adc	r21, r31
     fd4:	40 93 10 20 	sts	0x2010, r20	; 0x802010 <__brkval>
     fd8:	50 93 11 20 	sts	0x2011, r21	; 0x802011 <__brkval+0x1>
     fdc:	81 93       	st	Z+, r24
     fde:	91 93       	st	Z+, r25
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <malloc+0x124>
     fe2:	e0 e0       	ldi	r30, 0x00	; 0
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	cf 01       	movw	r24, r30
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <free>:
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	09 f4       	brne	.+2      	; 0xffc <free+0xa>
     ffa:	81 c0       	rjmp	.+258    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
     ffc:	fc 01       	movw	r30, r24
     ffe:	32 97       	sbiw	r30, 0x02	; 2
    1000:	12 82       	std	Z+2, r1	; 0x02
    1002:	13 82       	std	Z+3, r1	; 0x03
    1004:	a0 91 12 20 	lds	r26, 0x2012	; 0x802012 <__flp>
    1008:	b0 91 13 20 	lds	r27, 0x2013	; 0x802013 <__flp+0x1>
    100c:	10 97       	sbiw	r26, 0x00	; 0
    100e:	81 f4       	brne	.+32     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    1010:	20 81       	ld	r18, Z
    1012:	31 81       	ldd	r19, Z+1	; 0x01
    1014:	82 0f       	add	r24, r18
    1016:	93 1f       	adc	r25, r19
    1018:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    101c:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    1020:	28 17       	cp	r18, r24
    1022:	39 07       	cpc	r19, r25
    1024:	51 f5       	brne	.+84     	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1026:	e0 93 10 20 	sts	0x2010, r30	; 0x802010 <__brkval>
    102a:	f0 93 11 20 	sts	0x2011, r31	; 0x802011 <__brkval+0x1>
    102e:	67 c0       	rjmp	.+206    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
    1030:	ed 01       	movw	r28, r26
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	ce 17       	cp	r28, r30
    1038:	df 07       	cpc	r29, r31
    103a:	40 f4       	brcc	.+16     	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
    103c:	4a 81       	ldd	r20, Y+2	; 0x02
    103e:	5b 81       	ldd	r21, Y+3	; 0x03
    1040:	9e 01       	movw	r18, r28
    1042:	41 15       	cp	r20, r1
    1044:	51 05       	cpc	r21, r1
    1046:	f1 f0       	breq	.+60     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    1048:	ea 01       	movw	r28, r20
    104a:	f5 cf       	rjmp	.-22     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    104c:	c2 83       	std	Z+2, r28	; 0x02
    104e:	d3 83       	std	Z+3, r29	; 0x03
    1050:	40 81       	ld	r20, Z
    1052:	51 81       	ldd	r21, Z+1	; 0x01
    1054:	84 0f       	add	r24, r20
    1056:	95 1f       	adc	r25, r21
    1058:	c8 17       	cp	r28, r24
    105a:	d9 07       	cpc	r29, r25
    105c:	59 f4       	brne	.+22     	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    105e:	88 81       	ld	r24, Y
    1060:	99 81       	ldd	r25, Y+1	; 0x01
    1062:	84 0f       	add	r24, r20
    1064:	95 1f       	adc	r25, r21
    1066:	02 96       	adiw	r24, 0x02	; 2
    1068:	80 83       	st	Z, r24
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	82 83       	std	Z+2, r24	; 0x02
    1072:	93 83       	std	Z+3, r25	; 0x03
    1074:	21 15       	cp	r18, r1
    1076:	31 05       	cpc	r19, r1
    1078:	29 f4       	brne	.+10     	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    107a:	e0 93 12 20 	sts	0x2012, r30	; 0x802012 <__flp>
    107e:	f0 93 13 20 	sts	0x2013, r31	; 0x802013 <__flp+0x1>
    1082:	3d c0       	rjmp	.+122    	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
    1084:	e9 01       	movw	r28, r18
    1086:	ea 83       	std	Y+2, r30	; 0x02
    1088:	fb 83       	std	Y+3, r31	; 0x03
    108a:	49 91       	ld	r20, Y+
    108c:	59 91       	ld	r21, Y+
    108e:	c4 0f       	add	r28, r20
    1090:	d5 1f       	adc	r29, r21
    1092:	ec 17       	cp	r30, r28
    1094:	fd 07       	cpc	r31, r29
    1096:	61 f4       	brne	.+24     	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	84 0f       	add	r24, r20
    109e:	95 1f       	adc	r25, r21
    10a0:	02 96       	adiw	r24, 0x02	; 2
    10a2:	e9 01       	movw	r28, r18
    10a4:	88 83       	st	Y, r24
    10a6:	99 83       	std	Y+1, r25	; 0x01
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	8a 83       	std	Y+2, r24	; 0x02
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	e0 e0       	ldi	r30, 0x00	; 0
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	12 96       	adiw	r26, 0x02	; 2
    10b6:	8d 91       	ld	r24, X+
    10b8:	9c 91       	ld	r25, X
    10ba:	13 97       	sbiw	r26, 0x03	; 3
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	19 f0       	breq	.+6      	; 0x10c6 <__EEPROM_REGION_LENGTH__+0xc6>
    10c0:	fd 01       	movw	r30, r26
    10c2:	dc 01       	movw	r26, r24
    10c4:	f7 cf       	rjmp	.-18     	; 0x10b4 <__EEPROM_REGION_LENGTH__+0xb4>
    10c6:	8d 91       	ld	r24, X+
    10c8:	9c 91       	ld	r25, X
    10ca:	11 97       	sbiw	r26, 0x01	; 1
    10cc:	9d 01       	movw	r18, r26
    10ce:	2e 5f       	subi	r18, 0xFE	; 254
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    10da:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    10de:	28 17       	cp	r18, r24
    10e0:	39 07       	cpc	r19, r25
    10e2:	69 f4       	brne	.+26     	; 0x10fe <__EEPROM_REGION_LENGTH__+0xfe>
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	29 f4       	brne	.+10     	; 0x10f2 <__EEPROM_REGION_LENGTH__+0xf2>
    10e8:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <__flp>
    10ec:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <__flp+0x1>
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    10f2:	12 82       	std	Z+2, r1	; 0x02
    10f4:	13 82       	std	Z+3, r1	; 0x03
    10f6:	a0 93 10 20 	sts	0x2010, r26	; 0x802010 <__brkval>
    10fa:	b0 93 11 20 	sts	0x2011, r27	; 0x802011 <__brkval+0x1>
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <_exit>:
    1104:	f8 94       	cli

00001106 <__stop_program>:
    1106:	ff cf       	rjmp	.-2      	; 0x1106 <__stop_program>
