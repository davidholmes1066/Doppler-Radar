
Radar_ATXM256A3U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  000017ae  00001842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00802006  00802006  00001848  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cb3  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003987  00000000  00000000  000076db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc9  00000000  00000000  0000b062  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  0000c02c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032b5  00000000  00000000  0000c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000114e  00000000  00000000  0000f859  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000109a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__ctors_end>
       4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      10:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      14:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      18:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      1c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      20:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      24:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      28:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      30:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      34:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      38:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      3c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      40:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      44:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      4c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      50:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      54:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      58:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      5c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      60:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      68:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      6c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      70:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      7c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      80:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      84:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      90:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      94:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      9c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      bc:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_47>
      c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      fc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     100:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     104:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     108:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     10c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     110:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     114:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     118:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     11c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     120:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     124:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     128:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     12c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     130:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     134:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     138:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     13c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     140:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     144:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     148:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     14c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     150:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     154:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     158:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     15c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     160:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     164:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     168:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     16c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     170:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     174:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     178:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     17c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     180:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     184:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     188:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     18c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     190:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     194:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     198:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     19c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1bc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <init_Window+0x14>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	cd bf       	out	0x3d, r28	; 61
     222:	df e5       	ldi	r29, 0x5F	; 95
     224:	de bf       	out	0x3e, r29	; 62
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0c bf       	out	0x3c, r16	; 60

0000022a <__do_clear_bss>:
     22a:	20 e2       	ldi	r18, 0x20	; 32
     22c:	a6 e0       	ldi	r26, 0x06	; 6
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	a4 31       	cpi	r26, 0x14	; 20
     236:	b2 07       	cpc	r27, r18
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>

0000023a <__do_copy_data>:
     23a:	10 e2       	ldi	r17, 0x20	; 32
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e2       	ldi	r27, 0x20	; 32
     240:	ee ea       	ldi	r30, 0xAE	; 174
     242:	f7 e1       	ldi	r31, 0x17	; 23
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0b bf       	out	0x3b, r16	; 59
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x14>
     24a:	07 90       	elpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	a6 30       	cpi	r26, 0x06	; 6
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0x10>
     254:	0e 94 6e 07 	call	0xedc	; 0xedc <main>
     258:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <_exit>

0000025c <__bad_interrupt>:
     25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000260 <avr_log2>:
#include "avr_complex.h"



uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
     260:	ac 01       	movw	r20, r24
	uint16_t i = 0;
	uint16_t res = 1;
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	30 e0       	ldi	r19, 0x00	; 0



uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
	uint16_t i = 0;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t res = 1;
	
	while(res < input)
     26a:	03 c0       	rjmp	.+6      	; 0x272 <avr_log2+0x12>
	{
		res *= 2;
     26c:	22 0f       	add	r18, r18
     26e:	33 1f       	adc	r19, r19
		i++;
     270:	01 96       	adiw	r24, 0x01	; 1
uint16_t avr_log2(uint16_t input)										//quick dirty solution to math.h in avrgcc not having a log2()....
{
	uint16_t i = 0;
	uint16_t res = 1;
	
	while(res < input)
     272:	24 17       	cp	r18, r20
     274:	35 07       	cpc	r19, r21
     276:	d0 f3       	brcs	.-12     	; 0x26c <avr_log2+0xc>
		res *= 2;
		i++;
	}
	
	return i;															//return log2
}
     278:	08 95       	ret

0000027a <cf_multiply>:



complexfloat cf_multiply(complexfloat A, complexfloat B)
{
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	a8 97       	sbiw	r28, 0x28	; 40
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	29 8b       	std	Y+17, r18	; 0x11
     2a6:	3a 8b       	std	Y+18, r19	; 0x12
     2a8:	4b 8b       	std	Y+19, r20	; 0x13
     2aa:	5c 8b       	std	Y+20, r21	; 0x14
     2ac:	6d 8b       	std	Y+21, r22	; 0x15
     2ae:	7e 8b       	std	Y+22, r23	; 0x16
     2b0:	8f 8b       	std	Y+23, r24	; 0x17
     2b2:	98 8f       	std	Y+24, r25	; 0x18
     2b4:	a9 8e       	std	Y+25, r10	; 0x19
     2b6:	ba 8e       	std	Y+26, r11	; 0x1a
     2b8:	cb 8e       	std	Y+27, r12	; 0x1b
     2ba:	dc 8e       	std	Y+28, r13	; 0x1c
     2bc:	ed 8e       	std	Y+29, r14	; 0x1d
     2be:	fe 8e       	std	Y+30, r15	; 0x1e
     2c0:	0f 8f       	std	Y+31, r16	; 0x1f
     2c2:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;                                                     //Creates a complex struct to return

    C.im = (A.im * B.re) + (A.re * B.im);                               //Calculate complex part
     2c4:	c9 88       	ldd	r12, Y+17	; 0x11
     2c6:	da 88       	ldd	r13, Y+18	; 0x12
     2c8:	eb 88       	ldd	r14, Y+19	; 0x13
     2ca:	fc 88       	ldd	r15, Y+20	; 0x14
     2cc:	4d 8c       	ldd	r4, Y+29	; 0x1d
     2ce:	5e 8c       	ldd	r5, Y+30	; 0x1e
     2d0:	6f 8c       	ldd	r6, Y+31	; 0x1f
     2d2:	78 a0       	ldd	r7, Y+32	; 0x20
     2d4:	a3 01       	movw	r20, r6
     2d6:	92 01       	movw	r18, r4
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     2e0:	6d a3       	std	Y+37, r22	; 0x25
     2e2:	7e a3       	std	Y+38, r23	; 0x26
     2e4:	8f a3       	std	Y+39, r24	; 0x27
     2e6:	98 a7       	std	Y+40, r25	; 0x28
     2e8:	8d 89       	ldd	r24, Y+21	; 0x15
     2ea:	9e 89       	ldd	r25, Y+22	; 0x16
     2ec:	af 89       	ldd	r26, Y+23	; 0x17
     2ee:	b8 8d       	ldd	r27, Y+24	; 0x18
     2f0:	89 a3       	std	Y+33, r24	; 0x21
     2f2:	9a a3       	std	Y+34, r25	; 0x22
     2f4:	ab a3       	std	Y+35, r26	; 0x23
     2f6:	bc a3       	std	Y+36, r27	; 0x24
     2f8:	89 8c       	ldd	r8, Y+25	; 0x19
     2fa:	9a 8c       	ldd	r9, Y+26	; 0x1a
     2fc:	ab 8c       	ldd	r10, Y+27	; 0x1b
     2fe:	bc 8c       	ldd	r11, Y+28	; 0x1c
     300:	a5 01       	movw	r20, r10
     302:	94 01       	movw	r18, r8
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     30c:	9b 01       	movw	r18, r22
     30e:	ac 01       	movw	r20, r24
     310:	6d a1       	ldd	r22, Y+37	; 0x25
     312:	7e a1       	ldd	r23, Y+38	; 0x26
     314:	8f a1       	ldd	r24, Y+39	; 0x27
     316:	98 a5       	ldd	r25, Y+40	; 0x28
     318:	0e 94 2e 08 	call	0x105c	; 0x105c <__addsf3>
     31c:	69 87       	std	Y+9, r22	; 0x09
     31e:	7a 87       	std	Y+10, r23	; 0x0a
     320:	8b 87       	std	Y+11, r24	; 0x0b
     322:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = (-1*(A.im * B.im))+(A.re * B.re);                            //Calculate real part
     324:	29 a1       	ldd	r18, Y+33	; 0x21
     326:	3a a1       	ldd	r19, Y+34	; 0x22
     328:	4b a1       	ldd	r20, Y+35	; 0x23
     32a:	5c a1       	ldd	r21, Y+36	; 0x24
     32c:	c3 01       	movw	r24, r6
     32e:	b2 01       	movw	r22, r4
     330:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	a5 01       	movw	r20, r10
     33a:	94 01       	movw	r18, r8
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	c3 01       	movw	r24, r6
     34a:	b2 01       	movw	r22, r4
     34c:	0e 94 2d 08 	call	0x105a	; 0x105a <__subsf3>
     350:	6d 87       	std	Y+13, r22	; 0x0d
     352:	7e 87       	std	Y+14, r23	; 0x0e
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Returns complex struct
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	fe 01       	movw	r30, r28
     35c:	39 96       	adiw	r30, 0x09	; 9
     35e:	de 01       	movw	r26, r28
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	01 90       	ld	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	8a 95       	dec	r24
     368:	e1 f7       	brne	.-8      	; 0x362 <cf_multiply+0xe8>
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3a 81       	ldd	r19, Y+2	; 0x02
     36e:	4b 81       	ldd	r20, Y+3	; 0x03
     370:	5c 81       	ldd	r21, Y+4	; 0x04
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
}
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	a8 96       	adiw	r28, 0x28	; 40
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	6f 90       	pop	r6
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	08 95       	ret

000003a2 <cf_multiply_rf>:



complexfloat cf_multiply_rf(complexfloat A, float B)
{
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	68 97       	sbiw	r28, 0x18	; 24
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	29 8b       	std	Y+17, r18	; 0x11
     3be:	3a 8b       	std	Y+18, r19	; 0x12
     3c0:	4b 8b       	std	Y+19, r20	; 0x13
     3c2:	5c 8b       	std	Y+20, r21	; 0x14
     3c4:	6d 8b       	std	Y+21, r22	; 0x15
     3c6:	7e 8b       	std	Y+22, r23	; 0x16
     3c8:	8f 8b       	std	Y+23, r24	; 0x17
     3ca:	98 8f       	std	Y+24, r25	; 0x18
     3cc:	67 01       	movw	r12, r14
     3ce:	78 01       	movw	r14, r16
    complexfloat C;                                                     //Creates a complex struct to return

    C.im = A.im * B;                                                    //Calculates complex part
     3d0:	69 89       	ldd	r22, Y+17	; 0x11
     3d2:	7a 89       	ldd	r23, Y+18	; 0x12
     3d4:	8b 89       	ldd	r24, Y+19	; 0x13
     3d6:	9c 89       	ldd	r25, Y+20	; 0x14
     3d8:	a7 01       	movw	r20, r14
     3da:	96 01       	movw	r18, r12
     3dc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     3e0:	69 87       	std	Y+9, r22	; 0x09
     3e2:	7a 87       	std	Y+10, r23	; 0x0a
     3e4:	8b 87       	std	Y+11, r24	; 0x0b
     3e6:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re * B;                                                    //Calculates real part
     3e8:	2d 89       	ldd	r18, Y+21	; 0x15
     3ea:	3e 89       	ldd	r19, Y+22	; 0x16
     3ec:	4f 89       	ldd	r20, Y+23	; 0x17
     3ee:	58 8d       	ldd	r21, Y+24	; 0x18
     3f0:	c7 01       	movw	r24, r14
     3f2:	b6 01       	movw	r22, r12
     3f4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     3f8:	6d 87       	std	Y+13, r22	; 0x0d
     3fa:	7e 87       	std	Y+14, r23	; 0x0e
     3fc:	8f 87       	std	Y+15, r24	; 0x0f
     3fe:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Returns complex struct
     400:	88 e0       	ldi	r24, 0x08	; 8
     402:	fe 01       	movw	r30, r28
     404:	39 96       	adiw	r30, 0x09	; 9
     406:	de 01       	movw	r26, r28
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	01 90       	ld	r0, Z+
     40c:	0d 92       	st	X+, r0
     40e:	8a 95       	dec	r24
     410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	29 81       	ldd	r18, Y+1	; 0x01
     414:	3a 81       	ldd	r19, Y+2	; 0x02
     416:	4b 81       	ldd	r20, Y+3	; 0x03
     418:	5c 81       	ldd	r21, Y+4	; 0x04
     41a:	6d 81       	ldd	r22, Y+5	; 0x05
     41c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     41e:	8f 81       	ldd	r24, Y+7	; 0x07
     420:	98 85       	ldd	r25, Y+8	; 0x08
     422:	68 96       	adiw	r28, 0x18	; 24
     424:	cd bf       	out	0x3d, r28	; 61
     426:	de bf       	out	0x3e, r29	; 62
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <cf_exp>:



complexfloat cf_exp(float phi)
{
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	60 97       	sbiw	r28, 0x10	; 16
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	de bf       	out	0x3e, r29	; 62
     450:	6b 01       	movw	r12, r22
     452:	7c 01       	movw	r14, r24
    complexfloat C;                                                     //Creates a complex struct to return

    if(phi > 0)                                                         //positive exponent return cos(phi) + Isin(phi)
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	a9 01       	movw	r20, r18
     45a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__gesf2>
     45e:	18 16       	cp	r1, r24
     460:	8c f4       	brge	.+34     	; 0x484 <cf_exp+0x4a>
    {
        C.re = cosf(phi);
     462:	c7 01       	movw	r24, r14
     464:	b6 01       	movw	r22, r12
     466:	0e 94 9a 08 	call	0x1134	; 0x1134 <cos>
     46a:	6d 87       	std	Y+13, r22	; 0x0d
     46c:	7e 87       	std	Y+14, r23	; 0x0e
     46e:	8f 87       	std	Y+15, r24	; 0x0f
     470:	98 8b       	std	Y+16, r25	; 0x10
        C.im = sinf(phi);
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 de 09 	call	0x13bc	; 0x13bc <sin>
     47a:	69 87       	std	Y+9, r22	; 0x09
     47c:	7a 87       	std	Y+10, r23	; 0x0a
     47e:	8b 87       	std	Y+11, r24	; 0x0b
     480:	9c 87       	std	Y+12, r25	; 0x0c
     482:	10 c0       	rjmp	.+32     	; 0x4a4 <cf_exp+0x6a>
    }

    else                                                                //negative exponent return cos(phi) - Isin(phi)
    {
        C.re = cosf(phi);
     484:	c7 01       	movw	r24, r14
     486:	b6 01       	movw	r22, r12
     488:	0e 94 9a 08 	call	0x1134	; 0x1134 <cos>
     48c:	6d 87       	std	Y+13, r22	; 0x0d
     48e:	7e 87       	std	Y+14, r23	; 0x0e
     490:	8f 87       	std	Y+15, r24	; 0x0f
     492:	98 8b       	std	Y+16, r25	; 0x10
        C.im = (sinf(phi));
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	0e 94 de 09 	call	0x13bc	; 0x13bc <sin>
     49c:	69 87       	std	Y+9, r22	; 0x09
     49e:	7a 87       	std	Y+10, r23	; 0x0a
     4a0:	8b 87       	std	Y+11, r24	; 0x0b
     4a2:	9c 87       	std	Y+12, r25	; 0x0c
    }

    return C;                                                           //return complex exponent
     4a4:	88 e0       	ldi	r24, 0x08	; 8
     4a6:	fe 01       	movw	r30, r28
     4a8:	39 96       	adiw	r30, 0x09	; 9
     4aa:	de 01       	movw	r26, r28
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	01 90       	ld	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	8a 95       	dec	r24
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <cf_exp+0x74>
     4b6:	29 81       	ldd	r18, Y+1	; 0x01
     4b8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ba:	4b 81       	ldd	r20, Y+3	; 0x03
     4bc:	5c 81       	ldd	r21, Y+4	; 0x04
     4be:	6d 81       	ldd	r22, Y+5	; 0x05
     4c0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     4c2:	8f 81       	ldd	r24, Y+7	; 0x07
     4c4:	98 85       	ldd	r25, Y+8	; 0x08
     4c6:	60 96       	adiw	r28, 0x10	; 16
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	08 95       	ret

000004da <cf_plus>:



complexfloat cf_plus(complexfloat A, complexfloat B)
{
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	a0 97       	sbiw	r28, 0x20	; 32
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	29 8b       	std	Y+17, r18	; 0x11
     4fa:	3a 8b       	std	Y+18, r19	; 0x12
     4fc:	4b 8b       	std	Y+19, r20	; 0x13
     4fe:	5c 8b       	std	Y+20, r21	; 0x14
     500:	6d 8b       	std	Y+21, r22	; 0x15
     502:	7e 8b       	std	Y+22, r23	; 0x16
     504:	8f 8b       	std	Y+23, r24	; 0x17
     506:	98 8f       	std	Y+24, r25	; 0x18
     508:	a9 8e       	std	Y+25, r10	; 0x19
     50a:	ba 8e       	std	Y+26, r11	; 0x1a
     50c:	cb 8e       	std	Y+27, r12	; 0x1b
     50e:	dc 8e       	std	Y+28, r13	; 0x1c
     510:	ed 8e       	std	Y+29, r14	; 0x1d
     512:	fe 8e       	std	Y+30, r15	; 0x1e
     514:	0f 8f       	std	Y+31, r16	; 0x1f
     516:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;

    C.im = A.im + B.im;                                                 //Add complex components
     518:	69 89       	ldd	r22, Y+17	; 0x11
     51a:	7a 89       	ldd	r23, Y+18	; 0x12
     51c:	8b 89       	ldd	r24, Y+19	; 0x13
     51e:	9c 89       	ldd	r25, Y+20	; 0x14
     520:	29 8d       	ldd	r18, Y+25	; 0x19
     522:	3a 8d       	ldd	r19, Y+26	; 0x1a
     524:	4b 8d       	ldd	r20, Y+27	; 0x1b
     526:	5c 8d       	ldd	r21, Y+28	; 0x1c
     528:	0e 94 2e 08 	call	0x105c	; 0x105c <__addsf3>
     52c:	69 87       	std	Y+9, r22	; 0x09
     52e:	7a 87       	std	Y+10, r23	; 0x0a
     530:	8b 87       	std	Y+11, r24	; 0x0b
     532:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re + B.re;                                                 //Add real components
     534:	6d 89       	ldd	r22, Y+21	; 0x15
     536:	7e 89       	ldd	r23, Y+22	; 0x16
     538:	8f 89       	ldd	r24, Y+23	; 0x17
     53a:	98 8d       	ldd	r25, Y+24	; 0x18
     53c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     53e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     540:	4f 8d       	ldd	r20, Y+31	; 0x1f
     542:	58 a1       	ldd	r21, Y+32	; 0x20
     544:	0e 94 2e 08 	call	0x105c	; 0x105c <__addsf3>
     548:	6d 87       	std	Y+13, r22	; 0x0d
     54a:	7e 87       	std	Y+14, r23	; 0x0e
     54c:	8f 87       	std	Y+15, r24	; 0x0f
     54e:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Return complex struct
     550:	88 e0       	ldi	r24, 0x08	; 8
     552:	fe 01       	movw	r30, r28
     554:	39 96       	adiw	r30, 0x09	; 9
     556:	de 01       	movw	r26, r28
     558:	11 96       	adiw	r26, 0x01	; 1
     55a:	01 90       	ld	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	8a 95       	dec	r24
     560:	e1 f7       	brne	.-8      	; 0x55a <cf_plus+0x80>
     562:	29 81       	ldd	r18, Y+1	; 0x01
     564:	3a 81       	ldd	r19, Y+2	; 0x02
     566:	4b 81       	ldd	r20, Y+3	; 0x03
     568:	5c 81       	ldd	r21, Y+4	; 0x04
     56a:	6d 81       	ldd	r22, Y+5	; 0x05
     56c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	a0 96       	adiw	r28, 0x20	; 32
     574:	cd bf       	out	0x3d, r28	; 61
     576:	de bf       	out	0x3e, r29	; 62
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	bf 90       	pop	r11
     58a:	af 90       	pop	r10
     58c:	08 95       	ret

0000058e <cf_minus>:



complexfloat cf_minus(complexfloat A, complexfloat B)
{
     58e:	af 92       	push	r10
     590:	bf 92       	push	r11
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	a0 97       	sbiw	r28, 0x20	; 32
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	29 8b       	std	Y+17, r18	; 0x11
     5ae:	3a 8b       	std	Y+18, r19	; 0x12
     5b0:	4b 8b       	std	Y+19, r20	; 0x13
     5b2:	5c 8b       	std	Y+20, r21	; 0x14
     5b4:	6d 8b       	std	Y+21, r22	; 0x15
     5b6:	7e 8b       	std	Y+22, r23	; 0x16
     5b8:	8f 8b       	std	Y+23, r24	; 0x17
     5ba:	98 8f       	std	Y+24, r25	; 0x18
     5bc:	a9 8e       	std	Y+25, r10	; 0x19
     5be:	ba 8e       	std	Y+26, r11	; 0x1a
     5c0:	cb 8e       	std	Y+27, r12	; 0x1b
     5c2:	dc 8e       	std	Y+28, r13	; 0x1c
     5c4:	ed 8e       	std	Y+29, r14	; 0x1d
     5c6:	fe 8e       	std	Y+30, r15	; 0x1e
     5c8:	0f 8f       	std	Y+31, r16	; 0x1f
     5ca:	18 a3       	std	Y+32, r17	; 0x20
    complexfloat C;

    C.im = A.im - B.im;                                                 //Subtract complex components
     5cc:	69 89       	ldd	r22, Y+17	; 0x11
     5ce:	7a 89       	ldd	r23, Y+18	; 0x12
     5d0:	8b 89       	ldd	r24, Y+19	; 0x13
     5d2:	9c 89       	ldd	r25, Y+20	; 0x14
     5d4:	29 8d       	ldd	r18, Y+25	; 0x19
     5d6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5d8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     5da:	5c 8d       	ldd	r21, Y+28	; 0x1c
     5dc:	0e 94 2d 08 	call	0x105a	; 0x105a <__subsf3>
     5e0:	69 87       	std	Y+9, r22	; 0x09
     5e2:	7a 87       	std	Y+10, r23	; 0x0a
     5e4:	8b 87       	std	Y+11, r24	; 0x0b
     5e6:	9c 87       	std	Y+12, r25	; 0x0c
    C.re = A.re - B.re;                                                 //Subtract real components
     5e8:	6d 89       	ldd	r22, Y+21	; 0x15
     5ea:	7e 89       	ldd	r23, Y+22	; 0x16
     5ec:	8f 89       	ldd	r24, Y+23	; 0x17
     5ee:	98 8d       	ldd	r25, Y+24	; 0x18
     5f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     5f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     5f4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     5f6:	58 a1       	ldd	r21, Y+32	; 0x20
     5f8:	0e 94 2d 08 	call	0x105a	; 0x105a <__subsf3>
     5fc:	6d 87       	std	Y+13, r22	; 0x0d
     5fe:	7e 87       	std	Y+14, r23	; 0x0e
     600:	8f 87       	std	Y+15, r24	; 0x0f
     602:	98 8b       	std	Y+16, r25	; 0x10

    return C;                                                           //Return complex struct
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	fe 01       	movw	r30, r28
     608:	39 96       	adiw	r30, 0x09	; 9
     60a:	de 01       	movw	r26, r28
     60c:	11 96       	adiw	r26, 0x01	; 1
     60e:	01 90       	ld	r0, Z+
     610:	0d 92       	st	X+, r0
     612:	8a 95       	dec	r24
     614:	e1 f7       	brne	.-8      	; 0x60e <cf_minus+0x80>
     616:	29 81       	ldd	r18, Y+1	; 0x01
     618:	3a 81       	ldd	r19, Y+2	; 0x02
     61a:	4b 81       	ldd	r20, Y+3	; 0x03
     61c:	5c 81       	ldd	r21, Y+4	; 0x04
     61e:	6d 81       	ldd	r22, Y+5	; 0x05
     620:	7e 81       	ldd	r23, Y+6	; 0x06
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	98 85       	ldd	r25, Y+8	; 0x08
     626:	a0 96       	adiw	r28, 0x20	; 32
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	bf 90       	pop	r11
     63e:	af 90       	pop	r10
     640:	08 95       	ret

00000642 <calc_BitReversal>:
#include "avr_fft.h"

uint16_t calc_BitReversal(uint16_t Value)
{
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
	uint16_t Nr;                                                                                                //Number of bits to be reversed
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed
     648:	80 e8       	ldi	r24, 0x80	; 128
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     650:	fc 01       	movw	r30, r24
     652:	31 97       	sbiw	r30, 0x01	; 1

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     654:	bf 01       	movw	r22, r30
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0

uint16_t calc_BitReversal(uint16_t Value)
{
	uint16_t Nr;                                                                                                //Number of bits to be reversed
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     65e:	1c c0       	rjmp	.+56     	; 0x698 <calc_BitReversal+0x56>
	{
		Temp = (0x01<<i);                                                                                       //Creates bit mask to test bit i
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	04 2e       	mov	r0, r20
     666:	02 c0       	rjmp	.+4      	; 0x66c <calc_BitReversal+0x2a>
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	0a 94       	dec	r0
     66e:	e2 f7       	brpl	.-8      	; 0x668 <calc_BitReversal+0x26>
		RValue |= (((Value&Temp)>>i)<<j);                                                                       //Tests bit i and shifts to jth position (Bit reversal)
     670:	2c 23       	and	r18, r28
     672:	3d 23       	and	r19, r29
     674:	04 2e       	mov	r0, r20
     676:	02 c0       	rjmp	.+4      	; 0x67c <calc_BitReversal+0x3a>
     678:	36 95       	lsr	r19
     67a:	27 95       	ror	r18
     67c:	0a 94       	dec	r0
     67e:	e2 f7       	brpl	.-8      	; 0x678 <calc_BitReversal+0x36>
     680:	06 2e       	mov	r0, r22
     682:	02 c0       	rjmp	.+4      	; 0x688 <calc_BitReversal+0x46>
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <calc_BitReversal+0x42>
     68c:	82 2b       	or	r24, r18
     68e:	93 2b       	or	r25, r19
	uint16_t Temp;                                                                                              //Temporary storage
	uint16_t RValue = 0;                                                                                        //Bit reversed value of input

	Nr = (uint16_t) avr_log2(N)-1;                                                                              //Computes Nr of bits to be reversed

	for(uint16_t i = 0, j = Nr; i <= Nr; i++, j--)
     690:	4f 5f       	subi	r20, 0xFF	; 255
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	61 50       	subi	r22, 0x01	; 1
     696:	71 09       	sbc	r23, r1
     698:	e4 17       	cp	r30, r20
     69a:	f5 07       	cpc	r31, r21
     69c:	08 f7       	brcc	.-62     	; 0x660 <calc_BitReversal+0x1e>
		Temp = (0x01<<i);                                                                                       //Creates bit mask to test bit i
		RValue |= (((Value&Temp)>>i)<<j);                                                                       //Tests bit i and shifts to jth position (Bit reversal)
	}

	return RValue;                                                                                              //Returns the bit reversed Value
}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <init_BRLookup>:



uint16_t *init_BRLookup(void)
{
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
	uint16_t *Lookup_Reverse = malloc(sizeof(uint16_t)*N);														//Allocates memory for lookup array size(2*N)bytes
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <malloc>
     6b8:	7c 01       	movw	r14, r24

	for(uint16_t i = 0; i < N; i++)
     6ba:	c0 e0       	ldi	r28, 0x00	; 0
     6bc:	d0 e0       	ldi	r29, 0x00	; 0
     6be:	0c c0       	rjmp	.+24     	; 0x6d8 <init_BRLookup+0x34>
	{
		Lookup_Reverse[i] = calc_BitReversal(i);																//Calculates the bit reversal for the fft input order
     6c0:	8e 01       	movw	r16, r28
     6c2:	00 0f       	add	r16, r16
     6c4:	11 1f       	adc	r17, r17
     6c6:	0e 0d       	add	r16, r14
     6c8:	1f 1d       	adc	r17, r15
     6ca:	ce 01       	movw	r24, r28
     6cc:	0e 94 21 03 	call	0x642	; 0x642 <calc_BitReversal>
     6d0:	f8 01       	movw	r30, r16
     6d2:	80 83       	st	Z, r24
     6d4:	91 83       	std	Z+1, r25	; 0x01

uint16_t *init_BRLookup(void)
{
	uint16_t *Lookup_Reverse = malloc(sizeof(uint16_t)*N);														//Allocates memory for lookup array size(2*N)bytes

	for(uint16_t i = 0; i < N; i++)
     6d6:	21 96       	adiw	r28, 0x01	; 1
     6d8:	c0 38       	cpi	r28, 0x80	; 128
     6da:	d1 05       	cpc	r29, r1
     6dc:	88 f3       	brcs	.-30     	; 0x6c0 <init_BRLookup+0x1c>
	{
		Lookup_Reverse[i] = calc_BitReversal(i);																//Calculates the bit reversal for the fft input order
	}

	return Lookup_Reverse;
}
     6de:	c7 01       	movw	r24, r14
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <init_avr_Wlookup>:

complexfloat *init_avr_Wlookup(void)
{
     6ee:	6f 92       	push	r6
     6f0:	7f 92       	push	r7
     6f2:	8f 92       	push	r8
     6f4:	9f 92       	push	r9
     6f6:	af 92       	push	r10
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	60 97       	sbiw	r28, 0x10	; 16
     710:	cd bf       	out	0x3d, r28	; 61
     712:	de bf       	out	0x3e, r29	; 62
	complexfloat *W = malloc(sizeof(complexfloat)*(N/2));														//Allocate heap memory for the twiddle factors
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	0e 94 b4 0a 	call	0x1568	; 0x1568 <malloc>
     71c:	3c 01       	movw	r6, r24
	complexfloat TempW;                                                                                         //Create temporary variable
	TempW.re = 1, TempW.im = 0;                                                                                 //Set to value W^0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	a0 e8       	ldi	r26, 0x80	; 128
     724:	bf e3       	ldi	r27, 0x3F	; 63
     726:	8d 83       	std	Y+5, r24	; 0x05
     728:	9e 83       	std	Y+6, r25	; 0x06
     72a:	af 83       	std	Y+7, r26	; 0x07
     72c:	b8 87       	std	Y+8, r27	; 0x08
     72e:	19 82       	std	Y+1, r1	; 0x01
     730:	1a 82       	std	Y+2, r1	; 0x02
     732:	1b 82       	std	Y+3, r1	; 0x03
     734:	1c 82       	std	Y+4, r1	; 0x04
	complexfloat Wk = cf_exp((-2*M_PI)/N);																		//Value Wn^1
     736:	6b ed       	ldi	r22, 0xDB	; 219
     738:	7f e0       	ldi	r23, 0x0F	; 15
     73a:	89 e4       	ldi	r24, 0x49	; 73
     73c:	9d eb       	ldi	r25, 0xBD	; 189
     73e:	0e 94 1d 02 	call	0x43a	; 0x43a <cf_exp>
     742:	29 87       	std	Y+9, r18	; 0x09
     744:	3a 87       	std	Y+10, r19	; 0x0a
     746:	4b 87       	std	Y+11, r20	; 0x0b
     748:	5c 87       	std	Y+12, r21	; 0x0c
     74a:	6d 87       	std	Y+13, r22	; 0x0d
     74c:	7e 87       	std	Y+14, r23	; 0x0e
     74e:	8f 87       	std	Y+15, r24	; 0x0f
     750:	98 8b       	std	Y+16, r25	; 0x10

	for(uint16_t i = 0; i < (N/2); i++)
     752:	81 2c       	mov	r8, r1
     754:	91 2c       	mov	r9, r1
     756:	36 c0       	rjmp	.+108    	; 0x7c4 <init_avr_Wlookup+0xd6>
	{
		W[i].re = TempW.re;                                                                                     //Generate twiddle factors
     758:	f4 01       	movw	r30, r8
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	e6 0d       	add	r30, r6
     768:	f7 1d       	adc	r31, r7
     76a:	8d 81       	ldd	r24, Y+5	; 0x05
     76c:	9e 81       	ldd	r25, Y+6	; 0x06
     76e:	af 81       	ldd	r26, Y+7	; 0x07
     770:	b8 85       	ldd	r27, Y+8	; 0x08
     772:	84 83       	std	Z+4, r24	; 0x04
     774:	95 83       	std	Z+5, r25	; 0x05
     776:	a6 83       	std	Z+6, r26	; 0x06
     778:	b7 83       	std	Z+7, r27	; 0x07
		W[i].im = TempW.im;
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	9a 81       	ldd	r25, Y+2	; 0x02
     77e:	ab 81       	ldd	r26, Y+3	; 0x03
     780:	bc 81       	ldd	r27, Y+4	; 0x04
     782:	80 83       	st	Z, r24
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	a2 83       	std	Z+2, r26	; 0x02
     788:	b3 83       	std	Z+3, r27	; 0x03

		TempW = cf_multiply(TempW, Wk);																			//Update temporary variable (W^(i+1))
     78a:	a9 84       	ldd	r10, Y+9	; 0x09
     78c:	ba 84       	ldd	r11, Y+10	; 0x0a
     78e:	cb 84       	ldd	r12, Y+11	; 0x0b
     790:	dc 84       	ldd	r13, Y+12	; 0x0c
     792:	ed 84       	ldd	r14, Y+13	; 0x0d
     794:	fe 84       	ldd	r15, Y+14	; 0x0e
     796:	0f 85       	ldd	r16, Y+15	; 0x0f
     798:	18 89       	ldd	r17, Y+16	; 0x10
     79a:	29 81       	ldd	r18, Y+1	; 0x01
     79c:	3a 81       	ldd	r19, Y+2	; 0x02
     79e:	4b 81       	ldd	r20, Y+3	; 0x03
     7a0:	5c 81       	ldd	r21, Y+4	; 0x04
     7a2:	6d 81       	ldd	r22, Y+5	; 0x05
     7a4:	7e 81       	ldd	r23, Y+6	; 0x06
     7a6:	8f 81       	ldd	r24, Y+7	; 0x07
     7a8:	98 85       	ldd	r25, Y+8	; 0x08
     7aa:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     7ae:	29 83       	std	Y+1, r18	; 0x01
     7b0:	3a 83       	std	Y+2, r19	; 0x02
     7b2:	4b 83       	std	Y+3, r20	; 0x03
     7b4:	5c 83       	std	Y+4, r21	; 0x04
     7b6:	6d 83       	std	Y+5, r22	; 0x05
     7b8:	7e 83       	std	Y+6, r23	; 0x06
     7ba:	8f 83       	std	Y+7, r24	; 0x07
     7bc:	98 87       	std	Y+8, r25	; 0x08
	complexfloat *W = malloc(sizeof(complexfloat)*(N/2));														//Allocate heap memory for the twiddle factors
	complexfloat TempW;                                                                                         //Create temporary variable
	TempW.re = 1, TempW.im = 0;                                                                                 //Set to value W^0
	complexfloat Wk = cf_exp((-2*M_PI)/N);																		//Value Wn^1

	for(uint16_t i = 0; i < (N/2); i++)
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	88 1a       	sub	r8, r24
     7c2:	98 0a       	sbc	r9, r24
     7c4:	80 e4       	ldi	r24, 0x40	; 64
     7c6:	88 16       	cp	r8, r24
     7c8:	91 04       	cpc	r9, r1
     7ca:	30 f2       	brcs	.-116    	; 0x758 <init_avr_Wlookup+0x6a>

		TempW = cf_multiply(TempW, Wk);																			//Update temporary variable (W^(i+1))
	}

	return W;                                                                                                   //Return pointer to the complex struct containing twiddle factors
}
     7cc:	c3 01       	movw	r24, r6
     7ce:	60 96       	adiw	r28, 0x10	; 16
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	6f 90       	pop	r6
     7f0:	08 95       	ret

000007f2 <init_avr_fft>:



complexfloat *init_avr_fft(void)
{
	complexfloat *FFT_Array = malloc(sizeof(complexfloat)*N);													//Allocate heap memory 4*N bytes
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	94 e0       	ldi	r25, 0x04	; 4
     7f6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <malloc>
	return FFT_Array;                                                                                           //Returns pointer to allocated memory
}
     7fa:	08 95       	ret

000007fc <apply_avr_Window>:



void apply_avr_Window(complexfloat *FFT_Array, float *Window, uint16_t *Lookup_Reverse)
{
     7fc:	6f 92       	push	r6
     7fe:	7f 92       	push	r7
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	6c 01       	movw	r12, r24
     81a:	5b 01       	movw	r10, r22
     81c:	4a 01       	movw	r8, r20
	for(uint16_t i = 0; i < (N/2); i++)
     81e:	61 2c       	mov	r6, r1
     820:	71 2c       	mov	r7, r1
     822:	2f c0       	rjmp	.+94     	; 0x882 <apply_avr_Window+0x86>
	{
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
     824:	f3 01       	movw	r30, r6
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	e8 0d       	add	r30, r8
     82c:	f9 1d       	adc	r31, r9
     82e:	c0 81       	ld	r28, Z
     830:	d1 81       	ldd	r29, Z+1	; 0x01
     832:	cc 0f       	add	r28, r28
     834:	dd 1f       	adc	r29, r29
     836:	cc 0f       	add	r28, r28
     838:	dd 1f       	adc	r29, r29
     83a:	cc 0f       	add	r28, r28
     83c:	dd 1f       	adc	r29, r29
     83e:	f3 01       	movw	r30, r6
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	ea 0d       	add	r30, r10
     84a:	fb 1d       	adc	r31, r11
     84c:	e0 80       	ld	r14, Z
     84e:	f1 80       	ldd	r15, Z+1	; 0x01
     850:	02 81       	ldd	r16, Z+2	; 0x02
     852:	13 81       	ldd	r17, Z+3	; 0x03
     854:	cc 0d       	add	r28, r12
     856:	dd 1d       	adc	r29, r13
     858:	28 81       	ld	r18, Y
     85a:	39 81       	ldd	r19, Y+1	; 0x01
     85c:	4a 81       	ldd	r20, Y+2	; 0x02
     85e:	5b 81       	ldd	r21, Y+3	; 0x03
     860:	6c 81       	ldd	r22, Y+4	; 0x04
     862:	7d 81       	ldd	r23, Y+5	; 0x05
     864:	8e 81       	ldd	r24, Y+6	; 0x06
     866:	9f 81       	ldd	r25, Y+7	; 0x07
     868:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_multiply_rf>
     86c:	28 83       	st	Y, r18
     86e:	39 83       	std	Y+1, r19	; 0x01
     870:	4a 83       	std	Y+2, r20	; 0x02
     872:	5b 83       	std	Y+3, r21	; 0x03
     874:	6c 83       	std	Y+4, r22	; 0x04
     876:	7d 83       	std	Y+5, r23	; 0x05
     878:	8e 83       	std	Y+6, r24	; 0x06
     87a:	9f 83       	std	Y+7, r25	; 0x07



void apply_avr_Window(complexfloat *FFT_Array, float *Window, uint16_t *Lookup_Reverse)
{
	for(uint16_t i = 0; i < (N/2); i++)
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	68 1a       	sub	r6, r24
     880:	78 0a       	sbc	r7, r24
     882:	80 e4       	ldi	r24, 0x40	; 64
     884:	68 16       	cp	r6, r24
     886:	71 04       	cpc	r7, r1
     888:	68 f2       	brcs	.-102    	; 0x824 <apply_avr_Window+0x28>
     88a:	68 94       	set
     88c:	66 24       	eor	r6, r6
     88e:	66 f8       	bld	r6, 6
     890:	71 2c       	mov	r7, r1
     892:	35 c0       	rjmp	.+106    	; 0x8fe <apply_avr_Window+0x102>
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
	}

	for(uint16_t i = (N/2); i > 0; i--)
	{
		FFT_Array[Lookup_Reverse[N-i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[N-i]], Window[i-1]);			//Apply window to second half of samples
     894:	ee 27       	eor	r30, r30
     896:	ff 27       	eor	r31, r31
     898:	e6 19       	sub	r30, r6
     89a:	f7 09       	sbc	r31, r7
     89c:	ee 0f       	add	r30, r30
     89e:	ff 1f       	adc	r31, r31
     8a0:	e8 0d       	add	r30, r8
     8a2:	f9 1d       	adc	r31, r9
     8a4:	f3 95       	inc	r31
     8a6:	c0 81       	ld	r28, Z
     8a8:	d1 81       	ldd	r29, Z+1	; 0x01
     8aa:	cc 0f       	add	r28, r28
     8ac:	dd 1f       	adc	r29, r29
     8ae:	cc 0f       	add	r28, r28
     8b0:	dd 1f       	adc	r29, r29
     8b2:	cc 0f       	add	r28, r28
     8b4:	dd 1f       	adc	r29, r29
     8b6:	f3 01       	movw	r30, r6
     8b8:	e1 50       	subi	r30, 0x01	; 1
     8ba:	f0 4c       	sbci	r31, 0xC0	; 192
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	ea 0d       	add	r30, r10
     8c6:	fb 1d       	adc	r31, r11
     8c8:	e0 80       	ld	r14, Z
     8ca:	f1 80       	ldd	r15, Z+1	; 0x01
     8cc:	02 81       	ldd	r16, Z+2	; 0x02
     8ce:	13 81       	ldd	r17, Z+3	; 0x03
     8d0:	cc 0d       	add	r28, r12
     8d2:	dd 1d       	adc	r29, r13
     8d4:	28 81       	ld	r18, Y
     8d6:	39 81       	ldd	r19, Y+1	; 0x01
     8d8:	4a 81       	ldd	r20, Y+2	; 0x02
     8da:	5b 81       	ldd	r21, Y+3	; 0x03
     8dc:	6c 81       	ldd	r22, Y+4	; 0x04
     8de:	7d 81       	ldd	r23, Y+5	; 0x05
     8e0:	8e 81       	ldd	r24, Y+6	; 0x06
     8e2:	9f 81       	ldd	r25, Y+7	; 0x07
     8e4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <cf_multiply_rf>
     8e8:	28 83       	st	Y, r18
     8ea:	39 83       	std	Y+1, r19	; 0x01
     8ec:	4a 83       	std	Y+2, r20	; 0x02
     8ee:	5b 83       	std	Y+3, r21	; 0x03
     8f0:	6c 83       	std	Y+4, r22	; 0x04
     8f2:	7d 83       	std	Y+5, r23	; 0x05
     8f4:	8e 83       	std	Y+6, r24	; 0x06
     8f6:	9f 83       	std	Y+7, r25	; 0x07
	for(uint16_t i = 0; i < (N/2); i++)
	{
		FFT_Array[Lookup_Reverse[i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[i]], Window[i]);					//Apply window to first half of samples
	}

	for(uint16_t i = (N/2); i > 0; i--)
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	68 1a       	sub	r6, r24
     8fc:	71 08       	sbc	r7, r1
     8fe:	61 14       	cp	r6, r1
     900:	71 04       	cpc	r7, r1
     902:	41 f6       	brne	.-112    	; 0x894 <apply_avr_Window+0x98>
	{
		FFT_Array[Lookup_Reverse[N-i]] = cf_multiply_rf(FFT_Array[Lookup_Reverse[N-i]], Window[i-1]);			//Apply window to second half of samples
	}
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	bf 90       	pop	r11
     916:	af 90       	pop	r10
     918:	9f 90       	pop	r9
     91a:	8f 90       	pop	r8
     91c:	7f 90       	pop	r7
     91e:	6f 90       	pop	r6
     920:	08 95       	ret

00000922 <calc_avr_FFT>:



void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
     922:	2f 92       	push	r2
     924:	3f 92       	push	r3
     926:	4f 92       	push	r4
     928:	5f 92       	push	r5
     92a:	6f 92       	push	r6
     92c:	7f 92       	push	r7
     92e:	8f 92       	push	r8
     930:	9f 92       	push	r9
     932:	af 92       	push	r10
     934:	bf 92       	push	r11
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	62 97       	sbiw	r28, 0x12	; 18
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	de bf       	out	0x3e, r29	; 62
     950:	1c 01       	movw	r2, r24
     952:	6f 87       	std	Y+15, r22	; 0x0f
     954:	78 8b       	std	Y+16, r23	; 0x10
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     956:	19 8a       	std	Y+17, r1	; 0x11
     958:	1a 8a       	std	Y+18, r1	; 0x12

void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step
     95a:	22 e0       	ldi	r18, 0x02	; 2
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	29 87       	std	Y+9, r18	; 0x09
     960:	3a 87       	std	Y+10, r19	; 0x0a



void calc_avr_FFT(complexfloat* FFT_Array, complexfloat* W)
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
     962:	80 e4       	ldi	r24, 0x40	; 64
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	8d 87       	std	Y+13, r24	; 0x0d
     968:	9e 87       	std	Y+14, r25	; 0x0e
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     96a:	d4 c0       	rjmp	.+424    	; 0xb14 <calc_avr_FFT+0x1f2>
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
		{
			for(uint16_t k = 0; k < ((N/PCalc)/2); k++)                                                         //Calculation in one parallel
			{
				Temp = cf_multiply(FFT_Array[(CNr*j)+(k+(CNr/2))], W[k*((N/2)/(CNr/2))]);						//Calculates multiplication in butterfly
     96c:	80 e4       	ldi	r24, 0x40	; 64
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	69 84       	ldd	r6, Y+9	; 0x09
     972:	7a 84       	ldd	r7, Y+10	; 0x0a
     974:	76 94       	lsr	r7
     976:	67 94       	ror	r6
     978:	b3 01       	movw	r22, r6
     97a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__udivmodhi4>
     97e:	46 9e       	mul	r4, r22
     980:	d0 01       	movw	r26, r0
     982:	47 9e       	mul	r4, r23
     984:	b0 0d       	add	r27, r0
     986:	56 9e       	mul	r5, r22
     988:	b0 0d       	add	r27, r0
     98a:	11 24       	eor	r1, r1
     98c:	aa 0f       	add	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	aa 0f       	add	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	aa 0f       	add	r26, r26
     996:	bb 1f       	adc	r27, r27
     998:	ef 85       	ldd	r30, Y+15	; 0x0f
     99a:	f8 89       	ldd	r31, Y+16	; 0x10
     99c:	ae 0f       	add	r26, r30
     99e:	bf 1f       	adc	r27, r31
     9a0:	29 85       	ldd	r18, Y+9	; 0x09
     9a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     9a8:	28 9f       	mul	r18, r24
     9aa:	40 01       	movw	r8, r0
     9ac:	29 9f       	mul	r18, r25
     9ae:	90 0c       	add	r9, r0
     9b0:	38 9f       	mul	r19, r24
     9b2:	90 0c       	add	r9, r0
     9b4:	11 24       	eor	r1, r1
     9b6:	f2 01       	movw	r30, r4
     9b8:	e6 0d       	add	r30, r6
     9ba:	f7 1d       	adc	r31, r7
     9bc:	e8 0d       	add	r30, r8
     9be:	f9 1d       	adc	r31, r9
     9c0:	ee 0f       	add	r30, r30
     9c2:	ff 1f       	adc	r31, r31
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	ee 0f       	add	r30, r30
     9ca:	ff 1f       	adc	r31, r31
     9cc:	e2 0d       	add	r30, r2
     9ce:	f3 1d       	adc	r31, r3
     9d0:	ac 90       	ld	r10, X
     9d2:	11 96       	adiw	r26, 0x01	; 1
     9d4:	bc 90       	ld	r11, X
     9d6:	11 97       	sbiw	r26, 0x01	; 1
     9d8:	12 96       	adiw	r26, 0x02	; 2
     9da:	cc 90       	ld	r12, X
     9dc:	12 97       	sbiw	r26, 0x02	; 2
     9de:	13 96       	adiw	r26, 0x03	; 3
     9e0:	dc 90       	ld	r13, X
     9e2:	13 97       	sbiw	r26, 0x03	; 3
     9e4:	14 96       	adiw	r26, 0x04	; 4
     9e6:	ec 90       	ld	r14, X
     9e8:	14 97       	sbiw	r26, 0x04	; 4
     9ea:	15 96       	adiw	r26, 0x05	; 5
     9ec:	fc 90       	ld	r15, X
     9ee:	15 97       	sbiw	r26, 0x05	; 5
     9f0:	16 96       	adiw	r26, 0x06	; 6
     9f2:	0c 91       	ld	r16, X
     9f4:	16 97       	sbiw	r26, 0x06	; 6
     9f6:	17 96       	adiw	r26, 0x07	; 7
     9f8:	1c 91       	ld	r17, X
     9fa:	20 81       	ld	r18, Z
     9fc:	31 81       	ldd	r19, Z+1	; 0x01
     9fe:	42 81       	ldd	r20, Z+2	; 0x02
     a00:	53 81       	ldd	r21, Z+3	; 0x03
     a02:	64 81       	ldd	r22, Z+4	; 0x04
     a04:	75 81       	ldd	r23, Z+5	; 0x05
     a06:	86 81       	ldd	r24, Z+6	; 0x06
     a08:	97 81       	ldd	r25, Z+7	; 0x07
     a0a:	0e 94 3d 01 	call	0x27a	; 0x27a <cf_multiply>
     a0e:	29 83       	std	Y+1, r18	; 0x01
     a10:	3a 83       	std	Y+2, r19	; 0x02
     a12:	4b 83       	std	Y+3, r20	; 0x03
     a14:	5c 83       	std	Y+4, r21	; 0x04
     a16:	6d 83       	std	Y+5, r22	; 0x05
     a18:	7e 83       	std	Y+6, r23	; 0x06
     a1a:	8f 83       	std	Y+7, r24	; 0x07
     a1c:	98 87       	std	Y+8, r25	; 0x08
				FFT_Array[((j*CNr)+k)+(CNr/2)] = cf_minus(FFT_Array[(j*CNr)+k],Temp);							//Calculates and stores bottom of butterfly
     a1e:	84 0c       	add	r8, r4
     a20:	95 1c       	adc	r9, r5
     a22:	68 0c       	add	r6, r8
     a24:	79 1c       	adc	r7, r9
     a26:	66 0c       	add	r6, r6
     a28:	77 1c       	adc	r7, r7
     a2a:	66 0c       	add	r6, r6
     a2c:	77 1c       	adc	r7, r7
     a2e:	66 0c       	add	r6, r6
     a30:	77 1c       	adc	r7, r7
     a32:	62 0c       	add	r6, r2
     a34:	73 1c       	adc	r7, r3
     a36:	88 0c       	add	r8, r8
     a38:	99 1c       	adc	r9, r9
     a3a:	88 0c       	add	r8, r8
     a3c:	99 1c       	adc	r9, r9
     a3e:	88 0c       	add	r8, r8
     a40:	99 1c       	adc	r9, r9
     a42:	82 0c       	add	r8, r2
     a44:	93 1c       	adc	r9, r3
     a46:	a2 2e       	mov	r10, r18
     a48:	b3 2e       	mov	r11, r19
     a4a:	c4 2e       	mov	r12, r20
     a4c:	d5 2e       	mov	r13, r21
     a4e:	e6 2e       	mov	r14, r22
     a50:	f7 2e       	mov	r15, r23
     a52:	08 2f       	mov	r16, r24
     a54:	19 2f       	mov	r17, r25
     a56:	f4 01       	movw	r30, r8
     a58:	20 81       	ld	r18, Z
     a5a:	31 81       	ldd	r19, Z+1	; 0x01
     a5c:	42 81       	ldd	r20, Z+2	; 0x02
     a5e:	53 81       	ldd	r21, Z+3	; 0x03
     a60:	64 81       	ldd	r22, Z+4	; 0x04
     a62:	75 81       	ldd	r23, Z+5	; 0x05
     a64:	86 81       	ldd	r24, Z+6	; 0x06
     a66:	97 81       	ldd	r25, Z+7	; 0x07
     a68:	0e 94 c7 02 	call	0x58e	; 0x58e <cf_minus>
     a6c:	f3 01       	movw	r30, r6
     a6e:	20 83       	st	Z, r18
     a70:	31 83       	std	Z+1, r19	; 0x01
     a72:	42 83       	std	Z+2, r20	; 0x02
     a74:	53 83       	std	Z+3, r21	; 0x03
     a76:	64 83       	std	Z+4, r22	; 0x04
     a78:	75 83       	std	Z+5, r23	; 0x05
     a7a:	86 83       	std	Z+6, r24	; 0x06
     a7c:	97 83       	std	Z+7, r25	; 0x07
				FFT_Array[(j*CNr)+k] = cf_plus(FFT_Array[(j*CNr)+k],Temp);										//Calculates and stores top of butterfly
     a7e:	a9 80       	ldd	r10, Y+1	; 0x01
     a80:	ba 80       	ldd	r11, Y+2	; 0x02
     a82:	cb 80       	ldd	r12, Y+3	; 0x03
     a84:	dc 80       	ldd	r13, Y+4	; 0x04
     a86:	ed 80       	ldd	r14, Y+5	; 0x05
     a88:	fe 80       	ldd	r15, Y+6	; 0x06
     a8a:	0f 81       	ldd	r16, Y+7	; 0x07
     a8c:	18 85       	ldd	r17, Y+8	; 0x08
     a8e:	f4 01       	movw	r30, r8
     a90:	20 81       	ld	r18, Z
     a92:	31 81       	ldd	r19, Z+1	; 0x01
     a94:	42 81       	ldd	r20, Z+2	; 0x02
     a96:	53 81       	ldd	r21, Z+3	; 0x03
     a98:	64 81       	ldd	r22, Z+4	; 0x04
     a9a:	75 81       	ldd	r23, Z+5	; 0x05
     a9c:	86 81       	ldd	r24, Z+6	; 0x06
     a9e:	97 81       	ldd	r25, Z+7	; 0x07
     aa0:	0e 94 6d 02 	call	0x4da	; 0x4da <cf_plus>
     aa4:	f4 01       	movw	r30, r8
     aa6:	20 83       	st	Z, r18
     aa8:	31 83       	std	Z+1, r19	; 0x01
     aaa:	42 83       	std	Z+2, r20	; 0x02
     aac:	53 83       	std	Z+3, r21	; 0x03
     aae:	64 83       	std	Z+4, r22	; 0x04
     ab0:	75 83       	std	Z+5, r23	; 0x05
     ab2:	86 83       	std	Z+6, r24	; 0x06
     ab4:	97 83       	std	Z+7, r25	; 0x07

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
		{
			for(uint16_t k = 0; k < ((N/PCalc)/2); k++)                                                         //Calculation in one parallel
     ab6:	ff ef       	ldi	r31, 0xFF	; 255
     ab8:	4f 1a       	sub	r4, r31
     aba:	5f 0a       	sbc	r5, r31
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <calc_avr_FFT+0x1a0>
     abe:	41 2c       	mov	r4, r1
     ac0:	51 2c       	mov	r5, r1
     ac2:	80 e4       	ldi	r24, 0x40	; 64
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	6d 85       	ldd	r22, Y+13	; 0x0d
     ac8:	7e 85       	ldd	r23, Y+14	; 0x0e
     aca:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__udivmodhi4>
     ace:	46 16       	cp	r4, r22
     ad0:	57 06       	cpc	r5, r23
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <calc_avr_FFT+0x1b4>
     ad4:	4b cf       	rjmp	.-362    	; 0x96c <calc_avr_FFT+0x4a>
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
	{
		for(uint16_t j = 0; j < PCalc; j++)                                                                     //Parallel computation steps
     ad6:	2b 85       	ldd	r18, Y+11	; 0x0b
     ad8:	3c 85       	ldd	r19, Y+12	; 0x0c
     ada:	2f 5f       	subi	r18, 0xFF	; 255
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	2b 87       	std	Y+11, r18	; 0x0b
     ae0:	3c 87       	std	Y+12, r19	; 0x0c
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <calc_avr_FFT+0x1c6>
     ae4:	1b 86       	std	Y+11, r1	; 0x0b
     ae6:	1c 86       	std	Y+12, r1	; 0x0c
     ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aea:	9e 85       	ldd	r25, Y+14	; 0x0e
     aec:	eb 85       	ldd	r30, Y+11	; 0x0b
     aee:	fc 85       	ldd	r31, Y+12	; 0x0c
     af0:	e8 17       	cp	r30, r24
     af2:	f9 07       	cpc	r31, r25
     af4:	20 f3       	brcs	.-56     	; 0xabe <calc_avr_FFT+0x19c>
				FFT_Array[((j*CNr)+k)+(CNr/2)] = cf_minus(FFT_Array[(j*CNr)+k],Temp);							//Calculates and stores bottom of butterfly
				FFT_Array[(j*CNr)+k] = cf_plus(FFT_Array[(j*CNr)+k],Temp);										//Calculates and stores top of butterfly
			}
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
     af6:	29 85       	ldd	r18, Y+9	; 0x09
     af8:	3a 85       	ldd	r19, Y+10	; 0x0a
     afa:	22 0f       	add	r18, r18
     afc:	33 1f       	adc	r19, r19
     afe:	29 87       	std	Y+9, r18	; 0x09
     b00:	3a 87       	std	Y+10, r19	; 0x0a
		PCalc /= 2;                                                                                             //Set parallel computations to half
     b02:	96 95       	lsr	r25
     b04:	87 95       	ror	r24
     b06:	8d 87       	std	Y+13, r24	; 0x0d
     b08:	9e 87       	std	Y+14, r25	; 0x0e
{
	uint16_t PCalc = (N/2);                                                                                     //Amount of parallel butterfly computations
	complexfloat Temp;                                                                                          //Temporary variable for storing multiplication
	uint16_t CNr = 2;                                                                                           //Keeps track of number of calculations per step

	for(uint16_t i = 0; i < L; i++)                                                                             //Horizontal computation steps
     b0a:	89 89       	ldd	r24, Y+17	; 0x11
     b0c:	9a 89       	ldd	r25, Y+18	; 0x12
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	89 8b       	std	Y+17, r24	; 0x11
     b12:	9a 8b       	std	Y+18, r25	; 0x12
     b14:	80 e8       	ldi	r24, 0x80	; 128
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 30 01 	call	0x260	; 0x260 <avr_log2>
     b1c:	e9 89       	ldd	r30, Y+17	; 0x11
     b1e:	fa 89       	ldd	r31, Y+18	; 0x12
     b20:	e8 17       	cp	r30, r24
     b22:	f9 07       	cpc	r31, r25
     b24:	f8 f2       	brcs	.-66     	; 0xae4 <calc_avr_FFT+0x1c2>
		}

		CNr *= 2;                                                                                               //Set number of calculations per step to 2^k+1
		PCalc /= 2;                                                                                             //Set parallel computations to half
	}
}
     b26:	62 96       	adiw	r28, 0x12	; 18
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	bf 90       	pop	r11
     b3e:	af 90       	pop	r10
     b40:	9f 90       	pop	r9
     b42:	8f 90       	pop	r8
     b44:	7f 90       	pop	r7
     b46:	6f 90       	pop	r6
     b48:	5f 90       	pop	r5
     b4a:	4f 90       	pop	r4
     b4c:	3f 90       	pop	r3
     b4e:	2f 90       	pop	r2
     b50:	08 95       	ret

00000b52 <init_Window>:

float *init_Window(void)
{
     b52:	4f 92       	push	r4
     b54:	5f 92       	push	r5
     b56:	6f 92       	push	r6
     b58:	7f 92       	push	r7
     b5a:	af 92       	push	r10
     b5c:	bf 92       	push	r11
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
	float *Window = malloc(sizeof(float)*(N/2));																//Allocate memory for the window function
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 b4 0a 	call	0x1568	; 0x1568 <malloc>
     b76:	5c 01       	movw	r10, r24
	for(uint16_t i = 0; i < (N/2); i++)
     b78:	c0 e0       	ldi	r28, 0x00	; 0
     b7a:	d0 e0       	ldi	r29, 0x00	; 0
     b7c:	6c c0       	rjmp	.+216    	; 0xc56 <init_Window+0x104>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
     b7e:	8e 01       	movw	r16, r28
     b80:	00 0f       	add	r16, r16
     b82:	11 1f       	adc	r17, r17
     b84:	00 0f       	add	r16, r16
     b86:	11 1f       	adc	r17, r17
     b88:	0a 0d       	add	r16, r10
     b8a:	1b 1d       	adc	r17, r11
     b8c:	be 01       	movw	r22, r28
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 9f 08 	call	0x113e	; 0x113e <__floatunsisf>
     b96:	6b 01       	movw	r12, r22
     b98:	7c 01       	movw	r14, r24
     b9a:	2b ed       	ldi	r18, 0xDB	; 219
     b9c:	3f e0       	ldi	r19, 0x0F	; 15
     b9e:	49 ec       	ldi	r20, 0xC9	; 201
     ba0:	50 e4       	ldi	r21, 0x40	; 64
     ba2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	5c e3       	ldi	r21, 0x3C	; 60
     bae:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     bb2:	0e 94 9a 08 	call	0x1134	; 0x1134 <cos>
     bb6:	26 e2       	ldi	r18, 0x26	; 38
     bb8:	31 e0       	ldi	r19, 0x01	; 1
     bba:	4a ef       	ldi	r20, 0xFA	; 250
     bbc:	5e e3       	ldi	r21, 0x3E	; 62
     bbe:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	64 e1       	ldi	r22, 0x14	; 20
     bc8:	7e ea       	ldi	r23, 0xAE	; 174
     bca:	87 eb       	ldi	r24, 0xB7	; 183
     bcc:	9e e3       	ldi	r25, 0x3E	; 62
     bce:	0e 94 2d 08 	call	0x105a	; 0x105a <__subsf3>
     bd2:	2b 01       	movw	r4, r22
     bd4:	3c 01       	movw	r6, r24
     bd6:	2b ed       	ldi	r18, 0xDB	; 219
     bd8:	3f e0       	ldi	r19, 0x0F	; 15
     bda:	49 e4       	ldi	r20, 0x49	; 73
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	c7 01       	movw	r24, r14
     be0:	b6 01       	movw	r22, r12
     be2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	5c e3       	ldi	r21, 0x3C	; 60
     bee:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     bf2:	0e 94 9a 08 	call	0x1134	; 0x1134 <cos>
     bf6:	24 eb       	ldi	r18, 0xB4	; 180
     bf8:	3b ea       	ldi	r19, 0xAB	; 171
     bfa:	40 e1       	ldi	r20, 0x10	; 16
     bfc:	5e e3       	ldi	r21, 0x3E	; 62
     bfe:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     c02:	9b 01       	movw	r18, r22
     c04:	ac 01       	movw	r20, r24
     c06:	c3 01       	movw	r24, r6
     c08:	b2 01       	movw	r22, r4
     c0a:	0e 94 2e 08 	call	0x105c	; 0x105c <__addsf3>
     c0e:	2b 01       	movw	r4, r22
     c10:	3c 01       	movw	r6, r24
     c12:	24 ee       	ldi	r18, 0xE4	; 228
     c14:	3b ec       	ldi	r19, 0xCB	; 203
     c16:	46 e9       	ldi	r20, 0x96	; 150
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	c7 01       	movw	r24, r14
     c1c:	b6 01       	movw	r22, r12
     c1e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	5c e3       	ldi	r21, 0x3C	; 60
     c2a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     c2e:	0e 94 9a 08 	call	0x1134	; 0x1134 <cos>
     c32:	29 e7       	ldi	r18, 0x79	; 121
     c34:	3d e5       	ldi	r19, 0x5D	; 93
     c36:	4f e3       	ldi	r20, 0x3F	; 63
     c38:	5c e3       	ldi	r21, 0x3C	; 60
     c3a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
     c42:	c3 01       	movw	r24, r6
     c44:	b2 01       	movw	r22, r4
     c46:	0e 94 2d 08 	call	0x105a	; 0x105a <__subsf3>
     c4a:	f8 01       	movw	r30, r16
     c4c:	60 83       	st	Z, r22
     c4e:	71 83       	std	Z+1, r23	; 0x01
     c50:	82 83       	std	Z+2, r24	; 0x02
     c52:	93 83       	std	Z+3, r25	; 0x03
}

float *init_Window(void)
{
	float *Window = malloc(sizeof(float)*(N/2));																//Allocate memory for the window function
	for(uint16_t i = 0; i < (N/2); i++)
     c54:	21 96       	adiw	r28, 0x01	; 1
     c56:	c0 34       	cpi	r28, 0x40	; 64
     c58:	d1 05       	cpc	r29, r1
     c5a:	08 f4       	brcc	.+2      	; 0xc5e <init_Window+0x10c>
     c5c:	90 cf       	rjmp	.-224    	; 0xb7e <init_Window+0x2c>
	{
		Window[i] = A0 - (A1*cosf((2*M_PI*i)/N)) + (A2*cosf((4*M_PI*i)/N)) - (A3*cosf((6*M_PI*i)/N));			//Generates 0.5Blackman-Harris window weights
	}

	return Window;
     c5e:	c5 01       	movw	r24, r10
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	af 90       	pop	r10
     c74:	7f 90       	pop	r7
     c76:	6f 90       	pop	r6
     c78:	5f 90       	pop	r5
     c7a:	4f 90       	pop	r4
     c7c:	08 95       	ret

00000c7e <DebugPrint_spectrum>:
#include "DSP.h" 
#include "handle.h"


void DebugPrint_spectrum(complexfloat* FFT_Array, uint16_t FBins)										//Calculates vector lengths and prints the floats
{
     c7e:	8f 92       	push	r8
     c80:	9f 92       	push	r9
     c82:	af 92       	push	r10
     c84:	bf 92       	push	r11
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	6c 01       	movw	r12, r24
     c98:	7b 01       	movw	r14, r22
	float v_lenth;																						//Temp storage for vector magnitude

	for(uint16_t i = 0; i < FBins; i++)
     c9a:	00 e0       	ldi	r16, 0x00	; 0
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	27 c0       	rjmp	.+78     	; 0xcee <DebugPrint_spectrum+0x70>
	{
		v_lenth = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate vector magnitude frequency bin i
     ca0:	e8 01       	movw	r28, r16
     ca2:	cc 0f       	add	r28, r28
     ca4:	dd 1f       	adc	r29, r29
     ca6:	cc 0f       	add	r28, r28
     ca8:	dd 1f       	adc	r29, r29
     caa:	cc 0f       	add	r28, r28
     cac:	dd 1f       	adc	r29, r29
     cae:	cc 0d       	add	r28, r12
     cb0:	dd 1d       	adc	r29, r13
     cb2:	68 81       	ld	r22, Y
     cb4:	79 81       	ldd	r23, Y+1	; 0x01
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     cc2:	4b 01       	movw	r8, r22
     cc4:	5c 01       	movw	r10, r24
     cc6:	6c 81       	ldd	r22, Y+4	; 0x04
     cc8:	7d 81       	ldd	r23, Y+5	; 0x05
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	9f 81       	ldd	r25, Y+7	; 0x07
     cce:	9b 01       	movw	r18, r22
     cd0:	ac 01       	movw	r20, r24
     cd2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     cd6:	9b 01       	movw	r18, r22
     cd8:	ac 01       	movw	r20, r24
     cda:	c5 01       	movw	r24, r10
     cdc:	b4 01       	movw	r22, r8
     cde:	0e 94 2e 08 	call	0x105c	; 0x105c <__addsf3>
     ce2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <sqrt>
		writeF_UART(v_lenth);																			//Write the float in 8bit sections through the UART --> USB2.0	
     ce6:	0e 94 b0 06 	call	0xd60	; 0xd60 <writeF_UART>

void DebugPrint_spectrum(complexfloat* FFT_Array, uint16_t FBins)										//Calculates vector lengths and prints the floats
{
	float v_lenth;																						//Temp storage for vector magnitude

	for(uint16_t i = 0; i < FBins; i++)
     cea:	0f 5f       	subi	r16, 0xFF	; 255
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	0e 15       	cp	r16, r14
     cf0:	1f 05       	cpc	r17, r15
     cf2:	b0 f2       	brcs	.-84     	; 0xca0 <DebugPrint_spectrum+0x22>
	{
		v_lenth = sqrtf((FFT_Array[i].im * FFT_Array[i].im) + (FFT_Array[i].re * FFT_Array[i].re));		//Calculate vector magnitude frequency bin i
		writeF_UART(v_lenth);																			//Write the float in 8bit sections through the UART --> USB2.0	
	}
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	9f 90       	pop	r9
     d0a:	8f 90       	pop	r8
     d0c:	08 95       	ret

00000d0e <stop_timer>:
		test = USARTE0.STATUS&(0x80);																//keep polling until RXCIF bit is low
		garbage = USARTE0.DATA;																		//read the data until register is automatically cleared
	}
	
	return data;																					//returns 8bit received data
}
     d0e:	e0 e0       	ldi	r30, 0x00	; 0
     d10:	fa e0       	ldi	r31, 0x0A	; 10
     d12:	10 82       	st	Z, r1
     d14:	86 81       	ldd	r24, Z+6	; 0x06
     d16:	8c 7f       	andi	r24, 0xFC	; 252
     d18:	86 83       	std	Z+6, r24	; 0x06
     d1a:	10 a2       	std	Z+32, r1	; 0x20
     d1c:	11 a2       	std	Z+33, r1	; 0x21
     d1e:	08 95       	ret

00000d20 <start_timer>:
     d20:	e0 e0       	ldi	r30, 0x00	; 0
     d22:	fa e0       	ldi	r31, 0x0A	; 10
     d24:	10 a2       	std	Z+32, r1	; 0x20
     d26:	11 a2       	std	Z+33, r1	; 0x21
     d28:	86 81       	ldd	r24, Z+6	; 0x06
     d2a:	8c 7f       	andi	r24, 0xFC	; 252
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	86 83       	std	Z+6, r24	; 0x06
     d30:	86 e0       	ldi	r24, 0x06	; 6
     d32:	80 83       	st	Z, r24
     d34:	08 95       	ret

00000d36 <write8_UART>:
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <write8_UART+0xe>
     d3c:	20 91 a1 0a 	lds	r18, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     d40:	20 72       	andi	r18, 0x20	; 32
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	23 2b       	or	r18, r19
     d46:	d1 f3       	breq	.-12     	; 0xd3c <write8_UART+0x6>
     d48:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7beaa0>
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <write8_UART+0x24>
     d52:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7beaa1>
     d56:	80 72       	andi	r24, 0x20	; 32
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	89 2b       	or	r24, r25
     d5c:	d1 f3       	breq	.-12     	; 0xd52 <write8_UART+0x1c>
     d5e:	08 95       	ret

00000d60 <writeF_UART>:

void writeF_UART(float data)
{
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	00 d0       	rcall	.+0      	; 0xd66 <writeF_UART+0x6>
     d66:	1f 92       	push	r1
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	69 83       	std	Y+1, r22	; 0x01
     d6e:	7a 83       	std	Y+2, r23	; 0x02
     d70:	8b 83       	std	Y+3, r24	; 0x03
     d72:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t *sendarray = (uint8_t*)(&data);															//converts float to 4 separate bytes in send array
	write8_UART(sendarray[0]);																		//Sends separate bytes (LF)
     d74:	86 2f       	mov	r24, r22
     d76:	0e 94 9b 06 	call	0xd36	; 0xd36 <write8_UART>
	write8_UART(sendarray[1]);
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	0e 94 9b 06 	call	0xd36	; 0xd36 <write8_UART>
	write8_UART(sendarray[2]);
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	0e 94 9b 06 	call	0xd36	; 0xd36 <write8_UART>
	write8_UART(sendarray[3]);
     d86:	8c 81       	ldd	r24, Y+4	; 0x04
     d88:	0e 94 9b 06 	call	0xd36	; 0xd36 <write8_UART>
}
     d8c:	24 96       	adiw	r28, 0x04	; 4
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <read_ADC>:

void read_ADC(complexfloat *FFT_Array, uint16_t *Lookup_Reverse, uint16_t i)
{
     d98:	cf 92       	push	r12
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	7c 01       	movw	r14, r24
	ADCA.CTRLA = ADC_ENABLE_bm;																		//Enables ADCA
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b2 e0       	ldi	r27, 0x02	; 2
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	8c 93       	st	X, r24
	ADCB.CTRLA = ADC_ENABLE_bm;																		//Enables ADCB
     db2:	e0 e4       	ldi	r30, 0x40	; 64
     db4:	f2 e0       	ldi	r31, 0x02	; 2
     db6:	80 83       	st	Z, r24
	
	ADCA.CTRLA |= (0x01 << 2);							 											//Start ADCA conversion CH0
     db8:	8c 91       	ld	r24, X
     dba:	84 60       	ori	r24, 0x04	; 4
     dbc:	8c 93       	st	X, r24
	ADCB.CTRLA |= (0x01 << 2);																		//Start ADCB conversion CH0
     dbe:	80 81       	ld	r24, Z
     dc0:	84 60       	ori	r24, 0x04	; 4
     dc2:	80 83       	st	Z, r24
	
	while( (((ADCA.INTFLAGS & (0x01)) != (0xF)) && ((ADCB.INTFLAGS & (0x0F)) != (0x1))))			//Poll ADC IF
     dc4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7be206>
     dc8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__TEXT_REGION_LENGTH__+0x7be246>
     dcc:	8f 70       	andi	r24, 0x0F	; 15
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	c9 f7       	brne	.-14     	; 0xdc4 <read_ADC+0x2c>
	{
		//Wait for conversion
	}
	
	FFT_Array[Lookup_Reverse[i]].re = ((float)ADCA.CH0.RES);										//Save I[i] sample to BR location in FFT_Array
     dd2:	44 0f       	add	r20, r20
     dd4:	55 1f       	adc	r21, r21
     dd6:	eb 01       	movw	r28, r22
     dd8:	c4 0f       	add	r28, r20
     dda:	d5 1f       	adc	r29, r21
     ddc:	08 81       	ld	r16, Y
     dde:	19 81       	ldd	r17, Y+1	; 0x01
     de0:	00 0f       	add	r16, r16
     de2:	11 1f       	adc	r17, r17
     de4:	00 0f       	add	r16, r16
     de6:	11 1f       	adc	r17, r17
     de8:	00 0f       	add	r16, r16
     dea:	11 1f       	adc	r17, r17
     dec:	0e 0d       	add	r16, r14
     dee:	1f 1d       	adc	r17, r15
     df0:	c1 2c       	mov	r12, r1
     df2:	68 94       	set
     df4:	dd 24       	eor	r13, r13
     df6:	d1 f8       	bld	r13, 1
     df8:	f6 01       	movw	r30, r12
     dfa:	64 a1       	ldd	r22, Z+36	; 0x24
     dfc:	75 a1       	ldd	r23, Z+37	; 0x25
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 9f 08 	call	0x113e	; 0x113e <__floatunsisf>
     e06:	f8 01       	movw	r30, r16
     e08:	64 83       	std	Z+4, r22	; 0x04
     e0a:	75 83       	std	Z+5, r23	; 0x05
     e0c:	86 83       	std	Z+6, r24	; 0x06
     e0e:	97 83       	std	Z+7, r25	; 0x07
	FFT_Array[Lookup_Reverse[i]].im = ((float)ADCB.CH0.RES);										//Save Q[i] sample to BR location in FFT_Array
     e10:	09 90       	ld	r0, Y+
     e12:	d8 81       	ld	r29, Y
     e14:	c0 2d       	mov	r28, r0
     e16:	cc 0f       	add	r28, r28
     e18:	dd 1f       	adc	r29, r29
     e1a:	cc 0f       	add	r28, r28
     e1c:	dd 1f       	adc	r29, r29
     e1e:	cc 0f       	add	r28, r28
     e20:	dd 1f       	adc	r29, r29
     e22:	ce 0d       	add	r28, r14
     e24:	df 1d       	adc	r29, r15
     e26:	00 e4       	ldi	r16, 0x40	; 64
     e28:	12 e0       	ldi	r17, 0x02	; 2
     e2a:	f8 01       	movw	r30, r16
     e2c:	64 a1       	ldd	r22, Z+36	; 0x24
     e2e:	75 a1       	ldd	r23, Z+37	; 0x25
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 9f 08 	call	0x113e	; 0x113e <__floatunsisf>
     e38:	68 83       	st	Y, r22
     e3a:	79 83       	std	Y+1, r23	; 0x01
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	9b 83       	std	Y+3, r25	; 0x03
	
	ADCA.CTRLA &= (0xFE);																			//Disable ADCA
     e40:	f6 01       	movw	r30, r12
     e42:	80 81       	ld	r24, Z
     e44:	8e 7f       	andi	r24, 0xFE	; 254
     e46:	80 83       	st	Z, r24
	ADCB.CTRLA &= (0xFE);																			//Disable ADCB
     e48:	f8 01       	movw	r30, r16
     e4a:	80 81       	ld	r24, Z
     e4c:	8e 7f       	andi	r24, 0xFE	; 254
     e4e:	80 83       	st	Z, r24
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	08 95       	ret

00000e62 <__vector_47>:
uint16_t count = 0;																//keeps track of samples taken



ISR(TCE0_OVF_vect)																//When TC overflows (5kHz)
{
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	0b b6       	in	r0, 0x3b	; 59
     e6e:	0f 92       	push	r0
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
	read_ADC(FFT_Array, Reverse_Lookup, count);									//Gets IQ samples and decimates in time
     e88:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <__data_end>
     e8c:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <__data_end+0x1>
     e90:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <Reverse_Lookup>
     e94:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <Reverse_Lookup+0x1>
     e98:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <FFT_Array>
     e9c:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <FFT_Array+0x1>
     ea0:	0e 94 cc 06 	call	0xd98	; 0xd98 <read_ADC>
	count++;																	//Add sample count by one
     ea4:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
     ea8:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
     eb2:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
}
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0b be       	out	0x3b, r0	; 59
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <main>:



int main(void)
{
	init_CLK();																	//Set F_CPU to 32MHz
     edc:	0e 94 c3 07 	call	0xf86	; 0xf86 <init_CLK>
	init_TIMER();																//Set timer for sampling @ fixed frequency
     ee0:	0e 94 d5 07 	call	0xfaa	; 0xfaa <init_TIMER>
	init_UART();																//Debug UART 115200Baud (PE2: RX, PE3 TX)
     ee4:	0e 94 ac 07 	call	0xf58	; 0xf58 <init_UART>
	init_IO();																	//Setup of I/O pins
     ee8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <init_IO>
	init_ADC();																	//Set registers for internal ADC
     eec:	0e 94 ee 07 	call	0xfdc	; 0xfdc <init_ADC>
	init_DAC();																	//Set registers for internal DAC
     ef0:	0e 94 26 08 	call	0x104c	; 0x104c <init_DAC>
	
	sei();																		//Global interrupt mask
     ef4:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;												//Set low level interrupts
     ef6:	e0 ea       	ldi	r30, 0xA0	; 160
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	81 60       	ori	r24, 0x01	; 1
     efe:	82 83       	std	Z+2, r24	; 0x02
	
	complexfloat *FFT_Array = init_avr_fft();									//Creates data block in heap for FFT in place computation
     f00:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <init_avr_fft>
     f04:	ec 01       	movw	r28, r24
	complexfloat *W = init_avr_Wlookup();										//Creates heap lookup table for twiddle factors
     f06:	0e 94 77 03 	call	0x6ee	; 0x6ee <init_avr_Wlookup>
     f0a:	6c 01       	movw	r12, r24
	uint16_t *Reverse_Lookup = init_BRLookup();									//Creates heap lookup table for bit reverse order (decimation order)
     f0c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <init_BRLookup>
     f10:	7c 01       	movw	r14, r24
	float *Window = init_Window();												//Creates heap lookup table for the Window function
     f12:	0e 94 a9 05 	call	0xb52	; 0xb52 <init_Window>
     f16:	8c 01       	movw	r16, r24
	
	start_timer();																//Starts timer for sampling @ 5kHz										
     f18:	0e 94 90 06 	call	0xd20	; 0xd20 <start_timer>
	
	while(1)
	{
		if(count == (N-1))														//When the FFT array is full of samples perform calculations
     f1c:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
     f20:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
     f24:	8f 37       	cpi	r24, 0x7F	; 127
     f26:	91 05       	cpc	r25, r1
     f28:	c9 f7       	brne	.-14     	; 0xf1c <main+0x40>
		{
			stop_timer();														//Stop sampling and reset TC.CNT
     f2a:	0e 94 87 06 	call	0xd0e	; 0xd0e <stop_timer>
			apply_avr_Window(FFT_Array, Window, Reverse_Lookup);				//Apply Blackman-Harris window
     f2e:	a7 01       	movw	r20, r14
     f30:	b8 01       	movw	r22, r16
     f32:	ce 01       	movw	r24, r28
     f34:	0e 94 fe 03 	call	0x7fc	; 0x7fc <apply_avr_Window>
			calc_avr_FFT(FFT_Array, W);											//Calculates Radix2-FFT in pace
     f38:	b6 01       	movw	r22, r12
     f3a:	ce 01       	movw	r24, r28
     f3c:	0e 94 91 04 	call	0x922	; 0x922 <calc_avr_FFT>
			DebugPrint_spectrum(FFT_Array, N);									//Calculate vector magnitudes and send floats through UART --> USB2.0 in 8bit sections
     f40:	60 e8       	ldi	r22, 0x80	; 128
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 3f 06 	call	0xc7e	; 0xc7e <DebugPrint_spectrum>
			count = 0;															//Reset sample count
     f4a:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <__data_end>
     f4e:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <__data_end+0x1>
			start_timer();														//Restart timer to collect new samples
     f52:	0e 94 90 06 	call	0xd20	; 0xd20 <start_timer>
     f56:	e2 cf       	rjmp	.-60     	; 0xf1c <main+0x40>

00000f58 <init_UART>:
#include "start.h"
#include "avr/io.h"

void init_UART(void)
{
	PORTE_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 E2 as input
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x7be682>
	PORTE_DIRSET = PIN3_bm;												//Set TX pin USARTE0 E3 as output
     f5e:	88 e0       	ldi	r24, 0x08	; 8
     f60:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	PORTE_OUTSET = PIN3_bm;												//Set TX pin to high
     f64:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	USARTE0.BAUDCTRLB |= (0x0D<<4);										//Set BSCALE to -3 for baud 115200
     f68:	e0 ea       	ldi	r30, 0xA0	; 160
     f6a:	fa e0       	ldi	r31, 0x0A	; 10
     f6c:	87 81       	ldd	r24, Z+7	; 0x07
     f6e:	80 6d       	ori	r24, 0xD0	; 208
     f70:	87 83       	std	Z+7, r24	; 0x07
	USARTE0.BAUDCTRLA |= (0x83);										//Set BSEL to 131 for baud 115200
     f72:	86 81       	ldd	r24, Z+6	; 0x06
     f74:	83 68       	ori	r24, 0x83	; 131
     f76:	86 83       	std	Z+6, r24	; 0x06
	
	USARTE0.CTRLC |= (0x03);											//Sets amount of data bits to 8
     f78:	85 81       	ldd	r24, Z+5	; 0x05
     f7a:	83 60       	ori	r24, 0x03	; 3
     f7c:	85 83       	std	Z+5, r24	; 0x05
	USARTE0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits.
     f7e:	84 81       	ldd	r24, Z+4	; 0x04
     f80:	88 61       	ori	r24, 0x18	; 24
     f82:	84 83       	std	Z+4, r24	; 0x04
     f84:	08 95       	ret

00000f86 <init_CLK>:
}

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;											// Enable internal 32 MHz oscillator
     f86:	e0 e5       	ldi	r30, 0x50	; 80
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	82 60       	ori	r24, 0x02	; 2
     f8e:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));								// Wait for oscillator is ready
     f90:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
     f94:	81 ff       	sbrs	r24, 1
     f96:	fc cf       	rjmp	.-8      	; 0xf90 <init_CLK+0xa>
	CCP = CCP_IOREG_gc;													// Security signature to modify clock
     f98:	88 ed       	ldi	r24, 0xD8	; 216
     f9a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;									// Select 32 MHz oscillator
     f9c:	e0 e4       	ldi	r30, 0x40	; 64
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;										// Set PSA to 1
     fa4:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;									// Set PSB&PSC to 1
     fa6:	11 82       	std	Z+1, r1	; 0x01
     fa8:	08 95       	ret

00000faa <init_TIMER>:
}

void init_TIMER(void)
{
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;									//Set timer E0 to normal mode
     faa:	e0 e0       	ldi	r30, 0x00	; 0
     fac:	fa e0       	ldi	r31, 0x0A	; 10
     fae:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = TC_CLKSEL_OFF_gc;										//Timer is off until clksel is changed
     fb0:	10 82       	st	Z, r1
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc;									//Set overflow interrupt TCE0 to low level
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	86 83       	std	Z+6, r24	; 0x06
	TCE0.PER = 0x19;													//Set overflow frequency to 5kHz = ((F_CPU/256)/(PER))
     fb6:	89 e1       	ldi	r24, 0x19	; 25
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	86 a3       	std	Z+38, r24	; 0x26
     fbc:	97 a3       	std	Z+39, r25	; 0x27
     fbe:	08 95       	ret

00000fc0 <init_IO>:
}

void init_IO(void)
{
	PORTA_DIRSET = PIN7_bm;												//Set I'm alive pin as output
     fc0:	e1 e0       	ldi	r30, 0x01	; 1
     fc2:	f6 e0       	ldi	r31, 0x06	; 6
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	80 83       	st	Z, r24
	PORTA_OUTSET = PIN7_bm;												//Enable I'm alive LED
     fc8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
	
	PORTE_DIRSET = PIN4_bm;												//Timing debug pin
     fcc:	80 e1       	ldi	r24, 0x10	; 16
     fce:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x7be681>
	
	PORTA_DIRSET = PIN1_bm;												//Radar /enable pin
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	80 83       	st	Z, r24
	PORTA_OUTCLR = PIN1_bm;												//Enable radar
     fd6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     fda:	08 95       	ret

00000fdc <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN0_bm;												//Set PA0 as input for I channel
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7be602>
	PORTB_DIRCLR = PIN0_bm;												//Set PB0 as input for Q channel
     fe2:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x7be622>
	
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCA clock speed to 62.5kHz
     fe6:	a0 e0       	ldi	r26, 0x00	; 0
     fe8:	b2 e0       	ldi	r27, 0x02	; 2
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	14 96       	adiw	r26, 0x04	; 4
     fee:	8c 93       	st	X, r24
     ff0:	14 97       	sbiw	r26, 0x04	; 4
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc;							//2MHz system clock use: ADCB clock speed to 62.5kHz
     ff2:	e0 e4       	ldi	r30, 0x40	; 64
     ff4:	f2 e0       	ldi	r31, 0x02	; 2
     ff6:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCA to 12bit resolution
     ff8:	12 96       	adiw	r26, 0x02	; 2
     ffa:	8c 91       	ld	r24, X
     ffc:	12 97       	sbiw	r26, 0x02	; 2
     ffe:	12 96       	adiw	r26, 0x02	; 2
    1000:	8c 93       	st	X, r24
    1002:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_RESOLUTION_12BIT_gc;							//Set ADCB to 12bit resolution
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCA reference voltage to internal VCC
    1008:	12 96       	adiw	r26, 0x02	; 2
    100a:	8c 91       	ld	r24, X
    100c:	12 97       	sbiw	r26, 0x02	; 2
    100e:	80 61       	ori	r24, 0x10	; 16
    1010:	12 96       	adiw	r26, 0x02	; 2
    1012:	8c 93       	st	X, r24
    1014:	12 97       	sbiw	r26, 0x02	; 2
	ADCB.REFCTRL |= ADC_REFSEL_INTVCC_gc;								//Set ADCB reference voltage to internal VCC
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	80 61       	ori	r24, 0x10	; 16
    101a:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCA channel 0 single ended input
    101c:	90 96       	adiw	r26, 0x20	; 32
    101e:	8c 91       	ld	r24, X
    1020:	90 97       	sbiw	r26, 0x20	; 32
    1022:	81 60       	ori	r24, 0x01	; 1
    1024:	90 96       	adiw	r26, 0x20	; 32
    1026:	8c 93       	st	X, r24
    1028:	90 97       	sbiw	r26, 0x20	; 32
	ADCB.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;					//Set ADCB channel 0 single ended input
    102a:	80 a1       	ldd	r24, Z+32	; 0x20
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCA channel 0 reference voltage to internal GND
    1030:	91 96       	adiw	r26, 0x21	; 33
    1032:	8c 91       	ld	r24, X
    1034:	91 97       	sbiw	r26, 0x21	; 33
    1036:	87 60       	ori	r24, 0x07	; 7
    1038:	91 96       	adiw	r26, 0x21	; 33
    103a:	8c 93       	st	X, r24
    103c:	91 97       	sbiw	r26, 0x21	; 33
	ADCB.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;					//Set ADCB channel 0 reference voltage to internal GND
    103e:	81 a1       	ldd	r24, Z+33	; 0x21
    1040:	87 60       	ori	r24, 0x07	; 7
    1042:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCA CH0 to pin A0 as input for I channel
    1044:	91 96       	adiw	r26, 0x21	; 33
    1046:	1c 92       	st	X, r1
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;							//Set ADCB CH0 to pin B0 as input for Q channel
    1048:	11 a2       	std	Z+33, r1	; 0x21
    104a:	08 95       	ret

0000104c <init_DAC>:
}

void init_DAC(void)
{
	DACB.CTRLC = DAC_REFSEL_INT1V_gc;									//set DAC reference to internal 1V
    104c:	e0 e2       	ldi	r30, 0x20	; 32
    104e:	f3 e0       	ldi	r31, 0x03	; 3
    1050:	12 82       	std	Z+2, r1	; 0x02
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;									//set DAC output to channel 0
    1052:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;							//Enable both DAC channels
    1054:	85 e0       	ldi	r24, 0x05	; 5
    1056:	80 83       	st	Z, r24
    1058:	08 95       	ret

0000105a <__subsf3>:
    105a:	50 58       	subi	r21, 0x80	; 128

0000105c <__addsf3>:
    105c:	bb 27       	eor	r27, r27
    105e:	aa 27       	eor	r26, r26
    1060:	0e 94 45 08 	call	0x108a	; 0x108a <__addsf3x>
    1064:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_round>
    1068:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscA>
    106c:	38 f0       	brcs	.+14     	; 0x107c <__addsf3+0x20>
    106e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fp_pscB>
    1072:	20 f0       	brcs	.+8      	; 0x107c <__addsf3+0x20>
    1074:	39 f4       	brne	.+14     	; 0x1084 <__addsf3+0x28>
    1076:	9f 3f       	cpi	r25, 0xFF	; 255
    1078:	19 f4       	brne	.+6      	; 0x1080 <__addsf3+0x24>
    107a:	26 f4       	brtc	.+8      	; 0x1084 <__addsf3+0x28>
    107c:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_nan>
    1080:	0e f4       	brtc	.+2      	; 0x1084 <__addsf3+0x28>
    1082:	e0 95       	com	r30
    1084:	e7 fb       	bst	r30, 7
    1086:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_inf>

0000108a <__addsf3x>:
    108a:	e9 2f       	mov	r30, r25
    108c:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_split3>
    1090:	58 f3       	brcs	.-42     	; 0x1068 <__addsf3+0xc>
    1092:	ba 17       	cp	r27, r26
    1094:	62 07       	cpc	r22, r18
    1096:	73 07       	cpc	r23, r19
    1098:	84 07       	cpc	r24, r20
    109a:	95 07       	cpc	r25, r21
    109c:	20 f0       	brcs	.+8      	; 0x10a6 <__addsf3x+0x1c>
    109e:	79 f4       	brne	.+30     	; 0x10be <__addsf3x+0x34>
    10a0:	a6 f5       	brtc	.+104    	; 0x110a <__addsf3x+0x80>
    10a2:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__fp_zero>
    10a6:	0e f4       	brtc	.+2      	; 0x10aa <__addsf3x+0x20>
    10a8:	e0 95       	com	r30
    10aa:	0b 2e       	mov	r0, r27
    10ac:	ba 2f       	mov	r27, r26
    10ae:	a0 2d       	mov	r26, r0
    10b0:	0b 01       	movw	r0, r22
    10b2:	b9 01       	movw	r22, r18
    10b4:	90 01       	movw	r18, r0
    10b6:	0c 01       	movw	r0, r24
    10b8:	ca 01       	movw	r24, r20
    10ba:	a0 01       	movw	r20, r0
    10bc:	11 24       	eor	r1, r1
    10be:	ff 27       	eor	r31, r31
    10c0:	59 1b       	sub	r21, r25
    10c2:	99 f0       	breq	.+38     	; 0x10ea <__addsf3x+0x60>
    10c4:	59 3f       	cpi	r21, 0xF9	; 249
    10c6:	50 f4       	brcc	.+20     	; 0x10dc <__addsf3x+0x52>
    10c8:	50 3e       	cpi	r21, 0xE0	; 224
    10ca:	68 f1       	brcs	.+90     	; 0x1126 <__addsf3x+0x9c>
    10cc:	1a 16       	cp	r1, r26
    10ce:	f0 40       	sbci	r31, 0x00	; 0
    10d0:	a2 2f       	mov	r26, r18
    10d2:	23 2f       	mov	r18, r19
    10d4:	34 2f       	mov	r19, r20
    10d6:	44 27       	eor	r20, r20
    10d8:	58 5f       	subi	r21, 0xF8	; 248
    10da:	f3 cf       	rjmp	.-26     	; 0x10c2 <__addsf3x+0x38>
    10dc:	46 95       	lsr	r20
    10de:	37 95       	ror	r19
    10e0:	27 95       	ror	r18
    10e2:	a7 95       	ror	r26
    10e4:	f0 40       	sbci	r31, 0x00	; 0
    10e6:	53 95       	inc	r21
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__addsf3x+0x52>
    10ea:	7e f4       	brtc	.+30     	; 0x110a <__addsf3x+0x80>
    10ec:	1f 16       	cp	r1, r31
    10ee:	ba 0b       	sbc	r27, r26
    10f0:	62 0b       	sbc	r22, r18
    10f2:	73 0b       	sbc	r23, r19
    10f4:	84 0b       	sbc	r24, r20
    10f6:	ba f0       	brmi	.+46     	; 0x1126 <__addsf3x+0x9c>
    10f8:	91 50       	subi	r25, 0x01	; 1
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <__addsf3x+0x9a>
    10fc:	ff 0f       	add	r31, r31
    10fe:	bb 1f       	adc	r27, r27
    1100:	66 1f       	adc	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	c2 f7       	brpl	.-16     	; 0x10f8 <__addsf3x+0x6e>
    1108:	0e c0       	rjmp	.+28     	; 0x1126 <__addsf3x+0x9c>
    110a:	ba 0f       	add	r27, r26
    110c:	62 1f       	adc	r22, r18
    110e:	73 1f       	adc	r23, r19
    1110:	84 1f       	adc	r24, r20
    1112:	48 f4       	brcc	.+18     	; 0x1126 <__addsf3x+0x9c>
    1114:	87 95       	ror	r24
    1116:	77 95       	ror	r23
    1118:	67 95       	ror	r22
    111a:	b7 95       	ror	r27
    111c:	f7 95       	ror	r31
    111e:	9e 3f       	cpi	r25, 0xFE	; 254
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__addsf3x+0x9a>
    1122:	b0 cf       	rjmp	.-160    	; 0x1084 <__addsf3+0x28>
    1124:	93 95       	inc	r25
    1126:	88 0f       	add	r24, r24
    1128:	08 f0       	brcs	.+2      	; 0x112c <__addsf3x+0xa2>
    112a:	99 27       	eor	r25, r25
    112c:	ee 0f       	add	r30, r30
    112e:	97 95       	ror	r25
    1130:	87 95       	ror	r24
    1132:	08 95       	ret

00001134 <cos>:
    1134:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_rempio2>
    1138:	e3 95       	inc	r30
    113a:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_sinus>

0000113e <__floatunsisf>:
    113e:	e8 94       	clt
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <__floatsisf+0x12>

00001142 <__floatsisf>:
    1142:	97 fb       	bst	r25, 7
    1144:	3e f4       	brtc	.+14     	; 0x1154 <__floatsisf+0x12>
    1146:	90 95       	com	r25
    1148:	80 95       	com	r24
    114a:	70 95       	com	r23
    114c:	61 95       	neg	r22
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f 4f       	sbci	r24, 0xFF	; 255
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	99 23       	and	r25, r25
    1156:	a9 f0       	breq	.+42     	; 0x1182 <__floatsisf+0x40>
    1158:	f9 2f       	mov	r31, r25
    115a:	96 e9       	ldi	r25, 0x96	; 150
    115c:	bb 27       	eor	r27, r27
    115e:	93 95       	inc	r25
    1160:	f6 95       	lsr	r31
    1162:	87 95       	ror	r24
    1164:	77 95       	ror	r23
    1166:	67 95       	ror	r22
    1168:	b7 95       	ror	r27
    116a:	f1 11       	cpse	r31, r1
    116c:	f8 cf       	rjmp	.-16     	; 0x115e <__floatsisf+0x1c>
    116e:	fa f4       	brpl	.+62     	; 0x11ae <__floatsisf+0x6c>
    1170:	bb 0f       	add	r27, r27
    1172:	11 f4       	brne	.+4      	; 0x1178 <__floatsisf+0x36>
    1174:	60 ff       	sbrs	r22, 0
    1176:	1b c0       	rjmp	.+54     	; 0x11ae <__floatsisf+0x6c>
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	16 c0       	rjmp	.+44     	; 0x11ae <__floatsisf+0x6c>
    1182:	88 23       	and	r24, r24
    1184:	11 f0       	breq	.+4      	; 0x118a <__floatsisf+0x48>
    1186:	96 e9       	ldi	r25, 0x96	; 150
    1188:	11 c0       	rjmp	.+34     	; 0x11ac <__floatsisf+0x6a>
    118a:	77 23       	and	r23, r23
    118c:	21 f0       	breq	.+8      	; 0x1196 <__floatsisf+0x54>
    118e:	9e e8       	ldi	r25, 0x8E	; 142
    1190:	87 2f       	mov	r24, r23
    1192:	76 2f       	mov	r23, r22
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <__floatsisf+0x5e>
    1196:	66 23       	and	r22, r22
    1198:	71 f0       	breq	.+28     	; 0x11b6 <__floatsisf+0x74>
    119a:	96 e8       	ldi	r25, 0x86	; 134
    119c:	86 2f       	mov	r24, r22
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	2a f0       	brmi	.+10     	; 0x11ae <__floatsisf+0x6c>
    11a4:	9a 95       	dec	r25
    11a6:	66 0f       	add	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	da f7       	brpl	.-10     	; 0x11a4 <__floatsisf+0x62>
    11ae:	88 0f       	add	r24, r24
    11b0:	96 95       	lsr	r25
    11b2:	87 95       	ror	r24
    11b4:	97 f9       	bld	r25, 7
    11b6:	08 95       	ret

000011b8 <__fp_inf>:
    11b8:	97 f9       	bld	r25, 7
    11ba:	9f 67       	ori	r25, 0x7F	; 127
    11bc:	80 e8       	ldi	r24, 0x80	; 128
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	08 95       	ret

000011c4 <__fp_nan>:
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
    11c6:	80 ec       	ldi	r24, 0xC0	; 192
    11c8:	08 95       	ret

000011ca <__fp_pscA>:
    11ca:	00 24       	eor	r0, r0
    11cc:	0a 94       	dec	r0
    11ce:	16 16       	cp	r1, r22
    11d0:	17 06       	cpc	r1, r23
    11d2:	18 06       	cpc	r1, r24
    11d4:	09 06       	cpc	r0, r25
    11d6:	08 95       	ret

000011d8 <__fp_pscB>:
    11d8:	00 24       	eor	r0, r0
    11da:	0a 94       	dec	r0
    11dc:	12 16       	cp	r1, r18
    11de:	13 06       	cpc	r1, r19
    11e0:	14 06       	cpc	r1, r20
    11e2:	05 06       	cpc	r0, r21
    11e4:	08 95       	ret
    11e6:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_nan>

000011ea <__fp_rempio2>:
    11ea:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fp_splitA>
    11ee:	d8 f3       	brcs	.-10     	; 0x11e6 <__fp_pscB+0xe>
    11f0:	e8 94       	clt
    11f2:	e0 e0       	ldi	r30, 0x00	; 0
    11f4:	bb 27       	eor	r27, r27
    11f6:	9f 57       	subi	r25, 0x7F	; 127
    11f8:	f0 f0       	brcs	.+60     	; 0x1236 <__fp_rempio2+0x4c>
    11fa:	2a ed       	ldi	r18, 0xDA	; 218
    11fc:	3f e0       	ldi	r19, 0x0F	; 15
    11fe:	49 ec       	ldi	r20, 0xC9	; 201
    1200:	06 c0       	rjmp	.+12     	; 0x120e <__fp_rempio2+0x24>
    1202:	ee 0f       	add	r30, r30
    1204:	bb 0f       	add	r27, r27
    1206:	66 1f       	adc	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	28 f0       	brcs	.+10     	; 0x1218 <__fp_rempio2+0x2e>
    120e:	b2 3a       	cpi	r27, 0xA2	; 162
    1210:	62 07       	cpc	r22, r18
    1212:	73 07       	cpc	r23, r19
    1214:	84 07       	cpc	r24, r20
    1216:	28 f0       	brcs	.+10     	; 0x1222 <__fp_rempio2+0x38>
    1218:	b2 5a       	subi	r27, 0xA2	; 162
    121a:	62 0b       	sbc	r22, r18
    121c:	73 0b       	sbc	r23, r19
    121e:	84 0b       	sbc	r24, r20
    1220:	e3 95       	inc	r30
    1222:	9a 95       	dec	r25
    1224:	72 f7       	brpl	.-36     	; 0x1202 <__fp_rempio2+0x18>
    1226:	80 38       	cpi	r24, 0x80	; 128
    1228:	30 f4       	brcc	.+12     	; 0x1236 <__fp_rempio2+0x4c>
    122a:	9a 95       	dec	r25
    122c:	bb 0f       	add	r27, r27
    122e:	66 1f       	adc	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	d2 f7       	brpl	.-12     	; 0x122a <__fp_rempio2+0x40>
    1236:	90 48       	sbci	r25, 0x80	; 128
    1238:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_mpack_finite>

0000123c <__fp_round>:
    123c:	09 2e       	mov	r0, r25
    123e:	03 94       	inc	r0
    1240:	00 0c       	add	r0, r0
    1242:	11 f4       	brne	.+4      	; 0x1248 <__fp_round+0xc>
    1244:	88 23       	and	r24, r24
    1246:	52 f0       	brmi	.+20     	; 0x125c <__fp_round+0x20>
    1248:	bb 0f       	add	r27, r27
    124a:	40 f4       	brcc	.+16     	; 0x125c <__fp_round+0x20>
    124c:	bf 2b       	or	r27, r31
    124e:	11 f4       	brne	.+4      	; 0x1254 <__fp_round+0x18>
    1250:	60 ff       	sbrs	r22, 0
    1252:	04 c0       	rjmp	.+8      	; 0x125c <__fp_round+0x20>
    1254:	6f 5f       	subi	r22, 0xFF	; 255
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	08 95       	ret

0000125e <__fp_sinus>:
    125e:	ef 93       	push	r30
    1260:	e0 ff       	sbrs	r30, 0
    1262:	07 c0       	rjmp	.+14     	; 0x1272 <__fp_sinus+0x14>
    1264:	a2 ea       	ldi	r26, 0xA2	; 162
    1266:	2a ed       	ldi	r18, 0xDA	; 218
    1268:	3f e0       	ldi	r19, 0x0F	; 15
    126a:	49 ec       	ldi	r20, 0xC9	; 201
    126c:	5f eb       	ldi	r21, 0xBF	; 191
    126e:	0e 94 45 08 	call	0x108a	; 0x108a <__addsf3x>
    1272:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_round>
    1276:	0f 90       	pop	r0
    1278:	03 94       	inc	r0
    127a:	01 fc       	sbrc	r0, 1
    127c:	90 58       	subi	r25, 0x80	; 128
    127e:	ec ef       	ldi	r30, 0xFC	; 252
    1280:	f1 e0       	ldi	r31, 0x01	; 1
    1282:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__fp_powsodd>

00001286 <__fp_split3>:
    1286:	57 fd       	sbrc	r21, 7
    1288:	90 58       	subi	r25, 0x80	; 128
    128a:	44 0f       	add	r20, r20
    128c:	55 1f       	adc	r21, r21
    128e:	59 f0       	breq	.+22     	; 0x12a6 <__fp_splitA+0x10>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	71 f0       	breq	.+28     	; 0x12b0 <__fp_splitA+0x1a>
    1294:	47 95       	ror	r20

00001296 <__fp_splitA>:
    1296:	88 0f       	add	r24, r24
    1298:	97 fb       	bst	r25, 7
    129a:	99 1f       	adc	r25, r25
    129c:	61 f0       	breq	.+24     	; 0x12b6 <__fp_splitA+0x20>
    129e:	9f 3f       	cpi	r25, 0xFF	; 255
    12a0:	79 f0       	breq	.+30     	; 0x12c0 <__fp_splitA+0x2a>
    12a2:	87 95       	ror	r24
    12a4:	08 95       	ret
    12a6:	12 16       	cp	r1, r18
    12a8:	13 06       	cpc	r1, r19
    12aa:	14 06       	cpc	r1, r20
    12ac:	55 1f       	adc	r21, r21
    12ae:	f2 cf       	rjmp	.-28     	; 0x1294 <__fp_split3+0xe>
    12b0:	46 95       	lsr	r20
    12b2:	f1 df       	rcall	.-30     	; 0x1296 <__fp_splitA>
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <__fp_splitA+0x30>
    12b6:	16 16       	cp	r1, r22
    12b8:	17 06       	cpc	r1, r23
    12ba:	18 06       	cpc	r1, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	f1 cf       	rjmp	.-30     	; 0x12a2 <__fp_splitA+0xc>
    12c0:	86 95       	lsr	r24
    12c2:	71 05       	cpc	r23, r1
    12c4:	61 05       	cpc	r22, r1
    12c6:	08 94       	sec
    12c8:	08 95       	ret

000012ca <__fp_zero>:
    12ca:	e8 94       	clt

000012cc <__fp_szero>:
    12cc:	bb 27       	eor	r27, r27
    12ce:	66 27       	eor	r22, r22
    12d0:	77 27       	eor	r23, r23
    12d2:	cb 01       	movw	r24, r22
    12d4:	97 f9       	bld	r25, 7
    12d6:	08 95       	ret

000012d8 <__gesf2>:
    12d8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__fp_cmp>
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <__gesf2+0x8>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	08 95       	ret

000012e2 <__mulsf3>:
    12e2:	0e 94 84 09 	call	0x1308	; 0x1308 <__mulsf3x>
    12e6:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_round>
    12ea:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscA>
    12ee:	38 f0       	brcs	.+14     	; 0x12fe <__mulsf3+0x1c>
    12f0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fp_pscB>
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <__mulsf3+0x1c>
    12f6:	95 23       	and	r25, r21
    12f8:	11 f0       	breq	.+4      	; 0x12fe <__mulsf3+0x1c>
    12fa:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_inf>
    12fe:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_nan>
    1302:	11 24       	eor	r1, r1
    1304:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_szero>

00001308 <__mulsf3x>:
    1308:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_split3>
    130c:	70 f3       	brcs	.-36     	; 0x12ea <__mulsf3+0x8>

0000130e <__mulsf3_pse>:
    130e:	95 9f       	mul	r25, r21
    1310:	c1 f3       	breq	.-16     	; 0x1302 <__mulsf3+0x20>
    1312:	95 0f       	add	r25, r21
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	55 1f       	adc	r21, r21
    1318:	62 9f       	mul	r22, r18
    131a:	f0 01       	movw	r30, r0
    131c:	72 9f       	mul	r23, r18
    131e:	bb 27       	eor	r27, r27
    1320:	f0 0d       	add	r31, r0
    1322:	b1 1d       	adc	r27, r1
    1324:	63 9f       	mul	r22, r19
    1326:	aa 27       	eor	r26, r26
    1328:	f0 0d       	add	r31, r0
    132a:	b1 1d       	adc	r27, r1
    132c:	aa 1f       	adc	r26, r26
    132e:	64 9f       	mul	r22, r20
    1330:	66 27       	eor	r22, r22
    1332:	b0 0d       	add	r27, r0
    1334:	a1 1d       	adc	r26, r1
    1336:	66 1f       	adc	r22, r22
    1338:	82 9f       	mul	r24, r18
    133a:	22 27       	eor	r18, r18
    133c:	b0 0d       	add	r27, r0
    133e:	a1 1d       	adc	r26, r1
    1340:	62 1f       	adc	r22, r18
    1342:	73 9f       	mul	r23, r19
    1344:	b0 0d       	add	r27, r0
    1346:	a1 1d       	adc	r26, r1
    1348:	62 1f       	adc	r22, r18
    134a:	83 9f       	mul	r24, r19
    134c:	a0 0d       	add	r26, r0
    134e:	61 1d       	adc	r22, r1
    1350:	22 1f       	adc	r18, r18
    1352:	74 9f       	mul	r23, r20
    1354:	33 27       	eor	r19, r19
    1356:	a0 0d       	add	r26, r0
    1358:	61 1d       	adc	r22, r1
    135a:	23 1f       	adc	r18, r19
    135c:	84 9f       	mul	r24, r20
    135e:	60 0d       	add	r22, r0
    1360:	21 1d       	adc	r18, r1
    1362:	82 2f       	mov	r24, r18
    1364:	76 2f       	mov	r23, r22
    1366:	6a 2f       	mov	r22, r26
    1368:	11 24       	eor	r1, r1
    136a:	9f 57       	subi	r25, 0x7F	; 127
    136c:	50 40       	sbci	r21, 0x00	; 0
    136e:	9a f0       	brmi	.+38     	; 0x1396 <__mulsf3_pse+0x88>
    1370:	f1 f0       	breq	.+60     	; 0x13ae <__mulsf3_pse+0xa0>
    1372:	88 23       	and	r24, r24
    1374:	4a f0       	brmi	.+18     	; 0x1388 <__mulsf3_pse+0x7a>
    1376:	ee 0f       	add	r30, r30
    1378:	ff 1f       	adc	r31, r31
    137a:	bb 1f       	adc	r27, r27
    137c:	66 1f       	adc	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	91 50       	subi	r25, 0x01	; 1
    1384:	50 40       	sbci	r21, 0x00	; 0
    1386:	a9 f7       	brne	.-22     	; 0x1372 <__mulsf3_pse+0x64>
    1388:	9e 3f       	cpi	r25, 0xFE	; 254
    138a:	51 05       	cpc	r21, r1
    138c:	80 f0       	brcs	.+32     	; 0x13ae <__mulsf3_pse+0xa0>
    138e:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_inf>
    1392:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_szero>
    1396:	5f 3f       	cpi	r21, 0xFF	; 255
    1398:	e4 f3       	brlt	.-8      	; 0x1392 <__mulsf3_pse+0x84>
    139a:	98 3e       	cpi	r25, 0xE8	; 232
    139c:	d4 f3       	brlt	.-12     	; 0x1392 <__mulsf3_pse+0x84>
    139e:	86 95       	lsr	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b7 95       	ror	r27
    13a6:	f7 95       	ror	r31
    13a8:	e7 95       	ror	r30
    13aa:	9f 5f       	subi	r25, 0xFF	; 255
    13ac:	c1 f7       	brne	.-16     	; 0x139e <__mulsf3_pse+0x90>
    13ae:	fe 2b       	or	r31, r30
    13b0:	88 0f       	add	r24, r24
    13b2:	91 1d       	adc	r25, r1
    13b4:	96 95       	lsr	r25
    13b6:	87 95       	ror	r24
    13b8:	97 f9       	bld	r25, 7
    13ba:	08 95       	ret

000013bc <sin>:
    13bc:	9f 93       	push	r25
    13be:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_rempio2>
    13c2:	0f 90       	pop	r0
    13c4:	07 fc       	sbrc	r0, 7
    13c6:	ee 5f       	subi	r30, 0xFE	; 254
    13c8:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__fp_sinus>
    13cc:	19 f4       	brne	.+6      	; 0x13d4 <sin+0x18>
    13ce:	16 f4       	brtc	.+4      	; 0x13d4 <sin+0x18>
    13d0:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_nan>
    13d4:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_mpack>

000013d8 <sqrt>:
    13d8:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fp_splitA>
    13dc:	b8 f3       	brcs	.-18     	; 0x13cc <sin+0x10>
    13de:	99 23       	and	r25, r25
    13e0:	c9 f3       	breq	.-14     	; 0x13d4 <sin+0x18>
    13e2:	b6 f3       	brts	.-20     	; 0x13d0 <sin+0x14>
    13e4:	9f 57       	subi	r25, 0x7F	; 127
    13e6:	55 0b       	sbc	r21, r21
    13e8:	87 ff       	sbrs	r24, 7
    13ea:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__fp_norm2>
    13ee:	00 24       	eor	r0, r0
    13f0:	a0 e6       	ldi	r26, 0x60	; 96
    13f2:	40 ea       	ldi	r20, 0xA0	; 160
    13f4:	90 01       	movw	r18, r0
    13f6:	80 58       	subi	r24, 0x80	; 128
    13f8:	56 95       	lsr	r21
    13fa:	97 95       	ror	r25
    13fc:	28 f4       	brcc	.+10     	; 0x1408 <sqrt+0x30>
    13fe:	80 5c       	subi	r24, 0xC0	; 192
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	88 1f       	adc	r24, r24
    1406:	20 f0       	brcs	.+8      	; 0x1410 <sqrt+0x38>
    1408:	26 17       	cp	r18, r22
    140a:	37 07       	cpc	r19, r23
    140c:	48 07       	cpc	r20, r24
    140e:	30 f4       	brcc	.+12     	; 0x141c <sqrt+0x44>
    1410:	62 1b       	sub	r22, r18
    1412:	73 0b       	sbc	r23, r19
    1414:	84 0b       	sbc	r24, r20
    1416:	20 29       	or	r18, r0
    1418:	31 29       	or	r19, r1
    141a:	4a 2b       	or	r20, r26
    141c:	a6 95       	lsr	r26
    141e:	17 94       	ror	r1
    1420:	07 94       	ror	r0
    1422:	20 25       	eor	r18, r0
    1424:	31 25       	eor	r19, r1
    1426:	4a 27       	eor	r20, r26
    1428:	58 f7       	brcc	.-42     	; 0x1400 <sqrt+0x28>
    142a:	66 0f       	add	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	20 f0       	brcs	.+8      	; 0x143a <sqrt+0x62>
    1432:	26 17       	cp	r18, r22
    1434:	37 07       	cpc	r19, r23
    1436:	48 07       	cpc	r20, r24
    1438:	30 f4       	brcc	.+12     	; 0x1446 <sqrt+0x6e>
    143a:	62 0b       	sbc	r22, r18
    143c:	73 0b       	sbc	r23, r19
    143e:	84 0b       	sbc	r24, r20
    1440:	20 0d       	add	r18, r0
    1442:	31 1d       	adc	r19, r1
    1444:	41 1d       	adc	r20, r1
    1446:	a0 95       	com	r26
    1448:	81 f7       	brne	.-32     	; 0x142a <sqrt+0x52>
    144a:	b9 01       	movw	r22, r18
    144c:	84 2f       	mov	r24, r20
    144e:	91 58       	subi	r25, 0x81	; 129
    1450:	88 0f       	add	r24, r24
    1452:	96 95       	lsr	r25
    1454:	87 95       	ror	r24
    1456:	08 95       	ret

00001458 <__fp_cmp>:
    1458:	99 0f       	add	r25, r25
    145a:	00 08       	sbc	r0, r0
    145c:	55 0f       	add	r21, r21
    145e:	aa 0b       	sbc	r26, r26
    1460:	e0 e8       	ldi	r30, 0x80	; 128
    1462:	fe ef       	ldi	r31, 0xFE	; 254
    1464:	16 16       	cp	r1, r22
    1466:	17 06       	cpc	r1, r23
    1468:	e8 07       	cpc	r30, r24
    146a:	f9 07       	cpc	r31, r25
    146c:	c0 f0       	brcs	.+48     	; 0x149e <__fp_cmp+0x46>
    146e:	12 16       	cp	r1, r18
    1470:	13 06       	cpc	r1, r19
    1472:	e4 07       	cpc	r30, r20
    1474:	f5 07       	cpc	r31, r21
    1476:	98 f0       	brcs	.+38     	; 0x149e <__fp_cmp+0x46>
    1478:	62 1b       	sub	r22, r18
    147a:	73 0b       	sbc	r23, r19
    147c:	84 0b       	sbc	r24, r20
    147e:	95 0b       	sbc	r25, r21
    1480:	39 f4       	brne	.+14     	; 0x1490 <__fp_cmp+0x38>
    1482:	0a 26       	eor	r0, r26
    1484:	61 f0       	breq	.+24     	; 0x149e <__fp_cmp+0x46>
    1486:	23 2b       	or	r18, r19
    1488:	24 2b       	or	r18, r20
    148a:	25 2b       	or	r18, r21
    148c:	21 f4       	brne	.+8      	; 0x1496 <__fp_cmp+0x3e>
    148e:	08 95       	ret
    1490:	0a 26       	eor	r0, r26
    1492:	09 f4       	brne	.+2      	; 0x1496 <__fp_cmp+0x3e>
    1494:	a1 40       	sbci	r26, 0x01	; 1
    1496:	a6 95       	lsr	r26
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	81 1d       	adc	r24, r1
    149c:	81 1d       	adc	r24, r1
    149e:	08 95       	ret

000014a0 <__fp_mpack>:
    14a0:	9f 3f       	cpi	r25, 0xFF	; 255
    14a2:	31 f0       	breq	.+12     	; 0x14b0 <__fp_mpack_finite+0xc>

000014a4 <__fp_mpack_finite>:
    14a4:	91 50       	subi	r25, 0x01	; 1
    14a6:	20 f4       	brcc	.+8      	; 0x14b0 <__fp_mpack_finite+0xc>
    14a8:	87 95       	ror	r24
    14aa:	77 95       	ror	r23
    14ac:	67 95       	ror	r22
    14ae:	b7 95       	ror	r27
    14b0:	88 0f       	add	r24, r24
    14b2:	91 1d       	adc	r25, r1
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	97 f9       	bld	r25, 7
    14ba:	08 95       	ret

000014bc <__fp_norm2>:
    14bc:	91 50       	subi	r25, 0x01	; 1
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	d2 f7       	brpl	.-12     	; 0x14bc <__fp_norm2>
    14c8:	08 95       	ret

000014ca <__fp_powsodd>:
    14ca:	9f 93       	push	r25
    14cc:	8f 93       	push	r24
    14ce:	7f 93       	push	r23
    14d0:	6f 93       	push	r22
    14d2:	ff 93       	push	r31
    14d4:	ef 93       	push	r30
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
    14de:	ef 91       	pop	r30
    14e0:	ff 91       	pop	r31
    14e2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_powser>
    14e6:	2f 91       	pop	r18
    14e8:	3f 91       	pop	r19
    14ea:	4f 91       	pop	r20
    14ec:	5f 91       	pop	r21
    14ee:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__mulsf3>

000014f2 <__fp_powser>:
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	1f 93       	push	r17
    14f8:	0f 93       	push	r16
    14fa:	ff 92       	push	r15
    14fc:	ef 92       	push	r14
    14fe:	df 92       	push	r13
    1500:	7b 01       	movw	r14, r22
    1502:	8c 01       	movw	r16, r24
    1504:	68 94       	set
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <__fp_powser+0x22>
    1508:	da 2e       	mov	r13, r26
    150a:	ef 01       	movw	r28, r30
    150c:	0e 94 84 09 	call	0x1308	; 0x1308 <__mulsf3x>
    1510:	fe 01       	movw	r30, r28
    1512:	e8 94       	clt
    1514:	a5 91       	lpm	r26, Z+
    1516:	25 91       	lpm	r18, Z+
    1518:	35 91       	lpm	r19, Z+
    151a:	45 91       	lpm	r20, Z+
    151c:	55 91       	lpm	r21, Z+
    151e:	a6 f3       	brts	.-24     	; 0x1508 <__fp_powser+0x16>
    1520:	ef 01       	movw	r28, r30
    1522:	0e 94 45 08 	call	0x108a	; 0x108a <__addsf3x>
    1526:	fe 01       	movw	r30, r28
    1528:	97 01       	movw	r18, r14
    152a:	a8 01       	movw	r20, r16
    152c:	da 94       	dec	r13
    152e:	69 f7       	brne	.-38     	; 0x150a <__fp_powser+0x18>
    1530:	df 90       	pop	r13
    1532:	ef 90       	pop	r14
    1534:	ff 90       	pop	r15
    1536:	0f 91       	pop	r16
    1538:	1f 91       	pop	r17
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <__udivmodhi4>:
    1540:	aa 1b       	sub	r26, r26
    1542:	bb 1b       	sub	r27, r27
    1544:	51 e1       	ldi	r21, 0x11	; 17
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <__udivmodhi4_ep>

00001548 <__udivmodhi4_loop>:
    1548:	aa 1f       	adc	r26, r26
    154a:	bb 1f       	adc	r27, r27
    154c:	a6 17       	cp	r26, r22
    154e:	b7 07       	cpc	r27, r23
    1550:	10 f0       	brcs	.+4      	; 0x1556 <__udivmodhi4_ep>
    1552:	a6 1b       	sub	r26, r22
    1554:	b7 0b       	sbc	r27, r23

00001556 <__udivmodhi4_ep>:
    1556:	88 1f       	adc	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	5a 95       	dec	r21
    155c:	a9 f7       	brne	.-22     	; 0x1548 <__udivmodhi4_loop>
    155e:	80 95       	com	r24
    1560:	90 95       	com	r25
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	08 95       	ret

00001568 <malloc>:
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	91 05       	cpc	r25, r1
    1574:	10 f4       	brcc	.+4      	; 0x157a <malloc+0x12>
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <__flp>
    157e:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <__flp+0x1>
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	a0 e0       	ldi	r26, 0x00	; 0
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	30 97       	sbiw	r30, 0x00	; 0
    158c:	19 f1       	breq	.+70     	; 0x15d4 <malloc+0x6c>
    158e:	40 81       	ld	r20, Z
    1590:	51 81       	ldd	r21, Z+1	; 0x01
    1592:	02 81       	ldd	r16, Z+2	; 0x02
    1594:	13 81       	ldd	r17, Z+3	; 0x03
    1596:	48 17       	cp	r20, r24
    1598:	59 07       	cpc	r21, r25
    159a:	c8 f0       	brcs	.+50     	; 0x15ce <malloc+0x66>
    159c:	84 17       	cp	r24, r20
    159e:	95 07       	cpc	r25, r21
    15a0:	69 f4       	brne	.+26     	; 0x15bc <malloc+0x54>
    15a2:	10 97       	sbiw	r26, 0x00	; 0
    15a4:	31 f0       	breq	.+12     	; 0x15b2 <malloc+0x4a>
    15a6:	12 96       	adiw	r26, 0x02	; 2
    15a8:	0c 93       	st	X, r16
    15aa:	12 97       	sbiw	r26, 0x02	; 2
    15ac:	13 96       	adiw	r26, 0x03	; 3
    15ae:	1c 93       	st	X, r17
    15b0:	27 c0       	rjmp	.+78     	; 0x1600 <malloc+0x98>
    15b2:	00 93 12 20 	sts	0x2012, r16	; 0x802012 <__flp>
    15b6:	10 93 13 20 	sts	0x2013, r17	; 0x802013 <__flp+0x1>
    15ba:	22 c0       	rjmp	.+68     	; 0x1600 <malloc+0x98>
    15bc:	21 15       	cp	r18, r1
    15be:	31 05       	cpc	r19, r1
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <malloc+0x60>
    15c2:	42 17       	cp	r20, r18
    15c4:	53 07       	cpc	r21, r19
    15c6:	18 f4       	brcc	.+6      	; 0x15ce <malloc+0x66>
    15c8:	9a 01       	movw	r18, r20
    15ca:	bd 01       	movw	r22, r26
    15cc:	ef 01       	movw	r28, r30
    15ce:	df 01       	movw	r26, r30
    15d0:	f8 01       	movw	r30, r16
    15d2:	db cf       	rjmp	.-74     	; 0x158a <malloc+0x22>
    15d4:	21 15       	cp	r18, r1
    15d6:	31 05       	cpc	r19, r1
    15d8:	f9 f0       	breq	.+62     	; 0x1618 <malloc+0xb0>
    15da:	28 1b       	sub	r18, r24
    15dc:	39 0b       	sbc	r19, r25
    15de:	24 30       	cpi	r18, 0x04	; 4
    15e0:	31 05       	cpc	r19, r1
    15e2:	80 f4       	brcc	.+32     	; 0x1604 <malloc+0x9c>
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	61 15       	cp	r22, r1
    15ea:	71 05       	cpc	r23, r1
    15ec:	21 f0       	breq	.+8      	; 0x15f6 <malloc+0x8e>
    15ee:	fb 01       	movw	r30, r22
    15f0:	82 83       	std	Z+2, r24	; 0x02
    15f2:	93 83       	std	Z+3, r25	; 0x03
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <malloc+0x96>
    15f6:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <__flp>
    15fa:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <__flp+0x1>
    15fe:	fe 01       	movw	r30, r28
    1600:	32 96       	adiw	r30, 0x02	; 2
    1602:	44 c0       	rjmp	.+136    	; 0x168c <malloc+0x124>
    1604:	fe 01       	movw	r30, r28
    1606:	e2 0f       	add	r30, r18
    1608:	f3 1f       	adc	r31, r19
    160a:	81 93       	st	Z+, r24
    160c:	91 93       	st	Z+, r25
    160e:	22 50       	subi	r18, 0x02	; 2
    1610:	31 09       	sbc	r19, r1
    1612:	28 83       	st	Y, r18
    1614:	39 83       	std	Y+1, r19	; 0x01
    1616:	3a c0       	rjmp	.+116    	; 0x168c <malloc+0x124>
    1618:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    161c:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    1620:	23 2b       	or	r18, r19
    1622:	41 f4       	brne	.+16     	; 0x1634 <malloc+0xcc>
    1624:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1628:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    162c:	20 93 10 20 	sts	0x2010, r18	; 0x802010 <__brkval>
    1630:	30 93 11 20 	sts	0x2011, r19	; 0x802011 <__brkval+0x1>
    1634:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    1638:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    163c:	21 15       	cp	r18, r1
    163e:	31 05       	cpc	r19, r1
    1640:	41 f4       	brne	.+16     	; 0x1652 <malloc+0xea>
    1642:	2d b7       	in	r18, 0x3d	; 61
    1644:	3e b7       	in	r19, 0x3e	; 62
    1646:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    164a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    164e:	24 1b       	sub	r18, r20
    1650:	35 0b       	sbc	r19, r21
    1652:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <__brkval>
    1656:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <__brkval+0x1>
    165a:	e2 17       	cp	r30, r18
    165c:	f3 07       	cpc	r31, r19
    165e:	a0 f4       	brcc	.+40     	; 0x1688 <malloc+0x120>
    1660:	2e 1b       	sub	r18, r30
    1662:	3f 0b       	sbc	r19, r31
    1664:	28 17       	cp	r18, r24
    1666:	39 07       	cpc	r19, r25
    1668:	78 f0       	brcs	.+30     	; 0x1688 <malloc+0x120>
    166a:	ac 01       	movw	r20, r24
    166c:	4e 5f       	subi	r20, 0xFE	; 254
    166e:	5f 4f       	sbci	r21, 0xFF	; 255
    1670:	24 17       	cp	r18, r20
    1672:	35 07       	cpc	r19, r21
    1674:	48 f0       	brcs	.+18     	; 0x1688 <malloc+0x120>
    1676:	4e 0f       	add	r20, r30
    1678:	5f 1f       	adc	r21, r31
    167a:	40 93 10 20 	sts	0x2010, r20	; 0x802010 <__brkval>
    167e:	50 93 11 20 	sts	0x2011, r21	; 0x802011 <__brkval+0x1>
    1682:	81 93       	st	Z+, r24
    1684:	91 93       	st	Z+, r25
    1686:	02 c0       	rjmp	.+4      	; 0x168c <malloc+0x124>
    1688:	e0 e0       	ldi	r30, 0x00	; 0
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	cf 01       	movw	r24, r30
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	08 95       	ret

00001698 <free>:
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	09 f4       	brne	.+2      	; 0x16a2 <free+0xa>
    16a0:	81 c0       	rjmp	.+258    	; 0x17a4 <free+0x10c>
    16a2:	fc 01       	movw	r30, r24
    16a4:	32 97       	sbiw	r30, 0x02	; 2
    16a6:	12 82       	std	Z+2, r1	; 0x02
    16a8:	13 82       	std	Z+3, r1	; 0x03
    16aa:	a0 91 12 20 	lds	r26, 0x2012	; 0x802012 <__flp>
    16ae:	b0 91 13 20 	lds	r27, 0x2013	; 0x802013 <__flp+0x1>
    16b2:	10 97       	sbiw	r26, 0x00	; 0
    16b4:	81 f4       	brne	.+32     	; 0x16d6 <free+0x3e>
    16b6:	20 81       	ld	r18, Z
    16b8:	31 81       	ldd	r19, Z+1	; 0x01
    16ba:	82 0f       	add	r24, r18
    16bc:	93 1f       	adc	r25, r19
    16be:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    16c2:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    16c6:	28 17       	cp	r18, r24
    16c8:	39 07       	cpc	r19, r25
    16ca:	51 f5       	brne	.+84     	; 0x1720 <free+0x88>
    16cc:	e0 93 10 20 	sts	0x2010, r30	; 0x802010 <__brkval>
    16d0:	f0 93 11 20 	sts	0x2011, r31	; 0x802011 <__brkval+0x1>
    16d4:	67 c0       	rjmp	.+206    	; 0x17a4 <free+0x10c>
    16d6:	ed 01       	movw	r28, r26
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	ce 17       	cp	r28, r30
    16de:	df 07       	cpc	r29, r31
    16e0:	40 f4       	brcc	.+16     	; 0x16f2 <free+0x5a>
    16e2:	4a 81       	ldd	r20, Y+2	; 0x02
    16e4:	5b 81       	ldd	r21, Y+3	; 0x03
    16e6:	9e 01       	movw	r18, r28
    16e8:	41 15       	cp	r20, r1
    16ea:	51 05       	cpc	r21, r1
    16ec:	f1 f0       	breq	.+60     	; 0x172a <free+0x92>
    16ee:	ea 01       	movw	r28, r20
    16f0:	f5 cf       	rjmp	.-22     	; 0x16dc <free+0x44>
    16f2:	c2 83       	std	Z+2, r28	; 0x02
    16f4:	d3 83       	std	Z+3, r29	; 0x03
    16f6:	40 81       	ld	r20, Z
    16f8:	51 81       	ldd	r21, Z+1	; 0x01
    16fa:	84 0f       	add	r24, r20
    16fc:	95 1f       	adc	r25, r21
    16fe:	c8 17       	cp	r28, r24
    1700:	d9 07       	cpc	r29, r25
    1702:	59 f4       	brne	.+22     	; 0x171a <free+0x82>
    1704:	88 81       	ld	r24, Y
    1706:	99 81       	ldd	r25, Y+1	; 0x01
    1708:	84 0f       	add	r24, r20
    170a:	95 1f       	adc	r25, r21
    170c:	02 96       	adiw	r24, 0x02	; 2
    170e:	80 83       	st	Z, r24
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	82 83       	std	Z+2, r24	; 0x02
    1718:	93 83       	std	Z+3, r25	; 0x03
    171a:	21 15       	cp	r18, r1
    171c:	31 05       	cpc	r19, r1
    171e:	29 f4       	brne	.+10     	; 0x172a <free+0x92>
    1720:	e0 93 12 20 	sts	0x2012, r30	; 0x802012 <__flp>
    1724:	f0 93 13 20 	sts	0x2013, r31	; 0x802013 <__flp+0x1>
    1728:	3d c0       	rjmp	.+122    	; 0x17a4 <free+0x10c>
    172a:	e9 01       	movw	r28, r18
    172c:	ea 83       	std	Y+2, r30	; 0x02
    172e:	fb 83       	std	Y+3, r31	; 0x03
    1730:	49 91       	ld	r20, Y+
    1732:	59 91       	ld	r21, Y+
    1734:	c4 0f       	add	r28, r20
    1736:	d5 1f       	adc	r29, r21
    1738:	ec 17       	cp	r30, r28
    173a:	fd 07       	cpc	r31, r29
    173c:	61 f4       	brne	.+24     	; 0x1756 <free+0xbe>
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	84 0f       	add	r24, r20
    1744:	95 1f       	adc	r25, r21
    1746:	02 96       	adiw	r24, 0x02	; 2
    1748:	e9 01       	movw	r28, r18
    174a:	88 83       	st	Y, r24
    174c:	99 83       	std	Y+1, r25	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	8a 83       	std	Y+2, r24	; 0x02
    1754:	9b 83       	std	Y+3, r25	; 0x03
    1756:	e0 e0       	ldi	r30, 0x00	; 0
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	12 96       	adiw	r26, 0x02	; 2
    175c:	8d 91       	ld	r24, X+
    175e:	9c 91       	ld	r25, X
    1760:	13 97       	sbiw	r26, 0x03	; 3
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	19 f0       	breq	.+6      	; 0x176c <free+0xd4>
    1766:	fd 01       	movw	r30, r26
    1768:	dc 01       	movw	r26, r24
    176a:	f7 cf       	rjmp	.-18     	; 0x175a <free+0xc2>
    176c:	8d 91       	ld	r24, X+
    176e:	9c 91       	ld	r25, X
    1770:	11 97       	sbiw	r26, 0x01	; 1
    1772:	9d 01       	movw	r18, r26
    1774:	2e 5f       	subi	r18, 0xFE	; 254
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	82 0f       	add	r24, r18
    177a:	93 1f       	adc	r25, r19
    177c:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__brkval>
    1780:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__brkval+0x1>
    1784:	28 17       	cp	r18, r24
    1786:	39 07       	cpc	r19, r25
    1788:	69 f4       	brne	.+26     	; 0x17a4 <free+0x10c>
    178a:	30 97       	sbiw	r30, 0x00	; 0
    178c:	29 f4       	brne	.+10     	; 0x1798 <free+0x100>
    178e:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <__flp>
    1792:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <__flp+0x1>
    1796:	02 c0       	rjmp	.+4      	; 0x179c <free+0x104>
    1798:	12 82       	std	Z+2, r1	; 0x02
    179a:	13 82       	std	Z+3, r1	; 0x03
    179c:	a0 93 10 20 	sts	0x2010, r26	; 0x802010 <__brkval>
    17a0:	b0 93 11 20 	sts	0x2011, r27	; 0x802011 <__brkval+0x1>
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <_exit>:
    17aa:	f8 94       	cli

000017ac <__stop_program>:
    17ac:	ff cf       	rjmp	.-2      	; 0x17ac <__stop_program>
